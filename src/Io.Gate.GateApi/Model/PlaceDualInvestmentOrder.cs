/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Dual Investment order
    /// </summary>
    [DataContract]
    public partial class PlaceDualInvestmentOrder :  IEquatable<PlaceDualInvestmentOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceDualInvestmentOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlaceDualInvestmentOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceDualInvestmentOrder" /> class.
        /// </summary>
        /// <param name="planId">Plan ID (required).</param>
        /// <param name="copies">Copies (required).</param>
        public PlaceDualInvestmentOrder(string planId = default(string), string copies = default(string))
        {
            // to ensure "planId" is required (not null)
            this.PlanId = planId ?? throw new ArgumentNullException("planId", "planId is a required property for PlaceDualInvestmentOrder and cannot be null");
            // to ensure "copies" is required (not null)
            this.Copies = copies ?? throw new ArgumentNullException("copies", "copies is a required property for PlaceDualInvestmentOrder and cannot be null");
        }

        /// <summary>
        /// Plan ID
        /// </summary>
        /// <value>Plan ID</value>
        [DataMember(Name="plan_id")]
        public string PlanId { get; set; }

        /// <summary>
        /// Copies
        /// </summary>
        /// <value>Copies</value>
        [DataMember(Name="copies")]
        public string Copies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlaceDualInvestmentOrder {\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  Copies: ").Append(Copies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlaceDualInvestmentOrder);
        }

        /// <summary>
        /// Returns true if PlaceDualInvestmentOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of PlaceDualInvestmentOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlaceDualInvestmentOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.Copies == input.Copies ||
                    (this.Copies != null &&
                    this.Copies.Equals(input.Copies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlanId != null)
                    hashCode = hashCode * 59 + this.PlanId.GetHashCode();
                if (this.Copies != null)
                    hashCode = hashCode * 59 + this.Copies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
