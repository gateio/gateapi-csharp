/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Structured Products
    /// </summary>
    [DataContract]
    public partial class StructuredGetProjectList :  IEquatable<StructuredGetProjectList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredGetProjectList" /> class.
        /// </summary>
        /// <param name="id">Plan ID.</param>
        /// <param name="type">product type:   &#x60;SharkFin2.0&#x60;-Shark Fin2.0  &#x60;BullishSharkFin&#x60;-Bullish Shark Fin  &#x60;BearishSharkFin&#x60;-Bearish Shark Fin &#x60;DoubleNoTouch&#x60;-Double No-Touch &#x60;RangeAccrual&#x60;-Range Accrual &#x60;SnowBall&#x60;-Snow Ball.</param>
        /// <param name="nameEn">name.</param>
        /// <param name="investmentCoin">Investment Currency.</param>
        /// <param name="investmentPeriod">Investment term.</param>
        /// <param name="minAnnualRate">Minimum annual rate.</param>
        /// <param name="midAnnualRate">Intermediate annual rate.</param>
        /// <param name="maxAnnualRate">Maximum annual rate.</param>
        /// <param name="watchMarket">Watch market.</param>
        /// <param name="startTime">start time.</param>
        /// <param name="endTime">Finished time.</param>
        /// <param name="status">Status:   &#x60;in_process&#x60;-in progress  &#x60;will_begin&#x60;-will begin  &#x60;wait_settlement&#x60;-waiting for settlement  &#x60;done&#x60;-done.</param>
        public StructuredGetProjectList(int id = default(int), string type = default(string), string nameEn = default(string), string investmentCoin = default(string), string investmentPeriod = default(string), string minAnnualRate = default(string), string midAnnualRate = default(string), string maxAnnualRate = default(string), string watchMarket = default(string), int startTime = default(int), int endTime = default(int), string status = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.NameEn = nameEn;
            this.InvestmentCoin = investmentCoin;
            this.InvestmentPeriod = investmentPeriod;
            this.MinAnnualRate = minAnnualRate;
            this.MidAnnualRate = midAnnualRate;
            this.MaxAnnualRate = maxAnnualRate;
            this.WatchMarket = watchMarket;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Status = status;
        }

        /// <summary>
        /// Plan ID
        /// </summary>
        /// <value>Plan ID</value>
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// product type:   &#x60;SharkFin2.0&#x60;-Shark Fin2.0  &#x60;BullishSharkFin&#x60;-Bullish Shark Fin  &#x60;BearishSharkFin&#x60;-Bearish Shark Fin &#x60;DoubleNoTouch&#x60;-Double No-Touch &#x60;RangeAccrual&#x60;-Range Accrual &#x60;SnowBall&#x60;-Snow Ball
        /// </summary>
        /// <value>product type:   &#x60;SharkFin2.0&#x60;-Shark Fin2.0  &#x60;BullishSharkFin&#x60;-Bullish Shark Fin  &#x60;BearishSharkFin&#x60;-Bearish Shark Fin &#x60;DoubleNoTouch&#x60;-Double No-Touch &#x60;RangeAccrual&#x60;-Range Accrual &#x60;SnowBall&#x60;-Snow Ball</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name_en")]
        public string NameEn { get; set; }

        /// <summary>
        /// Investment Currency
        /// </summary>
        /// <value>Investment Currency</value>
        [DataMember(Name="investment_coin")]
        public string InvestmentCoin { get; set; }

        /// <summary>
        /// Investment term
        /// </summary>
        /// <value>Investment term</value>
        [DataMember(Name="investment_period")]
        public string InvestmentPeriod { get; set; }

        /// <summary>
        /// Minimum annual rate
        /// </summary>
        /// <value>Minimum annual rate</value>
        [DataMember(Name="min_annual_rate")]
        public string MinAnnualRate { get; set; }

        /// <summary>
        /// Intermediate annual rate
        /// </summary>
        /// <value>Intermediate annual rate</value>
        [DataMember(Name="mid_annual_rate")]
        public string MidAnnualRate { get; set; }

        /// <summary>
        /// Maximum annual rate
        /// </summary>
        /// <value>Maximum annual rate</value>
        [DataMember(Name="max_annual_rate")]
        public string MaxAnnualRate { get; set; }

        /// <summary>
        /// Watch market
        /// </summary>
        /// <value>Watch market</value>
        [DataMember(Name="watch_market")]
        public string WatchMarket { get; set; }

        /// <summary>
        /// start time
        /// </summary>
        /// <value>start time</value>
        [DataMember(Name="start_time")]
        public int StartTime { get; set; }

        /// <summary>
        /// Finished time
        /// </summary>
        /// <value>Finished time</value>
        [DataMember(Name="end_time")]
        public int EndTime { get; set; }

        /// <summary>
        /// Status:   &#x60;in_process&#x60;-in progress  &#x60;will_begin&#x60;-will begin  &#x60;wait_settlement&#x60;-waiting for settlement  &#x60;done&#x60;-done
        /// </summary>
        /// <value>Status:   &#x60;in_process&#x60;-in progress  &#x60;will_begin&#x60;-will begin  &#x60;wait_settlement&#x60;-waiting for settlement  &#x60;done&#x60;-done</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructuredGetProjectList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NameEn: ").Append(NameEn).Append("\n");
            sb.Append("  InvestmentCoin: ").Append(InvestmentCoin).Append("\n");
            sb.Append("  InvestmentPeriod: ").Append(InvestmentPeriod).Append("\n");
            sb.Append("  MinAnnualRate: ").Append(MinAnnualRate).Append("\n");
            sb.Append("  MidAnnualRate: ").Append(MidAnnualRate).Append("\n");
            sb.Append("  MaxAnnualRate: ").Append(MaxAnnualRate).Append("\n");
            sb.Append("  WatchMarket: ").Append(WatchMarket).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredGetProjectList);
        }

        /// <summary>
        /// Returns true if StructuredGetProjectList instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredGetProjectList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredGetProjectList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NameEn == input.NameEn ||
                    (this.NameEn != null &&
                    this.NameEn.Equals(input.NameEn))
                ) && 
                (
                    this.InvestmentCoin == input.InvestmentCoin ||
                    (this.InvestmentCoin != null &&
                    this.InvestmentCoin.Equals(input.InvestmentCoin))
                ) && 
                (
                    this.InvestmentPeriod == input.InvestmentPeriod ||
                    (this.InvestmentPeriod != null &&
                    this.InvestmentPeriod.Equals(input.InvestmentPeriod))
                ) && 
                (
                    this.MinAnnualRate == input.MinAnnualRate ||
                    (this.MinAnnualRate != null &&
                    this.MinAnnualRate.Equals(input.MinAnnualRate))
                ) && 
                (
                    this.MidAnnualRate == input.MidAnnualRate ||
                    (this.MidAnnualRate != null &&
                    this.MidAnnualRate.Equals(input.MidAnnualRate))
                ) && 
                (
                    this.MaxAnnualRate == input.MaxAnnualRate ||
                    (this.MaxAnnualRate != null &&
                    this.MaxAnnualRate.Equals(input.MaxAnnualRate))
                ) && 
                (
                    this.WatchMarket == input.WatchMarket ||
                    (this.WatchMarket != null &&
                    this.WatchMarket.Equals(input.WatchMarket))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    this.StartTime.Equals(input.StartTime)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NameEn != null)
                    hashCode = hashCode * 59 + this.NameEn.GetHashCode();
                if (this.InvestmentCoin != null)
                    hashCode = hashCode * 59 + this.InvestmentCoin.GetHashCode();
                if (this.InvestmentPeriod != null)
                    hashCode = hashCode * 59 + this.InvestmentPeriod.GetHashCode();
                if (this.MinAnnualRate != null)
                    hashCode = hashCode * 59 + this.MinAnnualRate.GetHashCode();
                if (this.MidAnnualRate != null)
                    hashCode = hashCode * 59 + this.MidAnnualRate.GetHashCode();
                if (this.MaxAnnualRate != null)
                    hashCode = hashCode * 59 + this.MaxAnnualRate.GetHashCode();
                if (this.WatchMarket != null)
                    hashCode = hashCode * 59 + this.WatchMarket.GetHashCode();
                hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
