/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// RepayRecordCurrency
    /// </summary>
    [DataContract]
    public partial class RepayRecordCurrency :  IEquatable<RepayRecordCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepayRecordCurrency" /> class.
        /// </summary>
        /// <param name="currency">Currency.</param>
        /// <param name="indexPrice">Currency Index Price.</param>
        /// <param name="beforeAmount">Amount before the operation.</param>
        /// <param name="beforeAmountUsdt">USDT Amount before the operation..</param>
        /// <param name="afterAmount">Amount after the operation..</param>
        /// <param name="afterAmountUsdt">USDT Amount after the operation..</param>
        public RepayRecordCurrency(string currency = default(string), string indexPrice = default(string), string beforeAmount = default(string), string beforeAmountUsdt = default(string), string afterAmount = default(string), string afterAmountUsdt = default(string))
        {
            this.Currency = currency;
            this.IndexPrice = indexPrice;
            this.BeforeAmount = beforeAmount;
            this.BeforeAmountUsdt = beforeAmountUsdt;
            this.AfterAmount = afterAmount;
            this.AfterAmountUsdt = afterAmountUsdt;
        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Currency Index Price
        /// </summary>
        /// <value>Currency Index Price</value>
        [DataMember(Name="index_price")]
        public string IndexPrice { get; set; }

        /// <summary>
        /// Amount before the operation
        /// </summary>
        /// <value>Amount before the operation</value>
        [DataMember(Name="before_amount")]
        public string BeforeAmount { get; set; }

        /// <summary>
        /// USDT Amount before the operation.
        /// </summary>
        /// <value>USDT Amount before the operation.</value>
        [DataMember(Name="before_amount_usdt")]
        public string BeforeAmountUsdt { get; set; }

        /// <summary>
        /// Amount after the operation.
        /// </summary>
        /// <value>Amount after the operation.</value>
        [DataMember(Name="after_amount")]
        public string AfterAmount { get; set; }

        /// <summary>
        /// USDT Amount after the operation.
        /// </summary>
        /// <value>USDT Amount after the operation.</value>
        [DataMember(Name="after_amount_usdt")]
        public string AfterAmountUsdt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepayRecordCurrency {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IndexPrice: ").Append(IndexPrice).Append("\n");
            sb.Append("  BeforeAmount: ").Append(BeforeAmount).Append("\n");
            sb.Append("  BeforeAmountUsdt: ").Append(BeforeAmountUsdt).Append("\n");
            sb.Append("  AfterAmount: ").Append(AfterAmount).Append("\n");
            sb.Append("  AfterAmountUsdt: ").Append(AfterAmountUsdt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepayRecordCurrency);
        }

        /// <summary>
        /// Returns true if RepayRecordCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of RepayRecordCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepayRecordCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IndexPrice == input.IndexPrice ||
                    (this.IndexPrice != null &&
                    this.IndexPrice.Equals(input.IndexPrice))
                ) && 
                (
                    this.BeforeAmount == input.BeforeAmount ||
                    (this.BeforeAmount != null &&
                    this.BeforeAmount.Equals(input.BeforeAmount))
                ) && 
                (
                    this.BeforeAmountUsdt == input.BeforeAmountUsdt ||
                    (this.BeforeAmountUsdt != null &&
                    this.BeforeAmountUsdt.Equals(input.BeforeAmountUsdt))
                ) && 
                (
                    this.AfterAmount == input.AfterAmount ||
                    (this.AfterAmount != null &&
                    this.AfterAmount.Equals(input.AfterAmount))
                ) && 
                (
                    this.AfterAmountUsdt == input.AfterAmountUsdt ||
                    (this.AfterAmountUsdt != null &&
                    this.AfterAmountUsdt.Equals(input.AfterAmountUsdt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.IndexPrice != null)
                    hashCode = hashCode * 59 + this.IndexPrice.GetHashCode();
                if (this.BeforeAmount != null)
                    hashCode = hashCode * 59 + this.BeforeAmount.GetHashCode();
                if (this.BeforeAmountUsdt != null)
                    hashCode = hashCode * 59 + this.BeforeAmountUsdt.GetHashCode();
                if (this.AfterAmount != null)
                    hashCode = hashCode * 59 + this.AfterAmount.GetHashCode();
                if (this.AfterAmountUsdt != null)
                    hashCode = hashCode * 59 + this.AfterAmountUsdt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
