/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// FuturesOrderAmendment
    /// </summary>
    [DataContract]
    public partial class FuturesOrderAmendment :  IEquatable<FuturesOrderAmendment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FuturesOrderAmendment" /> class.
        /// </summary>
        /// <param name="size">New order size, including filled part.  - If new size is less than or equal to filled size, the order will be cancelled. - Order side must be identical to the original one. - Close order size cannot be changed. - For reduce only orders, increasing size may leads to other reduce only orders being cancelled. - If price is not changed, decreasing size will not change its precedence in order book, while increasing will move it to the last at current price..</param>
        /// <param name="price">New order price..</param>
        /// <param name="amendText">Custom info during amending order.</param>
        /// <param name="bizInfo">Users can annotate this modification with information..</param>
        /// <param name="bbo">Users are able to modify the offer price manually..</param>
        public FuturesOrderAmendment(long size = default(long), string price = default(string), string amendText = default(string), string bizInfo = default(string), string bbo = default(string))
        {
            this.Size = size;
            this.Price = price;
            this.AmendText = amendText;
            this.BizInfo = bizInfo;
            this.Bbo = bbo;
        }

        /// <summary>
        /// New order size, including filled part.  - If new size is less than or equal to filled size, the order will be cancelled. - Order side must be identical to the original one. - Close order size cannot be changed. - For reduce only orders, increasing size may leads to other reduce only orders being cancelled. - If price is not changed, decreasing size will not change its precedence in order book, while increasing will move it to the last at current price.
        /// </summary>
        /// <value>New order size, including filled part.  - If new size is less than or equal to filled size, the order will be cancelled. - Order side must be identical to the original one. - Close order size cannot be changed. - For reduce only orders, increasing size may leads to other reduce only orders being cancelled. - If price is not changed, decreasing size will not change its precedence in order book, while increasing will move it to the last at current price.</value>
        [DataMember(Name="size")]
        public long Size { get; set; }

        /// <summary>
        /// New order price.
        /// </summary>
        /// <value>New order price.</value>
        [DataMember(Name="price")]
        public string Price { get; set; }

        /// <summary>
        /// Custom info during amending order
        /// </summary>
        /// <value>Custom info during amending order</value>
        [DataMember(Name="amend_text")]
        public string AmendText { get; set; }

        /// <summary>
        /// Users can annotate this modification with information.
        /// </summary>
        /// <value>Users can annotate this modification with information.</value>
        [DataMember(Name="biz_info")]
        public string BizInfo { get; set; }

        /// <summary>
        /// Users are able to modify the offer price manually.
        /// </summary>
        /// <value>Users are able to modify the offer price manually.</value>
        [DataMember(Name="bbo")]
        public string Bbo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FuturesOrderAmendment {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AmendText: ").Append(AmendText).Append("\n");
            sb.Append("  BizInfo: ").Append(BizInfo).Append("\n");
            sb.Append("  Bbo: ").Append(Bbo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FuturesOrderAmendment);
        }

        /// <summary>
        /// Returns true if FuturesOrderAmendment instances are equal
        /// </summary>
        /// <param name="input">Instance of FuturesOrderAmendment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FuturesOrderAmendment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.AmendText == input.AmendText ||
                    (this.AmendText != null &&
                    this.AmendText.Equals(input.AmendText))
                ) && 
                (
                    this.BizInfo == input.BizInfo ||
                    (this.BizInfo != null &&
                    this.BizInfo.Equals(input.BizInfo))
                ) && 
                (
                    this.Bbo == input.Bbo ||
                    (this.Bbo != null &&
                    this.Bbo.Equals(input.Bbo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.AmendText != null)
                    hashCode = hashCode * 59 + this.AmendText.GetHashCode();
                if (this.BizInfo != null)
                    hashCode = hashCode * 59 + this.BizInfo.GetHashCode();
                if (this.Bbo != null)
                    hashCode = hashCode * 59 + this.Bbo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
