/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// RepayCurrencyRes
    /// </summary>
    [DataContract]
    public partial class RepayCurrencyRes :  IEquatable<RepayCurrencyRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepayCurrencyRes" /> class.
        /// </summary>
        /// <param name="succeeded">Has the repayment been successful.</param>
        /// <param name="label">Error identifier for unsuccessful operations; empty for successful..</param>
        /// <param name="message">Error description in case of operation failure; empty when successful..</param>
        /// <param name="currency">Repayment currency.</param>
        /// <param name="repaidPrincipal">Principal.</param>
        /// <param name="repaidInterest">Principal.</param>
        public RepayCurrencyRes(bool succeeded = default(bool), string label = default(string), string message = default(string), string currency = default(string), string repaidPrincipal = default(string), string repaidInterest = default(string))
        {
            this.Succeeded = succeeded;
            this.Label = label;
            this.Message = message;
            this.Currency = currency;
            this.RepaidPrincipal = repaidPrincipal;
            this.RepaidInterest = repaidInterest;
        }

        /// <summary>
        /// Has the repayment been successful
        /// </summary>
        /// <value>Has the repayment been successful</value>
        [DataMember(Name="succeeded")]
        public bool Succeeded { get; set; }

        /// <summary>
        /// Error identifier for unsuccessful operations; empty for successful.
        /// </summary>
        /// <value>Error identifier for unsuccessful operations; empty for successful.</value>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Error description in case of operation failure; empty when successful.
        /// </summary>
        /// <value>Error description in case of operation failure; empty when successful.</value>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Repayment currency
        /// </summary>
        /// <value>Repayment currency</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Principal
        /// </summary>
        /// <value>Principal</value>
        [DataMember(Name="repaid_principal")]
        public string RepaidPrincipal { get; set; }

        /// <summary>
        /// Principal
        /// </summary>
        /// <value>Principal</value>
        [DataMember(Name="repaid_interest")]
        public string RepaidInterest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepayCurrencyRes {\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RepaidPrincipal: ").Append(RepaidPrincipal).Append("\n");
            sb.Append("  RepaidInterest: ").Append(RepaidInterest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepayCurrencyRes);
        }

        /// <summary>
        /// Returns true if RepayCurrencyRes instances are equal
        /// </summary>
        /// <param name="input">Instance of RepayCurrencyRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepayCurrencyRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Succeeded == input.Succeeded ||
                    this.Succeeded.Equals(input.Succeeded)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RepaidPrincipal == input.RepaidPrincipal ||
                    (this.RepaidPrincipal != null &&
                    this.RepaidPrincipal.Equals(input.RepaidPrincipal))
                ) && 
                (
                    this.RepaidInterest == input.RepaidInterest ||
                    (this.RepaidInterest != null &&
                    this.RepaidInterest.Equals(input.RepaidInterest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Succeeded.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.RepaidPrincipal != null)
                    hashCode = hashCode * 59 + this.RepaidPrincipal.GetHashCode();
                if (this.RepaidInterest != null)
                    hashCode = hashCode * 59 + this.RepaidInterest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
