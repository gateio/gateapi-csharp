/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UnifiedHistoryLoanRate
    /// </summary>
    [DataContract]
    public partial class UnifiedHistoryLoanRate :  IEquatable<UnifiedHistoryLoanRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedHistoryLoanRate" /> class.
        /// </summary>
        /// <param name="currency">Currency name..</param>
        /// <param name="tier">The VIP level of the floating rate required..</param>
        /// <param name="tierUpRate">VIP level corresponding floating rate..</param>
        /// <param name="rates">Historical interest rate information, one data per hour, the array size is determined by the page and limit parameters provided by the interface request parameters, sorted from recent to far in time.</param>
        public UnifiedHistoryLoanRate(string currency = default(string), string tier = default(string), string tierUpRate = default(string), List<UnifiedHistoryLoanRateRates> rates = default(List<UnifiedHistoryLoanRateRates>))
        {
            this.Currency = currency;
            this.Tier = tier;
            this.TierUpRate = tierUpRate;
            this.Rates = rates;
        }

        /// <summary>
        /// Currency name.
        /// </summary>
        /// <value>Currency name.</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The VIP level of the floating rate required.
        /// </summary>
        /// <value>The VIP level of the floating rate required.</value>
        [DataMember(Name="tier")]
        public string Tier { get; set; }

        /// <summary>
        /// VIP level corresponding floating rate.
        /// </summary>
        /// <value>VIP level corresponding floating rate.</value>
        [DataMember(Name="tier_up_rate")]
        public string TierUpRate { get; set; }

        /// <summary>
        /// Historical interest rate information, one data per hour, the array size is determined by the page and limit parameters provided by the interface request parameters, sorted from recent to far in time
        /// </summary>
        /// <value>Historical interest rate information, one data per hour, the array size is determined by the page and limit parameters provided by the interface request parameters, sorted from recent to far in time</value>
        [DataMember(Name="rates")]
        public List<UnifiedHistoryLoanRateRates> Rates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedHistoryLoanRate {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TierUpRate: ").Append(TierUpRate).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedHistoryLoanRate);
        }

        /// <summary>
        /// Returns true if UnifiedHistoryLoanRate instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedHistoryLoanRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedHistoryLoanRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.TierUpRate == input.TierUpRate ||
                    (this.TierUpRate != null &&
                    this.TierUpRate.Equals(input.TierUpRate))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.TierUpRate != null)
                    hashCode = hashCode * 59 + this.TierUpRate.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
