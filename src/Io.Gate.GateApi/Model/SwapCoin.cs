/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Blockchain Mining.
    /// </summary>
    [DataContract]
    public partial class SwapCoin :  IEquatable<SwapCoin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwapCoin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SwapCoin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwapCoin" /> class.
        /// </summary>
        /// <param name="coin">Currency. (required).</param>
        /// <param name="side">0 - Stake 1 - Redeem. (required).</param>
        /// <param name="amount">Size. (required).</param>
        /// <param name="pid">DeFi-type Mining Protocol Identifier..</param>
        public SwapCoin(string coin = default(string), string side = default(string), string amount = default(string), int pid = default(int))
        {
            // to ensure "coin" is required (not null)
            this.Coin = coin ?? throw new ArgumentNullException("coin", "coin is a required property for SwapCoin and cannot be null");
            // to ensure "side" is required (not null)
            this.Side = side ?? throw new ArgumentNullException("side", "side is a required property for SwapCoin and cannot be null");
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount", "amount is a required property for SwapCoin and cannot be null");
            this.Pid = pid;
        }

        /// <summary>
        /// Currency.
        /// </summary>
        /// <value>Currency.</value>
        [DataMember(Name="coin")]
        public string Coin { get; set; }

        /// <summary>
        /// 0 - Stake 1 - Redeem.
        /// </summary>
        /// <value>0 - Stake 1 - Redeem.</value>
        [DataMember(Name="side")]
        public string Side { get; set; }

        /// <summary>
        /// Size.
        /// </summary>
        /// <value>Size.</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// DeFi-type Mining Protocol Identifier.
        /// </summary>
        /// <value>DeFi-type Mining Protocol Identifier.</value>
        [DataMember(Name="pid")]
        public int Pid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwapCoin {\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwapCoin);
        }

        /// <summary>
        /// Returns true if SwapCoin instances are equal
        /// </summary>
        /// <param name="input">Instance of SwapCoin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwapCoin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Coin == input.Coin ||
                    (this.Coin != null &&
                    this.Coin.Equals(input.Coin))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Pid == input.Pid ||
                    this.Pid.Equals(input.Pid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Coin != null)
                    hashCode = hashCode * 59 + this.Coin.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Pid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
