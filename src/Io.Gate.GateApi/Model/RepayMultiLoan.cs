/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Repay Multi-Collateral Loan
    /// </summary>
    [DataContract]
    public partial class RepayMultiLoan :  IEquatable<RepayMultiLoan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepayMultiLoan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RepayMultiLoan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RepayMultiLoan" /> class.
        /// </summary>
        /// <param name="orderId">Order ID (required).</param>
        /// <param name="repayItems">Repay Currency Item (required).</param>
        public RepayMultiLoan(long orderId = default(long), List<MultiLoanRepayItem> repayItems = default(List<MultiLoanRepayItem>))
        {
            this.OrderId = orderId;
            // to ensure "repayItems" is required (not null)
            this.RepayItems = repayItems ?? throw new ArgumentNullException("repayItems", "repayItems is a required property for RepayMultiLoan and cannot be null");
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Repay Currency Item
        /// </summary>
        /// <value>Repay Currency Item</value>
        [DataMember(Name="repay_items")]
        public List<MultiLoanRepayItem> RepayItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepayMultiLoan {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RepayItems: ").Append(RepayItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepayMultiLoan);
        }

        /// <summary>
        /// Returns true if RepayMultiLoan instances are equal
        /// </summary>
        /// <param name="input">Instance of RepayMultiLoan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepayMultiLoan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.RepayItems == input.RepayItems ||
                    this.RepayItems != null &&
                    input.RepayItems != null &&
                    this.RepayItems.SequenceEqual(input.RepayItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.RepayItems != null)
                    hashCode = hashCode * 59 + this.RepayItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
