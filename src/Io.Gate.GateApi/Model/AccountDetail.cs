/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Account detail
    /// </summary>
    [DataContract]
    public partial class AccountDetail :  IEquatable<AccountDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetail" /> class.
        /// </summary>
        /// <param name="ipWhitelist">IP whitelist.</param>
        /// <param name="currencyPairs">CurrencyPair whitelisting.</param>
        /// <param name="userId">User ID.</param>
        /// <param name="tier">User VIP level.</param>
        /// <param name="key">key.</param>
        /// <param name="copyTradingRole">User role: 0 - Ordinary user 1 - Order leader 2 - Follower 3 - Order leader and follower.</param>
        public AccountDetail(List<string> ipWhitelist = default(List<string>), List<string> currencyPairs = default(List<string>), long userId = default(long), long tier = default(long), AccountDetailKey key = default(AccountDetailKey), int copyTradingRole = default(int))
        {
            this.IpWhitelist = ipWhitelist;
            this.CurrencyPairs = currencyPairs;
            this.UserId = userId;
            this.Tier = tier;
            this.Key = key;
            this.CopyTradingRole = copyTradingRole;
        }

        /// <summary>
        /// IP whitelist
        /// </summary>
        /// <value>IP whitelist</value>
        [DataMember(Name="ip_whitelist")]
        public List<string> IpWhitelist { get; set; }

        /// <summary>
        /// CurrencyPair whitelisting
        /// </summary>
        /// <value>CurrencyPair whitelisting</value>
        [DataMember(Name="currency_pairs")]
        public List<string> CurrencyPairs { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id")]
        public long UserId { get; set; }

        /// <summary>
        /// User VIP level
        /// </summary>
        /// <value>User VIP level</value>
        [DataMember(Name="tier")]
        public long Tier { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key")]
        public AccountDetailKey Key { get; set; }

        /// <summary>
        /// User role: 0 - Ordinary user 1 - Order leader 2 - Follower 3 - Order leader and follower
        /// </summary>
        /// <value>User role: 0 - Ordinary user 1 - Order leader 2 - Follower 3 - Order leader and follower</value>
        [DataMember(Name="copy_trading_role")]
        public int CopyTradingRole { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetail {\n");
            sb.Append("  IpWhitelist: ").Append(IpWhitelist).Append("\n");
            sb.Append("  CurrencyPairs: ").Append(CurrencyPairs).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  CopyTradingRole: ").Append(CopyTradingRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetail);
        }

        /// <summary>
        /// Returns true if AccountDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IpWhitelist == input.IpWhitelist ||
                    this.IpWhitelist != null &&
                    input.IpWhitelist != null &&
                    this.IpWhitelist.SequenceEqual(input.IpWhitelist)
                ) && 
                (
                    this.CurrencyPairs == input.CurrencyPairs ||
                    this.CurrencyPairs != null &&
                    input.CurrencyPairs != null &&
                    this.CurrencyPairs.SequenceEqual(input.CurrencyPairs)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.Tier == input.Tier ||
                    this.Tier.Equals(input.Tier)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.CopyTradingRole == input.CopyTradingRole ||
                    this.CopyTradingRole.Equals(input.CopyTradingRole)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IpWhitelist != null)
                    hashCode = hashCode * 59 + this.IpWhitelist.GetHashCode();
                if (this.CurrencyPairs != null)
                    hashCode = hashCode * 59 + this.CurrencyPairs.GetHashCode();
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                hashCode = hashCode * 59 + this.CopyTradingRole.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
