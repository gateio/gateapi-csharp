/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Collateral record
    /// </summary>
    [DataContract]
    public partial class CollateralRecord :  IEquatable<CollateralRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralRecord" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="recordId">Collateral record ID.</param>
        /// <param name="borrowCurrency">Borrowed currency.</param>
        /// <param name="borrowAmount">Borrowing amount.</param>
        /// <param name="collateralCurrency">Collateral.</param>
        /// <param name="beforeCollateral">The collateral amount before adjustment.</param>
        /// <param name="afterCollateral">The collateral amount after adjustment.</param>
        /// <param name="beforeLtv">The collateral ratio before adjustment.</param>
        /// <param name="afterLtv">The collateral ratio after adjustment.</param>
        /// <param name="operateTime">Timestamp of the operation, in seconds.</param>
        public CollateralRecord(long orderId = default(long), long recordId = default(long), string borrowCurrency = default(string), string borrowAmount = default(string), string collateralCurrency = default(string), string beforeCollateral = default(string), string afterCollateral = default(string), string beforeLtv = default(string), string afterLtv = default(string), long operateTime = default(long))
        {
            this.OrderId = orderId;
            this.RecordId = recordId;
            this.BorrowCurrency = borrowCurrency;
            this.BorrowAmount = borrowAmount;
            this.CollateralCurrency = collateralCurrency;
            this.BeforeCollateral = beforeCollateral;
            this.AfterCollateral = afterCollateral;
            this.BeforeLtv = beforeLtv;
            this.AfterLtv = afterLtv;
            this.OperateTime = operateTime;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Collateral record ID
        /// </summary>
        /// <value>Collateral record ID</value>
        [DataMember(Name="record_id")]
        public long RecordId { get; set; }

        /// <summary>
        /// Borrowed currency
        /// </summary>
        /// <value>Borrowed currency</value>
        [DataMember(Name="borrow_currency")]
        public string BorrowCurrency { get; set; }

        /// <summary>
        /// Borrowing amount
        /// </summary>
        /// <value>Borrowing amount</value>
        [DataMember(Name="borrow_amount")]
        public string BorrowAmount { get; set; }

        /// <summary>
        /// Collateral
        /// </summary>
        /// <value>Collateral</value>
        [DataMember(Name="collateral_currency")]
        public string CollateralCurrency { get; set; }

        /// <summary>
        /// The collateral amount before adjustment
        /// </summary>
        /// <value>The collateral amount before adjustment</value>
        [DataMember(Name="before_collateral")]
        public string BeforeCollateral { get; set; }

        /// <summary>
        /// The collateral amount after adjustment
        /// </summary>
        /// <value>The collateral amount after adjustment</value>
        [DataMember(Name="after_collateral")]
        public string AfterCollateral { get; set; }

        /// <summary>
        /// The collateral ratio before adjustment
        /// </summary>
        /// <value>The collateral ratio before adjustment</value>
        [DataMember(Name="before_ltv")]
        public string BeforeLtv { get; set; }

        /// <summary>
        /// The collateral ratio after adjustment
        /// </summary>
        /// <value>The collateral ratio after adjustment</value>
        [DataMember(Name="after_ltv")]
        public string AfterLtv { get; set; }

        /// <summary>
        /// Timestamp of the operation, in seconds
        /// </summary>
        /// <value>Timestamp of the operation, in seconds</value>
        [DataMember(Name="operate_time")]
        public long OperateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollateralRecord {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  BorrowCurrency: ").Append(BorrowCurrency).Append("\n");
            sb.Append("  BorrowAmount: ").Append(BorrowAmount).Append("\n");
            sb.Append("  CollateralCurrency: ").Append(CollateralCurrency).Append("\n");
            sb.Append("  BeforeCollateral: ").Append(BeforeCollateral).Append("\n");
            sb.Append("  AfterCollateral: ").Append(AfterCollateral).Append("\n");
            sb.Append("  BeforeLtv: ").Append(BeforeLtv).Append("\n");
            sb.Append("  AfterLtv: ").Append(AfterLtv).Append("\n");
            sb.Append("  OperateTime: ").Append(OperateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralRecord);
        }

        /// <summary>
        /// Returns true if CollateralRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    this.RecordId.Equals(input.RecordId)
                ) && 
                (
                    this.BorrowCurrency == input.BorrowCurrency ||
                    (this.BorrowCurrency != null &&
                    this.BorrowCurrency.Equals(input.BorrowCurrency))
                ) && 
                (
                    this.BorrowAmount == input.BorrowAmount ||
                    (this.BorrowAmount != null &&
                    this.BorrowAmount.Equals(input.BorrowAmount))
                ) && 
                (
                    this.CollateralCurrency == input.CollateralCurrency ||
                    (this.CollateralCurrency != null &&
                    this.CollateralCurrency.Equals(input.CollateralCurrency))
                ) && 
                (
                    this.BeforeCollateral == input.BeforeCollateral ||
                    (this.BeforeCollateral != null &&
                    this.BeforeCollateral.Equals(input.BeforeCollateral))
                ) && 
                (
                    this.AfterCollateral == input.AfterCollateral ||
                    (this.AfterCollateral != null &&
                    this.AfterCollateral.Equals(input.AfterCollateral))
                ) && 
                (
                    this.BeforeLtv == input.BeforeLtv ||
                    (this.BeforeLtv != null &&
                    this.BeforeLtv.Equals(input.BeforeLtv))
                ) && 
                (
                    this.AfterLtv == input.AfterLtv ||
                    (this.AfterLtv != null &&
                    this.AfterLtv.Equals(input.AfterLtv))
                ) && 
                (
                    this.OperateTime == input.OperateTime ||
                    this.OperateTime.Equals(input.OperateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.BorrowCurrency != null)
                    hashCode = hashCode * 59 + this.BorrowCurrency.GetHashCode();
                if (this.BorrowAmount != null)
                    hashCode = hashCode * 59 + this.BorrowAmount.GetHashCode();
                if (this.CollateralCurrency != null)
                    hashCode = hashCode * 59 + this.CollateralCurrency.GetHashCode();
                if (this.BeforeCollateral != null)
                    hashCode = hashCode * 59 + this.BeforeCollateral.GetHashCode();
                if (this.AfterCollateral != null)
                    hashCode = hashCode * 59 + this.AfterCollateral.GetHashCode();
                if (this.BeforeLtv != null)
                    hashCode = hashCode * 59 + this.BeforeLtv.GetHashCode();
                if (this.AfterLtv != null)
                    hashCode = hashCode * 59 + this.AfterLtv.GetHashCode();
                hashCode = hashCode * 59 + this.OperateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
