/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// PartnerSub
    /// </summary>
    [DataContract]
    public partial class PartnerSub :  IEquatable<PartnerSub>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerSub" /> class.
        /// </summary>
        /// <param name="userId">User ID..</param>
        /// <param name="userJoinTime">The time when the user joined the system, in seconds Unix timestamp..</param>
        /// <param name="type">Type (1-Sub-agent 2-Indirect Customer 3-Direct Customer)..</param>
        public PartnerSub(long userId = default(long), long userJoinTime = default(long), long type = default(long))
        {
            this.UserId = userId;
            this.UserJoinTime = userJoinTime;
            this.Type = type;
        }

        /// <summary>
        /// User ID.
        /// </summary>
        /// <value>User ID.</value>
        [DataMember(Name="user_id")]
        public long UserId { get; set; }

        /// <summary>
        /// The time when the user joined the system, in seconds Unix timestamp.
        /// </summary>
        /// <value>The time when the user joined the system, in seconds Unix timestamp.</value>
        [DataMember(Name="user_join_time")]
        public long UserJoinTime { get; set; }

        /// <summary>
        /// Type (1-Sub-agent 2-Indirect Customer 3-Direct Customer).
        /// </summary>
        /// <value>Type (1-Sub-agent 2-Indirect Customer 3-Direct Customer).</value>
        [DataMember(Name="type")]
        public long Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartnerSub {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserJoinTime: ").Append(UserJoinTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartnerSub);
        }

        /// <summary>
        /// Returns true if PartnerSub instances are equal
        /// </summary>
        /// <param name="input">Instance of PartnerSub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartnerSub input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.UserJoinTime == input.UserJoinTime ||
                    this.UserJoinTime.Equals(input.UserJoinTime)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.UserJoinTime.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
