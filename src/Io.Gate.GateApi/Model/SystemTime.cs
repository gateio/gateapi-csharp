/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SystemTime
    /// </summary>
    [DataContract]
    public partial class SystemTime :  IEquatable<SystemTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemTime" /> class.
        /// </summary>
        /// <param name="serverTime">Server current time(ms).</param>
        public SystemTime(long serverTime = default(long))
        {
            this.ServerTime = serverTime;
        }

        /// <summary>
        /// Server current time(ms)
        /// </summary>
        /// <value>Server current time(ms)</value>
        [DataMember(Name="server_time")]
        public long ServerTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemTime {\n");
            sb.Append("  ServerTime: ").Append(ServerTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemTime);
        }

        /// <summary>
        /// Returns true if SystemTime instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemTime input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServerTime == input.ServerTime ||
                    this.ServerTime.Equals(input.ServerTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ServerTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
