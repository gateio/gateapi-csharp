/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SubAccount
    /// </summary>
    [DataContract]
    public partial class SubAccount :  IEquatable<SubAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccount" /> class.
        /// </summary>
        /// <param name="remark">custom text.</param>
        /// <param name="loginName">Sub-account login name: Only letters, numbers and underscores are supported, and cannot contain other illegal characters (required).</param>
        /// <param name="password">The sub-account&#39;s password. (Default: the same as main account&#39;s password).</param>
        /// <param name="email">The sub-account&#39;s email address. (Default: the same as main account&#39;s email address).</param>
        public SubAccount(string remark = default(string), string loginName = default(string), string password = default(string), string email = default(string))
        {
            // to ensure "loginName" is required (not null)
            this.LoginName = loginName ?? throw new ArgumentNullException("loginName", "loginName is a required property for SubAccount and cannot be null");
            this.Remark = remark;
            this.Password = password;
            this.Email = email;
        }

        /// <summary>
        /// custom text
        /// </summary>
        /// <value>custom text</value>
        [DataMember(Name="remark")]
        public string Remark { get; set; }

        /// <summary>
        /// Sub-account login name: Only letters, numbers and underscores are supported, and cannot contain other illegal characters
        /// </summary>
        /// <value>Sub-account login name: Only letters, numbers and underscores are supported, and cannot contain other illegal characters</value>
        [DataMember(Name="login_name")]
        public string LoginName { get; set; }

        /// <summary>
        /// The sub-account&#39;s password. (Default: the same as main account&#39;s password)
        /// </summary>
        /// <value>The sub-account&#39;s password. (Default: the same as main account&#39;s password)</value>
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// The sub-account&#39;s email address. (Default: the same as main account&#39;s email address)
        /// </summary>
        /// <value>The sub-account&#39;s email address. (Default: the same as main account&#39;s email address)</value>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// State: 1-normal, 2-locked\&quot;
        /// </summary>
        /// <value>State: 1-normal, 2-locked\&quot;</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int State { get; private set; }

        /// <summary>
        /// \&quot;Sub-account type: 1 - sub-account, 3 - cross margin account
        /// </summary>
        /// <value>\&quot;Sub-account type: 1 - sub-account, 3 - cross margin account</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int Type { get; private set; }

        /// <summary>
        /// The user id of the sub-account
        /// </summary>
        /// <value>The user id of the sub-account</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long UserId { get; private set; }

        /// <summary>
        /// Created time
        /// </summary>
        /// <value>Created time</value>
        [DataMember(Name="create_time", EmitDefaultValue=false)]
        public long CreateTime { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccount {\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccount);
        }

        /// <summary>
        /// Returns true if SubAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    this.CreateTime.Equals(input.CreateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Remark != null)
                    hashCode = hashCode * 59 + this.Remark.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
