/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// MMP Settings
    /// </summary>
    [DataContract]
    public partial class OptionsMMP :  IEquatable<OptionsMMP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsMMP" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptionsMMP() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsMMP" /> class.
        /// </summary>
        /// <param name="underlying">Underlying (required).</param>
        /// <param name="window">Time window (milliseconds), between 1-5000, 0 means disabling MMP (required).</param>
        /// <param name="frozenPeriod">Freeze duration (milliseconds), 0 means always frozen, need to call reset API to unfreeze (required).</param>
        /// <param name="qtyLimit">Trading volume upper limit (positive number, up to 2 decimal places) (required).</param>
        /// <param name="deltaLimit">Upper limit of net delta value (positive number, up to 2 decimal places) (required).</param>
        public OptionsMMP(string underlying = default(string), int window = default(int), int frozenPeriod = default(int), string qtyLimit = default(string), string deltaLimit = default(string))
        {
            // to ensure "underlying" is required (not null)
            this.Underlying = underlying ?? throw new ArgumentNullException("underlying", "underlying is a required property for OptionsMMP and cannot be null");
            this.Window = window;
            this.FrozenPeriod = frozenPeriod;
            // to ensure "qtyLimit" is required (not null)
            this.QtyLimit = qtyLimit ?? throw new ArgumentNullException("qtyLimit", "qtyLimit is a required property for OptionsMMP and cannot be null");
            // to ensure "deltaLimit" is required (not null)
            this.DeltaLimit = deltaLimit ?? throw new ArgumentNullException("deltaLimit", "deltaLimit is a required property for OptionsMMP and cannot be null");
        }

        /// <summary>
        /// Underlying
        /// </summary>
        /// <value>Underlying</value>
        [DataMember(Name="underlying")]
        public string Underlying { get; set; }

        /// <summary>
        /// Time window (milliseconds), between 1-5000, 0 means disabling MMP
        /// </summary>
        /// <value>Time window (milliseconds), between 1-5000, 0 means disabling MMP</value>
        [DataMember(Name="window")]
        public int Window { get; set; }

        /// <summary>
        /// Freeze duration (milliseconds), 0 means always frozen, need to call reset API to unfreeze
        /// </summary>
        /// <value>Freeze duration (milliseconds), 0 means always frozen, need to call reset API to unfreeze</value>
        [DataMember(Name="frozen_period")]
        public int FrozenPeriod { get; set; }

        /// <summary>
        /// Trading volume upper limit (positive number, up to 2 decimal places)
        /// </summary>
        /// <value>Trading volume upper limit (positive number, up to 2 decimal places)</value>
        [DataMember(Name="qty_limit")]
        public string QtyLimit { get; set; }

        /// <summary>
        /// Upper limit of net delta value (positive number, up to 2 decimal places)
        /// </summary>
        /// <value>Upper limit of net delta value (positive number, up to 2 decimal places)</value>
        [DataMember(Name="delta_limit")]
        public string DeltaLimit { get; set; }

        /// <summary>
        /// Trigger freeze time (milliseconds), 0 means no freeze is triggered
        /// </summary>
        /// <value>Trigger freeze time (milliseconds), 0 means no freeze is triggered</value>
        [DataMember(Name="trigger_time_ms", EmitDefaultValue=false)]
        public long TriggerTimeMs { get; private set; }

        /// <summary>
        /// Unfreeze time (milliseconds). If the freeze duration is not configured, there will be no unfreeze time after the freeze is triggered.
        /// </summary>
        /// <value>Unfreeze time (milliseconds). If the freeze duration is not configured, there will be no unfreeze time after the freeze is triggered.</value>
        [DataMember(Name="frozen_until_ms", EmitDefaultValue=false)]
        public long FrozenUntilMs { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionsMMP {\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  Window: ").Append(Window).Append("\n");
            sb.Append("  FrozenPeriod: ").Append(FrozenPeriod).Append("\n");
            sb.Append("  QtyLimit: ").Append(QtyLimit).Append("\n");
            sb.Append("  DeltaLimit: ").Append(DeltaLimit).Append("\n");
            sb.Append("  TriggerTimeMs: ").Append(TriggerTimeMs).Append("\n");
            sb.Append("  FrozenUntilMs: ").Append(FrozenUntilMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionsMMP);
        }

        /// <summary>
        /// Returns true if OptionsMMP instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionsMMP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsMMP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.Window == input.Window ||
                    this.Window.Equals(input.Window)
                ) && 
                (
                    this.FrozenPeriod == input.FrozenPeriod ||
                    this.FrozenPeriod.Equals(input.FrozenPeriod)
                ) && 
                (
                    this.QtyLimit == input.QtyLimit ||
                    (this.QtyLimit != null &&
                    this.QtyLimit.Equals(input.QtyLimit))
                ) && 
                (
                    this.DeltaLimit == input.DeltaLimit ||
                    (this.DeltaLimit != null &&
                    this.DeltaLimit.Equals(input.DeltaLimit))
                ) && 
                (
                    this.TriggerTimeMs == input.TriggerTimeMs ||
                    this.TriggerTimeMs.Equals(input.TriggerTimeMs)
                ) && 
                (
                    this.FrozenUntilMs == input.FrozenUntilMs ||
                    this.FrozenUntilMs.Equals(input.FrozenUntilMs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Underlying != null)
                    hashCode = hashCode * 59 + this.Underlying.GetHashCode();
                hashCode = hashCode * 59 + this.Window.GetHashCode();
                hashCode = hashCode * 59 + this.FrozenPeriod.GetHashCode();
                if (this.QtyLimit != null)
                    hashCode = hashCode * 59 + this.QtyLimit.GetHashCode();
                if (this.DeltaLimit != null)
                    hashCode = hashCode * 59 + this.DeltaLimit.GetHashCode();
                hashCode = hashCode * 59 + this.TriggerTimeMs.GetHashCode();
                hashCode = hashCode * 59 + this.FrozenUntilMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
