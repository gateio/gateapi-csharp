/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// MMP Settings
    /// </summary>
    [DataContract]
    public partial class OptionsMMP :  IEquatable<OptionsMMP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsMMP" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptionsMMP() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsMMP" /> class.
        /// </summary>
        /// <param name="underlying">Underlying (required).</param>
        /// <param name="window">时间窗口（毫秒），1-5000之间，0表示停用MMP (required).</param>
        /// <param name="frozenPeriod">冻结时长（毫秒），0表示一直冻结，需要调用重置API解冻 (required).</param>
        /// <param name="qtyLimit">成交量上限（正数，至多2位小数） (required).</param>
        /// <param name="deltaLimit">净delta值上限（正数，至多2位小数） (required).</param>
        public OptionsMMP(string underlying = default(string), int window = default(int), int frozenPeriod = default(int), string qtyLimit = default(string), string deltaLimit = default(string))
        {
            // to ensure "underlying" is required (not null)
            this.Underlying = underlying ?? throw new ArgumentNullException("underlying", "underlying is a required property for OptionsMMP and cannot be null");
            this.Window = window;
            this.FrozenPeriod = frozenPeriod;
            // to ensure "qtyLimit" is required (not null)
            this.QtyLimit = qtyLimit ?? throw new ArgumentNullException("qtyLimit", "qtyLimit is a required property for OptionsMMP and cannot be null");
            // to ensure "deltaLimit" is required (not null)
            this.DeltaLimit = deltaLimit ?? throw new ArgumentNullException("deltaLimit", "deltaLimit is a required property for OptionsMMP and cannot be null");
        }

        /// <summary>
        /// Underlying
        /// </summary>
        /// <value>Underlying</value>
        [DataMember(Name="underlying")]
        public string Underlying { get; set; }

        /// <summary>
        /// 时间窗口（毫秒），1-5000之间，0表示停用MMP
        /// </summary>
        /// <value>时间窗口（毫秒），1-5000之间，0表示停用MMP</value>
        [DataMember(Name="window")]
        public int Window { get; set; }

        /// <summary>
        /// 冻结时长（毫秒），0表示一直冻结，需要调用重置API解冻
        /// </summary>
        /// <value>冻结时长（毫秒），0表示一直冻结，需要调用重置API解冻</value>
        [DataMember(Name="frozen_period")]
        public int FrozenPeriod { get; set; }

        /// <summary>
        /// 成交量上限（正数，至多2位小数）
        /// </summary>
        /// <value>成交量上限（正数，至多2位小数）</value>
        [DataMember(Name="qty_limit")]
        public string QtyLimit { get; set; }

        /// <summary>
        /// 净delta值上限（正数，至多2位小数）
        /// </summary>
        /// <value>净delta值上限（正数，至多2位小数）</value>
        [DataMember(Name="delta_limit")]
        public string DeltaLimit { get; set; }

        /// <summary>
        /// 触发冻结时间（毫秒），0表示没有触发冻结
        /// </summary>
        /// <value>触发冻结时间（毫秒），0表示没有触发冻结</value>
        [DataMember(Name="trigger_time_ms", EmitDefaultValue=false)]
        public long TriggerTimeMs { get; private set; }

        /// <summary>
        /// 解冻时间（毫秒），如果未配置冻结时长，触发冻结后无解冻时间
        /// </summary>
        /// <value>解冻时间（毫秒），如果未配置冻结时长，触发冻结后无解冻时间</value>
        [DataMember(Name="frozen_until_ms", EmitDefaultValue=false)]
        public long FrozenUntilMs { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionsMMP {\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  Window: ").Append(Window).Append("\n");
            sb.Append("  FrozenPeriod: ").Append(FrozenPeriod).Append("\n");
            sb.Append("  QtyLimit: ").Append(QtyLimit).Append("\n");
            sb.Append("  DeltaLimit: ").Append(DeltaLimit).Append("\n");
            sb.Append("  TriggerTimeMs: ").Append(TriggerTimeMs).Append("\n");
            sb.Append("  FrozenUntilMs: ").Append(FrozenUntilMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionsMMP);
        }

        /// <summary>
        /// Returns true if OptionsMMP instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionsMMP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsMMP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.Window == input.Window ||
                    this.Window.Equals(input.Window)
                ) && 
                (
                    this.FrozenPeriod == input.FrozenPeriod ||
                    this.FrozenPeriod.Equals(input.FrozenPeriod)
                ) && 
                (
                    this.QtyLimit == input.QtyLimit ||
                    (this.QtyLimit != null &&
                    this.QtyLimit.Equals(input.QtyLimit))
                ) && 
                (
                    this.DeltaLimit == input.DeltaLimit ||
                    (this.DeltaLimit != null &&
                    this.DeltaLimit.Equals(input.DeltaLimit))
                ) && 
                (
                    this.TriggerTimeMs == input.TriggerTimeMs ||
                    this.TriggerTimeMs.Equals(input.TriggerTimeMs)
                ) && 
                (
                    this.FrozenUntilMs == input.FrozenUntilMs ||
                    this.FrozenUntilMs.Equals(input.FrozenUntilMs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Underlying != null)
                    hashCode = hashCode * 59 + this.Underlying.GetHashCode();
                hashCode = hashCode * 59 + this.Window.GetHashCode();
                hashCode = hashCode * 59 + this.FrozenPeriod.GetHashCode();
                if (this.QtyLimit != null)
                    hashCode = hashCode * 59 + this.QtyLimit.GetHashCode();
                if (this.DeltaLimit != null)
                    hashCode = hashCode * 59 + this.DeltaLimit.GetHashCode();
                hashCode = hashCode * 59 + this.TriggerTimeMs.GetHashCode();
                hashCode = hashCode * 59 + this.FrozenUntilMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
