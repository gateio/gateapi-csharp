/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Multi-Collateral Order
    /// </summary>
    [DataContract]
    public partial class MultiCollateralOrder :  IEquatable<MultiCollateralOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCollateralOrder" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="orderType">current - current, fixed - fixed.</param>
        /// <param name="fixedType">Fixed interest rate loan periods: 7d - 7 days, 30d - 30 days..</param>
        /// <param name="fixedRate">Fixed interest rate.</param>
        /// <param name="expireTime">Expiration time, timestamp, unit in seconds..</param>
        /// <param name="autoRenew">Fixed interest rate, automatic renewal.</param>
        /// <param name="autoRepay">Fixed interest rate, automatic repayment.</param>
        /// <param name="currentLtv">The current collateralization rate.</param>
        /// <param name="status">Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed.</param>
        /// <param name="borrowTime">Borrowing time, timestamp in seconds.</param>
        /// <param name="totalLeftRepayUsdt">Value of Left repay amount converted in USDT.</param>
        /// <param name="totalLeftCollateralUsdt">Value of Collateral amount in USDT.</param>
        /// <param name="borrowCurrencies">Borrowing Currency List.</param>
        /// <param name="collateralCurrencies">Collateral Currency List.</param>
        public MultiCollateralOrder(string orderId = default(string), string orderType = default(string), string fixedType = default(string), string fixedRate = default(string), long expireTime = default(long), bool autoRenew = default(bool), bool autoRepay = default(bool), string currentLtv = default(string), string status = default(string), long borrowTime = default(long), string totalLeftRepayUsdt = default(string), string totalLeftCollateralUsdt = default(string), List<BorrowCurrencyInfo> borrowCurrencies = default(List<BorrowCurrencyInfo>), List<CollateralCurrencyInfo> collateralCurrencies = default(List<CollateralCurrencyInfo>))
        {
            this.OrderId = orderId;
            this.OrderType = orderType;
            this.FixedType = fixedType;
            this.FixedRate = fixedRate;
            this.ExpireTime = expireTime;
            this.AutoRenew = autoRenew;
            this.AutoRepay = autoRepay;
            this.CurrentLtv = currentLtv;
            this.Status = status;
            this.BorrowTime = borrowTime;
            this.TotalLeftRepayUsdt = totalLeftRepayUsdt;
            this.TotalLeftCollateralUsdt = totalLeftCollateralUsdt;
            this.BorrowCurrencies = borrowCurrencies;
            this.CollateralCurrencies = collateralCurrencies;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public string OrderId { get; set; }

        /// <summary>
        /// current - current, fixed - fixed
        /// </summary>
        /// <value>current - current, fixed - fixed</value>
        [DataMember(Name="order_type")]
        public string OrderType { get; set; }

        /// <summary>
        /// Fixed interest rate loan periods: 7d - 7 days, 30d - 30 days.
        /// </summary>
        /// <value>Fixed interest rate loan periods: 7d - 7 days, 30d - 30 days.</value>
        [DataMember(Name="fixed_type")]
        public string FixedType { get; set; }

        /// <summary>
        /// Fixed interest rate
        /// </summary>
        /// <value>Fixed interest rate</value>
        [DataMember(Name="fixed_rate")]
        public string FixedRate { get; set; }

        /// <summary>
        /// Expiration time, timestamp, unit in seconds.
        /// </summary>
        /// <value>Expiration time, timestamp, unit in seconds.</value>
        [DataMember(Name="expire_time")]
        public long ExpireTime { get; set; }

        /// <summary>
        /// Fixed interest rate, automatic renewal
        /// </summary>
        /// <value>Fixed interest rate, automatic renewal</value>
        [DataMember(Name="auto_renew")]
        public bool AutoRenew { get; set; }

        /// <summary>
        /// Fixed interest rate, automatic repayment
        /// </summary>
        /// <value>Fixed interest rate, automatic repayment</value>
        [DataMember(Name="auto_repay")]
        public bool AutoRepay { get; set; }

        /// <summary>
        /// The current collateralization rate
        /// </summary>
        /// <value>The current collateralization rate</value>
        [DataMember(Name="current_ltv")]
        public string CurrentLtv { get; set; }

        /// <summary>
        /// Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed
        /// </summary>
        /// <value>Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Borrowing time, timestamp in seconds
        /// </summary>
        /// <value>Borrowing time, timestamp in seconds</value>
        [DataMember(Name="borrow_time")]
        public long BorrowTime { get; set; }

        /// <summary>
        /// Value of Left repay amount converted in USDT
        /// </summary>
        /// <value>Value of Left repay amount converted in USDT</value>
        [DataMember(Name="total_left_repay_usdt")]
        public string TotalLeftRepayUsdt { get; set; }

        /// <summary>
        /// Value of Collateral amount in USDT
        /// </summary>
        /// <value>Value of Collateral amount in USDT</value>
        [DataMember(Name="total_left_collateral_usdt")]
        public string TotalLeftCollateralUsdt { get; set; }

        /// <summary>
        /// Borrowing Currency List
        /// </summary>
        /// <value>Borrowing Currency List</value>
        [DataMember(Name="borrow_currencies")]
        public List<BorrowCurrencyInfo> BorrowCurrencies { get; set; }

        /// <summary>
        /// Collateral Currency List
        /// </summary>
        /// <value>Collateral Currency List</value>
        [DataMember(Name="collateral_currencies")]
        public List<CollateralCurrencyInfo> CollateralCurrencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultiCollateralOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  FixedType: ").Append(FixedType).Append("\n");
            sb.Append("  FixedRate: ").Append(FixedRate).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  AutoRepay: ").Append(AutoRepay).Append("\n");
            sb.Append("  CurrentLtv: ").Append(CurrentLtv).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BorrowTime: ").Append(BorrowTime).Append("\n");
            sb.Append("  TotalLeftRepayUsdt: ").Append(TotalLeftRepayUsdt).Append("\n");
            sb.Append("  TotalLeftCollateralUsdt: ").Append(TotalLeftCollateralUsdt).Append("\n");
            sb.Append("  BorrowCurrencies: ").Append(BorrowCurrencies).Append("\n");
            sb.Append("  CollateralCurrencies: ").Append(CollateralCurrencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultiCollateralOrder);
        }

        /// <summary>
        /// Returns true if MultiCollateralOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of MultiCollateralOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultiCollateralOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.FixedType == input.FixedType ||
                    (this.FixedType != null &&
                    this.FixedType.Equals(input.FixedType))
                ) && 
                (
                    this.FixedRate == input.FixedRate ||
                    (this.FixedRate != null &&
                    this.FixedRate.Equals(input.FixedRate))
                ) && 
                (
                    this.ExpireTime == input.ExpireTime ||
                    this.ExpireTime.Equals(input.ExpireTime)
                ) && 
                (
                    this.AutoRenew == input.AutoRenew ||
                    this.AutoRenew.Equals(input.AutoRenew)
                ) && 
                (
                    this.AutoRepay == input.AutoRepay ||
                    this.AutoRepay.Equals(input.AutoRepay)
                ) && 
                (
                    this.CurrentLtv == input.CurrentLtv ||
                    (this.CurrentLtv != null &&
                    this.CurrentLtv.Equals(input.CurrentLtv))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.BorrowTime == input.BorrowTime ||
                    this.BorrowTime.Equals(input.BorrowTime)
                ) && 
                (
                    this.TotalLeftRepayUsdt == input.TotalLeftRepayUsdt ||
                    (this.TotalLeftRepayUsdt != null &&
                    this.TotalLeftRepayUsdt.Equals(input.TotalLeftRepayUsdt))
                ) && 
                (
                    this.TotalLeftCollateralUsdt == input.TotalLeftCollateralUsdt ||
                    (this.TotalLeftCollateralUsdt != null &&
                    this.TotalLeftCollateralUsdt.Equals(input.TotalLeftCollateralUsdt))
                ) && 
                (
                    this.BorrowCurrencies == input.BorrowCurrencies ||
                    this.BorrowCurrencies != null &&
                    input.BorrowCurrencies != null &&
                    this.BorrowCurrencies.SequenceEqual(input.BorrowCurrencies)
                ) && 
                (
                    this.CollateralCurrencies == input.CollateralCurrencies ||
                    this.CollateralCurrencies != null &&
                    input.CollateralCurrencies != null &&
                    this.CollateralCurrencies.SequenceEqual(input.CollateralCurrencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.FixedType != null)
                    hashCode = hashCode * 59 + this.FixedType.GetHashCode();
                if (this.FixedRate != null)
                    hashCode = hashCode * 59 + this.FixedRate.GetHashCode();
                hashCode = hashCode * 59 + this.ExpireTime.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRenew.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRepay.GetHashCode();
                if (this.CurrentLtv != null)
                    hashCode = hashCode * 59 + this.CurrentLtv.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.BorrowTime.GetHashCode();
                if (this.TotalLeftRepayUsdt != null)
                    hashCode = hashCode * 59 + this.TotalLeftRepayUsdt.GetHashCode();
                if (this.TotalLeftCollateralUsdt != null)
                    hashCode = hashCode * 59 + this.TotalLeftCollateralUsdt.GetHashCode();
                if (this.BorrowCurrencies != null)
                    hashCode = hashCode * 59 + this.BorrowCurrencies.GetHashCode();
                if (this.CollateralCurrencies != null)
                    hashCode = hashCode * 59 + this.CollateralCurrencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
