/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// The output of the portfolio margin calculator.
    /// </summary>
    [DataContract]
    public partial class UnifiedPortfolioOutput :  IEquatable<UnifiedPortfolioOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedPortfolioOutput" /> class.
        /// </summary>
        /// <param name="maintainMarginTotal">Total maintenance margin, including only the portfolio margin calculation results for positions in the risk unit,  excluding borrowed margin. If borrowing exists, conventional borrowing margin requirements will still apply..</param>
        /// <param name="initialMarginTotal">Total initial margin, calculated as the maximum of the following three combinations: position,  position + positive delta orders, position + negative delta orders..</param>
        /// <param name="calculateTime">Calculate time.</param>
        /// <param name="riskUnit">Risk unit.</param>
        public UnifiedPortfolioOutput(string maintainMarginTotal = default(string), string initialMarginTotal = default(string), long calculateTime = default(long), List<MockRiskUnit> riskUnit = default(List<MockRiskUnit>))
        {
            this.MaintainMarginTotal = maintainMarginTotal;
            this.InitialMarginTotal = initialMarginTotal;
            this.CalculateTime = calculateTime;
            this.RiskUnit = riskUnit;
        }

        /// <summary>
        /// Total maintenance margin, including only the portfolio margin calculation results for positions in the risk unit,  excluding borrowed margin. If borrowing exists, conventional borrowing margin requirements will still apply.
        /// </summary>
        /// <value>Total maintenance margin, including only the portfolio margin calculation results for positions in the risk unit,  excluding borrowed margin. If borrowing exists, conventional borrowing margin requirements will still apply.</value>
        [DataMember(Name="maintain_margin_total")]
        public string MaintainMarginTotal { get; set; }

        /// <summary>
        /// Total initial margin, calculated as the maximum of the following three combinations: position,  position + positive delta orders, position + negative delta orders.
        /// </summary>
        /// <value>Total initial margin, calculated as the maximum of the following three combinations: position,  position + positive delta orders, position + negative delta orders.</value>
        [DataMember(Name="initial_margin_total")]
        public string InitialMarginTotal { get; set; }

        /// <summary>
        /// Calculate time
        /// </summary>
        /// <value>Calculate time</value>
        [DataMember(Name="calculate_time")]
        public long CalculateTime { get; set; }

        /// <summary>
        /// Risk unit
        /// </summary>
        /// <value>Risk unit</value>
        [DataMember(Name="risk_unit")]
        public List<MockRiskUnit> RiskUnit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedPortfolioOutput {\n");
            sb.Append("  MaintainMarginTotal: ").Append(MaintainMarginTotal).Append("\n");
            sb.Append("  InitialMarginTotal: ").Append(InitialMarginTotal).Append("\n");
            sb.Append("  CalculateTime: ").Append(CalculateTime).Append("\n");
            sb.Append("  RiskUnit: ").Append(RiskUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedPortfolioOutput);
        }

        /// <summary>
        /// Returns true if UnifiedPortfolioOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedPortfolioOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedPortfolioOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaintainMarginTotal == input.MaintainMarginTotal ||
                    (this.MaintainMarginTotal != null &&
                    this.MaintainMarginTotal.Equals(input.MaintainMarginTotal))
                ) && 
                (
                    this.InitialMarginTotal == input.InitialMarginTotal ||
                    (this.InitialMarginTotal != null &&
                    this.InitialMarginTotal.Equals(input.InitialMarginTotal))
                ) && 
                (
                    this.CalculateTime == input.CalculateTime ||
                    this.CalculateTime.Equals(input.CalculateTime)
                ) && 
                (
                    this.RiskUnit == input.RiskUnit ||
                    this.RiskUnit != null &&
                    input.RiskUnit != null &&
                    this.RiskUnit.SequenceEqual(input.RiskUnit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaintainMarginTotal != null)
                    hashCode = hashCode * 59 + this.MaintainMarginTotal.GetHashCode();
                if (this.InitialMarginTotal != null)
                    hashCode = hashCode * 59 + this.InitialMarginTotal.GetHashCode();
                hashCode = hashCode * 59 + this.CalculateTime.GetHashCode();
                if (this.RiskUnit != null)
                    hashCode = hashCode * 59 + this.RiskUnit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
