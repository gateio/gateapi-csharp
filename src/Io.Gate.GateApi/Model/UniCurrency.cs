/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Currency detail
    /// </summary>
    [DataContract]
    public partial class UniCurrency :  IEquatable<UniCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniCurrency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public UniCurrency()
        {
        }

        /// <summary>
        /// Currency name
        /// </summary>
        /// <value>Currency name</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; private set; }

        /// <summary>
        /// The minimum lending amount, in the unit of the currency.
        /// </summary>
        /// <value>The minimum lending amount, in the unit of the currency.</value>
        [DataMember(Name="min_lend_amount", EmitDefaultValue=false)]
        public string MinLendAmount { get; private set; }

        /// <summary>
        /// The total maximum lending amount, in USDT
        /// </summary>
        /// <value>The total maximum lending amount, in USDT</value>
        [DataMember(Name="max_lend_amount", EmitDefaultValue=false)]
        public string MaxLendAmount { get; private set; }

        /// <summary>
        /// Maximum rate (Hourly)
        /// </summary>
        /// <value>Maximum rate (Hourly)</value>
        [DataMember(Name="max_rate", EmitDefaultValue=false)]
        public string MaxRate { get; private set; }

        /// <summary>
        /// Minimum rate (Hourly)
        /// </summary>
        /// <value>Minimum rate (Hourly)</value>
        [DataMember(Name="min_rate", EmitDefaultValue=false)]
        public string MinRate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UniCurrency {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  MinLendAmount: ").Append(MinLendAmount).Append("\n");
            sb.Append("  MaxLendAmount: ").Append(MaxLendAmount).Append("\n");
            sb.Append("  MaxRate: ").Append(MaxRate).Append("\n");
            sb.Append("  MinRate: ").Append(MinRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniCurrency);
        }

        /// <summary>
        /// Returns true if UniCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of UniCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.MinLendAmount == input.MinLendAmount ||
                    (this.MinLendAmount != null &&
                    this.MinLendAmount.Equals(input.MinLendAmount))
                ) && 
                (
                    this.MaxLendAmount == input.MaxLendAmount ||
                    (this.MaxLendAmount != null &&
                    this.MaxLendAmount.Equals(input.MaxLendAmount))
                ) && 
                (
                    this.MaxRate == input.MaxRate ||
                    (this.MaxRate != null &&
                    this.MaxRate.Equals(input.MaxRate))
                ) && 
                (
                    this.MinRate == input.MinRate ||
                    (this.MinRate != null &&
                    this.MinRate.Equals(input.MinRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.MinLendAmount != null)
                    hashCode = hashCode * 59 + this.MinLendAmount.GetHashCode();
                if (this.MaxLendAmount != null)
                    hashCode = hashCode * 59 + this.MaxLendAmount.GetHashCode();
                if (this.MaxRate != null)
                    hashCode = hashCode * 59 + this.MaxRate.GetHashCode();
                if (this.MinRate != null)
                    hashCode = hashCode * 59 + this.MinRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
