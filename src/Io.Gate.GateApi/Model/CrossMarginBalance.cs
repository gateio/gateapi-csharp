/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// CrossMarginBalance
    /// </summary>
    [DataContract]
    public partial class CrossMarginBalance :  IEquatable<CrossMarginBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossMarginBalance" /> class.
        /// </summary>
        /// <param name="available">Available amount..</param>
        /// <param name="freeze">Locked amount..</param>
        /// <param name="borrowed">Borrowed amount..</param>
        /// <param name="interest">Unpaid interests..</param>
        public CrossMarginBalance(string available = default(string), string freeze = default(string), string borrowed = default(string), string interest = default(string))
        {
            this.Available = available;
            this.Freeze = freeze;
            this.Borrowed = borrowed;
            this.Interest = interest;
        }

        /// <summary>
        /// Available amount.
        /// </summary>
        /// <value>Available amount.</value>
        [DataMember(Name="available")]
        public string Available { get; set; }

        /// <summary>
        /// Locked amount.
        /// </summary>
        /// <value>Locked amount.</value>
        [DataMember(Name="freeze")]
        public string Freeze { get; set; }

        /// <summary>
        /// Borrowed amount.
        /// </summary>
        /// <value>Borrowed amount.</value>
        [DataMember(Name="borrowed")]
        public string Borrowed { get; set; }

        /// <summary>
        /// Unpaid interests.
        /// </summary>
        /// <value>Unpaid interests.</value>
        [DataMember(Name="interest")]
        public string Interest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossMarginBalance {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Borrowed: ").Append(Borrowed).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossMarginBalance);
        }

        /// <summary>
        /// Returns true if CrossMarginBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossMarginBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossMarginBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.Freeze == input.Freeze ||
                    (this.Freeze != null &&
                    this.Freeze.Equals(input.Freeze))
                ) && 
                (
                    this.Borrowed == input.Borrowed ||
                    (this.Borrowed != null &&
                    this.Borrowed.Equals(input.Borrowed))
                ) && 
                (
                    this.Interest == input.Interest ||
                    (this.Interest != null &&
                    this.Interest.Equals(input.Interest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.Freeze != null)
                    hashCode = hashCode * 59 + this.Freeze.GetHashCode();
                if (this.Borrowed != null)
                    hashCode = hashCode * 59 + this.Borrowed.GetHashCode();
                if (this.Interest != null)
                    hashCode = hashCode * 59 + this.Interest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
