/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UnifiedHistoryLoanRateRates
    /// </summary>
    [DataContract]
    public partial class UnifiedHistoryLoanRateRates :  IEquatable<UnifiedHistoryLoanRateRates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedHistoryLoanRateRates" /> class.
        /// </summary>
        /// <param name="time">The hourly timestamp corresponding to the interest rate, in milliseconds.</param>
        /// <param name="rate">Historical interest rates for this hour.</param>
        public UnifiedHistoryLoanRateRates(long time = default(long), string rate = default(string))
        {
            this.Time = time;
            this.Rate = rate;
        }

        /// <summary>
        /// The hourly timestamp corresponding to the interest rate, in milliseconds
        /// </summary>
        /// <value>The hourly timestamp corresponding to the interest rate, in milliseconds</value>
        [DataMember(Name="time")]
        public long Time { get; set; }

        /// <summary>
        /// Historical interest rates for this hour
        /// </summary>
        /// <value>Historical interest rates for this hour</value>
        [DataMember(Name="rate")]
        public string Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedHistoryLoanRateRates {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedHistoryLoanRateRates);
        }

        /// <summary>
        /// Returns true if UnifiedHistoryLoanRateRates instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedHistoryLoanRateRates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedHistoryLoanRateRates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
