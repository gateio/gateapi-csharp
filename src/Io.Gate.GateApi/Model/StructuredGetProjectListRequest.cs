/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Dual Investment order
    /// </summary>
    [DataContract]
    public partial class StructuredGetProjectListRequest :  IEquatable<StructuredGetProjectListRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredGetProjectListRequest" /> class.
        /// </summary>
        /// <param name="type"> Product Type, default to empty for querying all.  &#x60;SharkFin2.0&#x60;-Shark Fin 2.0  &#x60;BullishSharkFin&#x60;-Bullish Shark Fin  &#x60;BearishSharkFin&#x60;-Bearish Shark Fin  &#x60;DoubleNoTouch&#x60;-Double No-Touch  &#x60;RangeAccrual&#x60;-RangeAccrual  &#x60;SnowBall&#x60;-Snow Ball .</param>
        /// <param name="status"> Status: default to empty for querying all.   &#x60;in_process&#x60;-in progress  &#x60;will_begin&#x60;-will begin  &#x60;wait_settlement&#x60;-waiting for settlement  &#x60;done&#x60;-done.</param>
        /// <param name="page">Page number.</param>
        /// <param name="limit">Number of items returned in the list. Default is 100..</param>
        public StructuredGetProjectListRequest(string type = default(string), string status = default(string), int page = default(int), int limit = default(int))
        {
            this.Type = type;
            this.Status = status;
            this.Page = page;
            this.Limit = limit;
        }

        /// <summary>
        ///  Product Type, default to empty for querying all.  &#x60;SharkFin2.0&#x60;-Shark Fin 2.0  &#x60;BullishSharkFin&#x60;-Bullish Shark Fin  &#x60;BearishSharkFin&#x60;-Bearish Shark Fin  &#x60;DoubleNoTouch&#x60;-Double No-Touch  &#x60;RangeAccrual&#x60;-RangeAccrual  &#x60;SnowBall&#x60;-Snow Ball 
        /// </summary>
        /// <value> Product Type, default to empty for querying all.  &#x60;SharkFin2.0&#x60;-Shark Fin 2.0  &#x60;BullishSharkFin&#x60;-Bullish Shark Fin  &#x60;BearishSharkFin&#x60;-Bearish Shark Fin  &#x60;DoubleNoTouch&#x60;-Double No-Touch  &#x60;RangeAccrual&#x60;-RangeAccrual  &#x60;SnowBall&#x60;-Snow Ball </value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        ///  Status: default to empty for querying all.   &#x60;in_process&#x60;-in progress  &#x60;will_begin&#x60;-will begin  &#x60;wait_settlement&#x60;-waiting for settlement  &#x60;done&#x60;-done
        /// </summary>
        /// <value> Status: default to empty for querying all.   &#x60;in_process&#x60;-in progress  &#x60;will_begin&#x60;-will begin  &#x60;wait_settlement&#x60;-waiting for settlement  &#x60;done&#x60;-done</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Page number
        /// </summary>
        /// <value>Page number</value>
        [DataMember(Name="page")]
        public int Page { get; set; }

        /// <summary>
        /// Number of items returned in the list. Default is 100.
        /// </summary>
        /// <value>Number of items returned in the list. Default is 100.</value>
        [DataMember(Name="limit")]
        public int Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructuredGetProjectListRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredGetProjectListRequest);
        }

        /// <summary>
        /// Returns true if StructuredGetProjectListRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredGetProjectListRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredGetProjectListRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Page.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
