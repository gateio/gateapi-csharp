/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Collateral Order
    /// </summary>
    [DataContract]
    public partial class CollateralOrder :  IEquatable<CollateralOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralOrder" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="collateralCurrency">Collateral.</param>
        /// <param name="collateralAmount">Collateral amount.</param>
        /// <param name="borrowCurrency">Borrowed currency.</param>
        /// <param name="borrowAmount">Borrowing amount.</param>
        /// <param name="repaidAmount">Repaid amount.</param>
        /// <param name="repaidPrincipal">Repaid principal.</param>
        /// <param name="repaidInterest">Repaid interest.</param>
        /// <param name="initLtv">The initial collateralization rate.</param>
        /// <param name="currentLtv">The current collateralization rate.</param>
        /// <param name="liquidateLtv">The liquidation collateralization rate.</param>
        /// <param name="status">Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed.</param>
        /// <param name="borrowTime">Borrowing time, timestamp in seconds.</param>
        /// <param name="leftRepayTotal">Outstanding principal and interest (outstanding principal + outstanding interest).</param>
        /// <param name="leftRepayPrincipal">outstanding principal.</param>
        /// <param name="leftRepayInterest">outstanding interest.</param>
        public CollateralOrder(long orderId = default(long), string collateralCurrency = default(string), string collateralAmount = default(string), string borrowCurrency = default(string), string borrowAmount = default(string), string repaidAmount = default(string), string repaidPrincipal = default(string), string repaidInterest = default(string), string initLtv = default(string), string currentLtv = default(string), string liquidateLtv = default(string), string status = default(string), long borrowTime = default(long), string leftRepayTotal = default(string), string leftRepayPrincipal = default(string), string leftRepayInterest = default(string))
        {
            this.OrderId = orderId;
            this.CollateralCurrency = collateralCurrency;
            this.CollateralAmount = collateralAmount;
            this.BorrowCurrency = borrowCurrency;
            this.BorrowAmount = borrowAmount;
            this.RepaidAmount = repaidAmount;
            this.RepaidPrincipal = repaidPrincipal;
            this.RepaidInterest = repaidInterest;
            this.InitLtv = initLtv;
            this.CurrentLtv = currentLtv;
            this.LiquidateLtv = liquidateLtv;
            this.Status = status;
            this.BorrowTime = borrowTime;
            this.LeftRepayTotal = leftRepayTotal;
            this.LeftRepayPrincipal = leftRepayPrincipal;
            this.LeftRepayInterest = leftRepayInterest;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Collateral
        /// </summary>
        /// <value>Collateral</value>
        [DataMember(Name="collateral_currency")]
        public string CollateralCurrency { get; set; }

        /// <summary>
        /// Collateral amount
        /// </summary>
        /// <value>Collateral amount</value>
        [DataMember(Name="collateral_amount")]
        public string CollateralAmount { get; set; }

        /// <summary>
        /// Borrowed currency
        /// </summary>
        /// <value>Borrowed currency</value>
        [DataMember(Name="borrow_currency")]
        public string BorrowCurrency { get; set; }

        /// <summary>
        /// Borrowing amount
        /// </summary>
        /// <value>Borrowing amount</value>
        [DataMember(Name="borrow_amount")]
        public string BorrowAmount { get; set; }

        /// <summary>
        /// Repaid amount
        /// </summary>
        /// <value>Repaid amount</value>
        [DataMember(Name="repaid_amount")]
        public string RepaidAmount { get; set; }

        /// <summary>
        /// Repaid principal
        /// </summary>
        /// <value>Repaid principal</value>
        [DataMember(Name="repaid_principal")]
        public string RepaidPrincipal { get; set; }

        /// <summary>
        /// Repaid interest
        /// </summary>
        /// <value>Repaid interest</value>
        [DataMember(Name="repaid_interest")]
        public string RepaidInterest { get; set; }

        /// <summary>
        /// The initial collateralization rate
        /// </summary>
        /// <value>The initial collateralization rate</value>
        [DataMember(Name="init_ltv")]
        public string InitLtv { get; set; }

        /// <summary>
        /// The current collateralization rate
        /// </summary>
        /// <value>The current collateralization rate</value>
        [DataMember(Name="current_ltv")]
        public string CurrentLtv { get; set; }

        /// <summary>
        /// The liquidation collateralization rate
        /// </summary>
        /// <value>The liquidation collateralization rate</value>
        [DataMember(Name="liquidate_ltv")]
        public string LiquidateLtv { get; set; }

        /// <summary>
        /// Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed
        /// </summary>
        /// <value>Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Borrowing time, timestamp in seconds
        /// </summary>
        /// <value>Borrowing time, timestamp in seconds</value>
        [DataMember(Name="borrow_time")]
        public long BorrowTime { get; set; }

        /// <summary>
        /// Outstanding principal and interest (outstanding principal + outstanding interest)
        /// </summary>
        /// <value>Outstanding principal and interest (outstanding principal + outstanding interest)</value>
        [DataMember(Name="left_repay_total")]
        public string LeftRepayTotal { get; set; }

        /// <summary>
        /// outstanding principal
        /// </summary>
        /// <value>outstanding principal</value>
        [DataMember(Name="left_repay_principal")]
        public string LeftRepayPrincipal { get; set; }

        /// <summary>
        /// outstanding interest
        /// </summary>
        /// <value>outstanding interest</value>
        [DataMember(Name="left_repay_interest")]
        public string LeftRepayInterest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollateralOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CollateralCurrency: ").Append(CollateralCurrency).Append("\n");
            sb.Append("  CollateralAmount: ").Append(CollateralAmount).Append("\n");
            sb.Append("  BorrowCurrency: ").Append(BorrowCurrency).Append("\n");
            sb.Append("  BorrowAmount: ").Append(BorrowAmount).Append("\n");
            sb.Append("  RepaidAmount: ").Append(RepaidAmount).Append("\n");
            sb.Append("  RepaidPrincipal: ").Append(RepaidPrincipal).Append("\n");
            sb.Append("  RepaidInterest: ").Append(RepaidInterest).Append("\n");
            sb.Append("  InitLtv: ").Append(InitLtv).Append("\n");
            sb.Append("  CurrentLtv: ").Append(CurrentLtv).Append("\n");
            sb.Append("  LiquidateLtv: ").Append(LiquidateLtv).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BorrowTime: ").Append(BorrowTime).Append("\n");
            sb.Append("  LeftRepayTotal: ").Append(LeftRepayTotal).Append("\n");
            sb.Append("  LeftRepayPrincipal: ").Append(LeftRepayPrincipal).Append("\n");
            sb.Append("  LeftRepayInterest: ").Append(LeftRepayInterest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralOrder);
        }

        /// <summary>
        /// Returns true if CollateralOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.CollateralCurrency == input.CollateralCurrency ||
                    (this.CollateralCurrency != null &&
                    this.CollateralCurrency.Equals(input.CollateralCurrency))
                ) && 
                (
                    this.CollateralAmount == input.CollateralAmount ||
                    (this.CollateralAmount != null &&
                    this.CollateralAmount.Equals(input.CollateralAmount))
                ) && 
                (
                    this.BorrowCurrency == input.BorrowCurrency ||
                    (this.BorrowCurrency != null &&
                    this.BorrowCurrency.Equals(input.BorrowCurrency))
                ) && 
                (
                    this.BorrowAmount == input.BorrowAmount ||
                    (this.BorrowAmount != null &&
                    this.BorrowAmount.Equals(input.BorrowAmount))
                ) && 
                (
                    this.RepaidAmount == input.RepaidAmount ||
                    (this.RepaidAmount != null &&
                    this.RepaidAmount.Equals(input.RepaidAmount))
                ) && 
                (
                    this.RepaidPrincipal == input.RepaidPrincipal ||
                    (this.RepaidPrincipal != null &&
                    this.RepaidPrincipal.Equals(input.RepaidPrincipal))
                ) && 
                (
                    this.RepaidInterest == input.RepaidInterest ||
                    (this.RepaidInterest != null &&
                    this.RepaidInterest.Equals(input.RepaidInterest))
                ) && 
                (
                    this.InitLtv == input.InitLtv ||
                    (this.InitLtv != null &&
                    this.InitLtv.Equals(input.InitLtv))
                ) && 
                (
                    this.CurrentLtv == input.CurrentLtv ||
                    (this.CurrentLtv != null &&
                    this.CurrentLtv.Equals(input.CurrentLtv))
                ) && 
                (
                    this.LiquidateLtv == input.LiquidateLtv ||
                    (this.LiquidateLtv != null &&
                    this.LiquidateLtv.Equals(input.LiquidateLtv))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.BorrowTime == input.BorrowTime ||
                    this.BorrowTime.Equals(input.BorrowTime)
                ) && 
                (
                    this.LeftRepayTotal == input.LeftRepayTotal ||
                    (this.LeftRepayTotal != null &&
                    this.LeftRepayTotal.Equals(input.LeftRepayTotal))
                ) && 
                (
                    this.LeftRepayPrincipal == input.LeftRepayPrincipal ||
                    (this.LeftRepayPrincipal != null &&
                    this.LeftRepayPrincipal.Equals(input.LeftRepayPrincipal))
                ) && 
                (
                    this.LeftRepayInterest == input.LeftRepayInterest ||
                    (this.LeftRepayInterest != null &&
                    this.LeftRepayInterest.Equals(input.LeftRepayInterest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.CollateralCurrency != null)
                    hashCode = hashCode * 59 + this.CollateralCurrency.GetHashCode();
                if (this.CollateralAmount != null)
                    hashCode = hashCode * 59 + this.CollateralAmount.GetHashCode();
                if (this.BorrowCurrency != null)
                    hashCode = hashCode * 59 + this.BorrowCurrency.GetHashCode();
                if (this.BorrowAmount != null)
                    hashCode = hashCode * 59 + this.BorrowAmount.GetHashCode();
                if (this.RepaidAmount != null)
                    hashCode = hashCode * 59 + this.RepaidAmount.GetHashCode();
                if (this.RepaidPrincipal != null)
                    hashCode = hashCode * 59 + this.RepaidPrincipal.GetHashCode();
                if (this.RepaidInterest != null)
                    hashCode = hashCode * 59 + this.RepaidInterest.GetHashCode();
                if (this.InitLtv != null)
                    hashCode = hashCode * 59 + this.InitLtv.GetHashCode();
                if (this.CurrentLtv != null)
                    hashCode = hashCode * 59 + this.CurrentLtv.GetHashCode();
                if (this.LiquidateLtv != null)
                    hashCode = hashCode * 59 + this.LiquidateLtv.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.BorrowTime.GetHashCode();
                if (this.LeftRepayTotal != null)
                    hashCode = hashCode * 59 + this.LeftRepayTotal.GetHashCode();
                if (this.LeftRepayPrincipal != null)
                    hashCode = hashCode * 59 + this.LeftRepayPrincipal.GetHashCode();
                if (this.LeftRepayInterest != null)
                    hashCode = hashCode * 59 + this.LeftRepayInterest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
