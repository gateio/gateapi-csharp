/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Spot currency pair
    /// </summary>
    [DataContract]
    public partial class CurrencyPair :  IEquatable<CurrencyPair>, IValidatableObject
    {
        /// <summary>
        /// How currency pair can be traded  - untradable: cannot be bought or sold - buyable: can be bought - sellable: can be sold - tradable: can be bought or sold
        /// </summary>
        /// <value>How currency pair can be traded  - untradable: cannot be bought or sold - buyable: can be bought - sellable: can be sold - tradable: can be bought or sold</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TradeStatusEnum
        {
            /// <summary>
            /// Enum Untradable for value: untradable
            /// </summary>
            [EnumMember(Value = "untradable")]
            Untradable = 1,

            /// <summary>
            /// Enum Buyable for value: buyable
            /// </summary>
            [EnumMember(Value = "buyable")]
            Buyable = 2,

            /// <summary>
            /// Enum Sellable for value: sellable
            /// </summary>
            [EnumMember(Value = "sellable")]
            Sellable = 3,

            /// <summary>
            /// Enum Tradable for value: tradable
            /// </summary>
            [EnumMember(Value = "tradable")]
            Tradable = 4

        }

        /// <summary>
        /// How currency pair can be traded  - untradable: cannot be bought or sold - buyable: can be bought - sellable: can be sold - tradable: can be bought or sold
        /// </summary>
        /// <value>How currency pair can be traded  - untradable: cannot be bought or sold - buyable: can be bought - sellable: can be sold - tradable: can be bought or sold</value>
        [DataMember(Name="trade_status")]
        public TradeStatusEnum? TradeStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyPair" /> class.
        /// </summary>
        /// <param name="id">Currency pair.</param>
        /// <param name="_base">Base currency.</param>
        /// <param name="quote">Quote currency.</param>
        /// <param name="fee">Trading fee.</param>
        /// <param name="minBaseAmount">Minimum amount of base currency to trade, &#x60;null&#x60; means no limit.</param>
        /// <param name="minQuoteAmount">Minimum amount of quote currency to trade, &#x60;null&#x60; means no limit.</param>
        /// <param name="maxBaseAmount">Maximum amount of base currency to trade, &#x60;null&#x60; means no limit.</param>
        /// <param name="maxQuoteAmount">Maximum amount of quote currency to trade, &#x60;null&#x60; means no limit.</param>
        /// <param name="amountPrecision">Amount scale.</param>
        /// <param name="precision">Price scale.</param>
        /// <param name="tradeStatus">How currency pair can be traded  - untradable: cannot be bought or sold - buyable: can be bought - sellable: can be sold - tradable: can be bought or sold.</param>
        /// <param name="sellStart">Sell start unix timestamp in seconds.</param>
        /// <param name="buyStart">Buy start unix timestamp in seconds.</param>
        public CurrencyPair(string id = default(string), string _base = default(string), string quote = default(string), string fee = default(string), string minBaseAmount = default(string), string minQuoteAmount = default(string), string maxBaseAmount = default(string), string maxQuoteAmount = default(string), int amountPrecision = default(int), int precision = default(int), TradeStatusEnum? tradeStatus = default(TradeStatusEnum?), long sellStart = default(long), long buyStart = default(long))
        {
            this.Id = id;
            this.Base = _base;
            this.Quote = quote;
            this.Fee = fee;
            this.MinBaseAmount = minBaseAmount;
            this.MinQuoteAmount = minQuoteAmount;
            this.MaxBaseAmount = maxBaseAmount;
            this.MaxQuoteAmount = maxQuoteAmount;
            this.AmountPrecision = amountPrecision;
            this.Precision = precision;
            this.TradeStatus = tradeStatus;
            this.SellStart = sellStart;
            this.BuyStart = buyStart;
        }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Base currency
        /// </summary>
        /// <value>Base currency</value>
        [DataMember(Name="base")]
        public string Base { get; set; }

        /// <summary>
        /// Quote currency
        /// </summary>
        /// <value>Quote currency</value>
        [DataMember(Name="quote")]
        public string Quote { get; set; }

        /// <summary>
        /// Trading fee
        /// </summary>
        /// <value>Trading fee</value>
        [DataMember(Name="fee")]
        public string Fee { get; set; }

        /// <summary>
        /// Minimum amount of base currency to trade, &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Minimum amount of base currency to trade, &#x60;null&#x60; means no limit</value>
        [DataMember(Name="min_base_amount")]
        public string MinBaseAmount { get; set; }

        /// <summary>
        /// Minimum amount of quote currency to trade, &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Minimum amount of quote currency to trade, &#x60;null&#x60; means no limit</value>
        [DataMember(Name="min_quote_amount")]
        public string MinQuoteAmount { get; set; }

        /// <summary>
        /// Maximum amount of base currency to trade, &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Maximum amount of base currency to trade, &#x60;null&#x60; means no limit</value>
        [DataMember(Name="max_base_amount")]
        public string MaxBaseAmount { get; set; }

        /// <summary>
        /// Maximum amount of quote currency to trade, &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Maximum amount of quote currency to trade, &#x60;null&#x60; means no limit</value>
        [DataMember(Name="max_quote_amount")]
        public string MaxQuoteAmount { get; set; }

        /// <summary>
        /// Amount scale
        /// </summary>
        /// <value>Amount scale</value>
        [DataMember(Name="amount_precision")]
        public int AmountPrecision { get; set; }

        /// <summary>
        /// Price scale
        /// </summary>
        /// <value>Price scale</value>
        [DataMember(Name="precision")]
        public int Precision { get; set; }

        /// <summary>
        /// Sell start unix timestamp in seconds
        /// </summary>
        /// <value>Sell start unix timestamp in seconds</value>
        [DataMember(Name="sell_start")]
        public long SellStart { get; set; }

        /// <summary>
        /// Buy start unix timestamp in seconds
        /// </summary>
        /// <value>Buy start unix timestamp in seconds</value>
        [DataMember(Name="buy_start")]
        public long BuyStart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyPair {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  MinBaseAmount: ").Append(MinBaseAmount).Append("\n");
            sb.Append("  MinQuoteAmount: ").Append(MinQuoteAmount).Append("\n");
            sb.Append("  MaxBaseAmount: ").Append(MaxBaseAmount).Append("\n");
            sb.Append("  MaxQuoteAmount: ").Append(MaxQuoteAmount).Append("\n");
            sb.Append("  AmountPrecision: ").Append(AmountPrecision).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  TradeStatus: ").Append(TradeStatus).Append("\n");
            sb.Append("  SellStart: ").Append(SellStart).Append("\n");
            sb.Append("  BuyStart: ").Append(BuyStart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyPair);
        }

        /// <summary>
        /// Returns true if CurrencyPair instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyPair input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.MinBaseAmount == input.MinBaseAmount ||
                    (this.MinBaseAmount != null &&
                    this.MinBaseAmount.Equals(input.MinBaseAmount))
                ) && 
                (
                    this.MinQuoteAmount == input.MinQuoteAmount ||
                    (this.MinQuoteAmount != null &&
                    this.MinQuoteAmount.Equals(input.MinQuoteAmount))
                ) && 
                (
                    this.MaxBaseAmount == input.MaxBaseAmount ||
                    (this.MaxBaseAmount != null &&
                    this.MaxBaseAmount.Equals(input.MaxBaseAmount))
                ) && 
                (
                    this.MaxQuoteAmount == input.MaxQuoteAmount ||
                    (this.MaxQuoteAmount != null &&
                    this.MaxQuoteAmount.Equals(input.MaxQuoteAmount))
                ) && 
                (
                    this.AmountPrecision == input.AmountPrecision ||
                    this.AmountPrecision.Equals(input.AmountPrecision)
                ) && 
                (
                    this.Precision == input.Precision ||
                    this.Precision.Equals(input.Precision)
                ) && 
                (
                    this.TradeStatus == input.TradeStatus ||
                    this.TradeStatus.Equals(input.TradeStatus)
                ) && 
                (
                    this.SellStart == input.SellStart ||
                    this.SellStart.Equals(input.SellStart)
                ) && 
                (
                    this.BuyStart == input.BuyStart ||
                    this.BuyStart.Equals(input.BuyStart)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.MinBaseAmount != null)
                    hashCode = hashCode * 59 + this.MinBaseAmount.GetHashCode();
                if (this.MinQuoteAmount != null)
                    hashCode = hashCode * 59 + this.MinQuoteAmount.GetHashCode();
                if (this.MaxBaseAmount != null)
                    hashCode = hashCode * 59 + this.MaxBaseAmount.GetHashCode();
                if (this.MaxQuoteAmount != null)
                    hashCode = hashCode * 59 + this.MaxQuoteAmount.GetHashCode();
                hashCode = hashCode * 59 + this.AmountPrecision.GetHashCode();
                hashCode = hashCode * 59 + this.Precision.GetHashCode();
                hashCode = hashCode * 59 + this.TradeStatus.GetHashCode();
                hashCode = hashCode * 59 + this.SellStart.GetHashCode();
                hashCode = hashCode * 59 + this.BuyStart.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
