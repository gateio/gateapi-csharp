/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// DualGetPlans
    /// </summary>
    [DataContract]
    public partial class DualGetPlans :  IEquatable<DualGetPlans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DualGetPlans" /> class.
        /// </summary>
        /// <param name="id">Plan ID.</param>
        /// <param name="instrumentName">Instrument Name.</param>
        /// <param name="investCurrency">Investment Currency.</param>
        /// <param name="exerciseCurrency">Strike Currency.</param>
        /// <param name="exercisePrice">Strike price.</param>
        /// <param name="deliveryTime">Settlement time.</param>
        /// <param name="minCopies">Minimum Copies.</param>
        /// <param name="maxCopies">Maximum Copies.</param>
        /// <param name="perValue">Per Unit Value.</param>
        /// <param name="apyDisplay">APY.</param>
        /// <param name="startTime">start time.</param>
        /// <param name="endTime">Finished time.</param>
        /// <param name="status">Status:   &#x60;NOTSTARTED&#x60;-not started  &#x60;ONGOING&#x60;-ongoing  &#x60;ENDED&#x60;-ended.</param>
        public DualGetPlans(int id = default(int), string instrumentName = default(string), string investCurrency = default(string), string exerciseCurrency = default(string), double exercisePrice = default(double), int deliveryTime = default(int), int minCopies = default(int), int maxCopies = default(int), string perValue = default(string), string apyDisplay = default(string), int startTime = default(int), int endTime = default(int), string status = default(string))
        {
            this.Id = id;
            this.InstrumentName = instrumentName;
            this.InvestCurrency = investCurrency;
            this.ExerciseCurrency = exerciseCurrency;
            this.ExercisePrice = exercisePrice;
            this.DeliveryTime = deliveryTime;
            this.MinCopies = minCopies;
            this.MaxCopies = maxCopies;
            this.PerValue = perValue;
            this.ApyDisplay = apyDisplay;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Status = status;
        }

        /// <summary>
        /// Plan ID
        /// </summary>
        /// <value>Plan ID</value>
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// Instrument Name
        /// </summary>
        /// <value>Instrument Name</value>
        [DataMember(Name="instrument_name")]
        public string InstrumentName { get; set; }

        /// <summary>
        /// Investment Currency
        /// </summary>
        /// <value>Investment Currency</value>
        [DataMember(Name="invest_currency")]
        public string InvestCurrency { get; set; }

        /// <summary>
        /// Strike Currency
        /// </summary>
        /// <value>Strike Currency</value>
        [DataMember(Name="exercise_currency")]
        public string ExerciseCurrency { get; set; }

        /// <summary>
        /// Strike price
        /// </summary>
        /// <value>Strike price</value>
        [DataMember(Name="exercise_price")]
        public double ExercisePrice { get; set; }

        /// <summary>
        /// Settlement time
        /// </summary>
        /// <value>Settlement time</value>
        [DataMember(Name="delivery_time")]
        public int DeliveryTime { get; set; }

        /// <summary>
        /// Minimum Copies
        /// </summary>
        /// <value>Minimum Copies</value>
        [DataMember(Name="min_copies")]
        public int MinCopies { get; set; }

        /// <summary>
        /// Maximum Copies
        /// </summary>
        /// <value>Maximum Copies</value>
        [DataMember(Name="max_copies")]
        public int MaxCopies { get; set; }

        /// <summary>
        /// Per Unit Value
        /// </summary>
        /// <value>Per Unit Value</value>
        [DataMember(Name="per_value")]
        public string PerValue { get; set; }

        /// <summary>
        /// APY
        /// </summary>
        /// <value>APY</value>
        [DataMember(Name="apy_display")]
        public string ApyDisplay { get; set; }

        /// <summary>
        /// start time
        /// </summary>
        /// <value>start time</value>
        [DataMember(Name="start_time")]
        public int StartTime { get; set; }

        /// <summary>
        /// Finished time
        /// </summary>
        /// <value>Finished time</value>
        [DataMember(Name="end_time")]
        public int EndTime { get; set; }

        /// <summary>
        /// Status:   &#x60;NOTSTARTED&#x60;-not started  &#x60;ONGOING&#x60;-ongoing  &#x60;ENDED&#x60;-ended
        /// </summary>
        /// <value>Status:   &#x60;NOTSTARTED&#x60;-not started  &#x60;ONGOING&#x60;-ongoing  &#x60;ENDED&#x60;-ended</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DualGetPlans {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstrumentName: ").Append(InstrumentName).Append("\n");
            sb.Append("  InvestCurrency: ").Append(InvestCurrency).Append("\n");
            sb.Append("  ExerciseCurrency: ").Append(ExerciseCurrency).Append("\n");
            sb.Append("  ExercisePrice: ").Append(ExercisePrice).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  MinCopies: ").Append(MinCopies).Append("\n");
            sb.Append("  MaxCopies: ").Append(MaxCopies).Append("\n");
            sb.Append("  PerValue: ").Append(PerValue).Append("\n");
            sb.Append("  ApyDisplay: ").Append(ApyDisplay).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DualGetPlans);
        }

        /// <summary>
        /// Returns true if DualGetPlans instances are equal
        /// </summary>
        /// <param name="input">Instance of DualGetPlans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DualGetPlans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.InstrumentName == input.InstrumentName ||
                    (this.InstrumentName != null &&
                    this.InstrumentName.Equals(input.InstrumentName))
                ) && 
                (
                    this.InvestCurrency == input.InvestCurrency ||
                    (this.InvestCurrency != null &&
                    this.InvestCurrency.Equals(input.InvestCurrency))
                ) && 
                (
                    this.ExerciseCurrency == input.ExerciseCurrency ||
                    (this.ExerciseCurrency != null &&
                    this.ExerciseCurrency.Equals(input.ExerciseCurrency))
                ) && 
                (
                    this.ExercisePrice == input.ExercisePrice ||
                    this.ExercisePrice.Equals(input.ExercisePrice)
                ) && 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    this.DeliveryTime.Equals(input.DeliveryTime)
                ) && 
                (
                    this.MinCopies == input.MinCopies ||
                    this.MinCopies.Equals(input.MinCopies)
                ) && 
                (
                    this.MaxCopies == input.MaxCopies ||
                    this.MaxCopies.Equals(input.MaxCopies)
                ) && 
                (
                    this.PerValue == input.PerValue ||
                    (this.PerValue != null &&
                    this.PerValue.Equals(input.PerValue))
                ) && 
                (
                    this.ApyDisplay == input.ApyDisplay ||
                    (this.ApyDisplay != null &&
                    this.ApyDisplay.Equals(input.ApyDisplay))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    this.StartTime.Equals(input.StartTime)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstrumentName != null)
                    hashCode = hashCode * 59 + this.InstrumentName.GetHashCode();
                if (this.InvestCurrency != null)
                    hashCode = hashCode * 59 + this.InvestCurrency.GetHashCode();
                if (this.ExerciseCurrency != null)
                    hashCode = hashCode * 59 + this.ExerciseCurrency.GetHashCode();
                hashCode = hashCode * 59 + this.ExercisePrice.GetHashCode();
                hashCode = hashCode * 59 + this.DeliveryTime.GetHashCode();
                hashCode = hashCode * 59 + this.MinCopies.GetHashCode();
                hashCode = hashCode * 59 + this.MaxCopies.GetHashCode();
                if (this.PerValue != null)
                    hashCode = hashCode * 59 + this.PerValue.GetHashCode();
                if (this.ApyDisplay != null)
                    hashCode = hashCode * 59 + this.ApyDisplay.GetHashCode();
                hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
