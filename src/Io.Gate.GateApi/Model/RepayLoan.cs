/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Repay
    /// </summary>
    [DataContract]
    public partial class RepayLoan :  IEquatable<RepayLoan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepayLoan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RepayLoan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RepayLoan" /> class.
        /// </summary>
        /// <param name="orderId">Order ID (required).</param>
        /// <param name="repayAmount">Repayment amount, it is mandatory when making partial repayments (required).</param>
        /// <param name="repaidAll">Repayment method, set to &#x60;true&#x60; for full repayment, and &#x60;false&#x60; for partial repayment; When set to false for partial repayment, the repay_amount parameter cannot be greater than the remaining amount to be repaid by the user.  (required).</param>
        public RepayLoan(long orderId = default(long), string repayAmount = default(string), bool repaidAll = default(bool))
        {
            this.OrderId = orderId;
            // to ensure "repayAmount" is required (not null)
            this.RepayAmount = repayAmount ?? throw new ArgumentNullException("repayAmount", "repayAmount is a required property for RepayLoan and cannot be null");
            this.RepaidAll = repaidAll;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Repayment amount, it is mandatory when making partial repayments
        /// </summary>
        /// <value>Repayment amount, it is mandatory when making partial repayments</value>
        [DataMember(Name="repay_amount")]
        public string RepayAmount { get; set; }

        /// <summary>
        /// Repayment method, set to &#x60;true&#x60; for full repayment, and &#x60;false&#x60; for partial repayment; When set to false for partial repayment, the repay_amount parameter cannot be greater than the remaining amount to be repaid by the user. 
        /// </summary>
        /// <value>Repayment method, set to &#x60;true&#x60; for full repayment, and &#x60;false&#x60; for partial repayment; When set to false for partial repayment, the repay_amount parameter cannot be greater than the remaining amount to be repaid by the user. </value>
        [DataMember(Name="repaid_all")]
        public bool RepaidAll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepayLoan {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RepayAmount: ").Append(RepayAmount).Append("\n");
            sb.Append("  RepaidAll: ").Append(RepaidAll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepayLoan);
        }

        /// <summary>
        /// Returns true if RepayLoan instances are equal
        /// </summary>
        /// <param name="input">Instance of RepayLoan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepayLoan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.RepayAmount == input.RepayAmount ||
                    (this.RepayAmount != null &&
                    this.RepayAmount.Equals(input.RepayAmount))
                ) && 
                (
                    this.RepaidAll == input.RepaidAll ||
                    this.RepaidAll.Equals(input.RepaidAll)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.RepayAmount != null)
                    hashCode = hashCode * 59 + this.RepayAmount.GetHashCode();
                hashCode = hashCode * 59 + this.RepaidAll.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
