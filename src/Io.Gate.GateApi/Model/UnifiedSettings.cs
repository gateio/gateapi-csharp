/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UnifiedSettings
    /// </summary>
    [DataContract]
    public partial class UnifiedSettings :  IEquatable<UnifiedSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedSettings" /> class.
        /// </summary>
        /// <param name="usdtFutures">USDT contract switch. In cross-currency margin mode, it can only be turned on and not off.</param>
        /// <param name="spotHedge">Spot hedging switch. .</param>
        /// <param name="useFunding">switch, when the mode is cross-currency margin mode, whether to use Uniloan financial funds as margin.</param>
        /// <param name="options">Option switch. In cross-currency margin mode, it can only be turned on and not off.</param>
        public UnifiedSettings(bool usdtFutures = default(bool), bool spotHedge = default(bool), bool useFunding = default(bool), bool options = default(bool))
        {
            this.UsdtFutures = usdtFutures;
            this.SpotHedge = spotHedge;
            this.UseFunding = useFunding;
            this.Options = options;
        }

        /// <summary>
        /// USDT contract switch. In cross-currency margin mode, it can only be turned on and not off
        /// </summary>
        /// <value>USDT contract switch. In cross-currency margin mode, it can only be turned on and not off</value>
        [DataMember(Name="usdt_futures")]
        public bool UsdtFutures { get; set; }

        /// <summary>
        /// Spot hedging switch. 
        /// </summary>
        /// <value>Spot hedging switch. </value>
        [DataMember(Name="spot_hedge")]
        public bool SpotHedge { get; set; }

        /// <summary>
        /// switch, when the mode is cross-currency margin mode, whether to use Uniloan financial funds as margin
        /// </summary>
        /// <value>switch, when the mode is cross-currency margin mode, whether to use Uniloan financial funds as margin</value>
        [DataMember(Name="use_funding")]
        public bool UseFunding { get; set; }

        /// <summary>
        /// Option switch. In cross-currency margin mode, it can only be turned on and not off
        /// </summary>
        /// <value>Option switch. In cross-currency margin mode, it can only be turned on and not off</value>
        [DataMember(Name="options")]
        public bool Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedSettings {\n");
            sb.Append("  UsdtFutures: ").Append(UsdtFutures).Append("\n");
            sb.Append("  SpotHedge: ").Append(SpotHedge).Append("\n");
            sb.Append("  UseFunding: ").Append(UseFunding).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedSettings);
        }

        /// <summary>
        /// Returns true if UnifiedSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsdtFutures == input.UsdtFutures ||
                    this.UsdtFutures.Equals(input.UsdtFutures)
                ) && 
                (
                    this.SpotHedge == input.SpotHedge ||
                    this.SpotHedge.Equals(input.SpotHedge)
                ) && 
                (
                    this.UseFunding == input.UseFunding ||
                    this.UseFunding.Equals(input.UseFunding)
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options.Equals(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.UsdtFutures.GetHashCode();
                hashCode = hashCode * 59 + this.SpotHedge.GetHashCode();
                hashCode = hashCode * 59 + this.UseFunding.GetHashCode();
                hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
