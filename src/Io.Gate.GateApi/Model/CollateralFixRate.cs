/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Multi-collateral fixed interest rate
    /// </summary>
    [DataContract]
    public partial class CollateralFixRate :  IEquatable<CollateralFixRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralFixRate" /> class.
        /// </summary>
        /// <param name="currency">Currency.</param>
        /// <param name="rate7d">Fixed interest rate for a lending period of 7 days.</param>
        /// <param name="rate30d">Fixed interest rate for a lending period of 30 days.</param>
        /// <param name="updateTime">Update time, timestamp, unit in seconds.</param>
        public CollateralFixRate(string currency = default(string), string rate7d = default(string), string rate30d = default(string), long updateTime = default(long))
        {
            this.Currency = currency;
            this.Rate7d = rate7d;
            this.Rate30d = rate30d;
            this.UpdateTime = updateTime;
        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Fixed interest rate for a lending period of 7 days
        /// </summary>
        /// <value>Fixed interest rate for a lending period of 7 days</value>
        [DataMember(Name="rate_7d")]
        public string Rate7d { get; set; }

        /// <summary>
        /// Fixed interest rate for a lending period of 30 days
        /// </summary>
        /// <value>Fixed interest rate for a lending period of 30 days</value>
        [DataMember(Name="rate_30d")]
        public string Rate30d { get; set; }

        /// <summary>
        /// Update time, timestamp, unit in seconds
        /// </summary>
        /// <value>Update time, timestamp, unit in seconds</value>
        [DataMember(Name="update_time")]
        public long UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollateralFixRate {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Rate7d: ").Append(Rate7d).Append("\n");
            sb.Append("  Rate30d: ").Append(Rate30d).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralFixRate);
        }

        /// <summary>
        /// Returns true if CollateralFixRate instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralFixRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralFixRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Rate7d == input.Rate7d ||
                    (this.Rate7d != null &&
                    this.Rate7d.Equals(input.Rate7d))
                ) && 
                (
                    this.Rate30d == input.Rate30d ||
                    (this.Rate30d != null &&
                    this.Rate30d.Equals(input.Rate30d))
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    this.UpdateTime.Equals(input.UpdateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Rate7d != null)
                    hashCode = hashCode * 59 + this.Rate7d.GetHashCode();
                if (this.Rate30d != null)
                    hashCode = hashCode * 59 + this.Rate30d.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
