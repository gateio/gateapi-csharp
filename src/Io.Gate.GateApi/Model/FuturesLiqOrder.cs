/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// FuturesLiqOrder
    /// </summary>
    [DataContract]
    public partial class FuturesLiqOrder :  IEquatable<FuturesLiqOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FuturesLiqOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FuturesLiqOrder()
        {
        }

        /// <summary>
        /// Liquidation time
        /// </summary>
        /// <value>Liquidation time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long Time { get; private set; }

        /// <summary>
        /// Futures contract
        /// </summary>
        /// <value>Futures contract</value>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string Contract { get; private set; }

        /// <summary>
        /// User position size
        /// </summary>
        /// <value>User position size</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long Size { get; private set; }

        /// <summary>
        /// Liquidation order price
        /// </summary>
        /// <value>Liquidation order price</value>
        [DataMember(Name="order_price", EmitDefaultValue=false)]
        public string OrderPrice { get; private set; }

        /// <summary>
        /// Liquidation order average taker price
        /// </summary>
        /// <value>Liquidation order average taker price</value>
        [DataMember(Name="fill_price", EmitDefaultValue=false)]
        public string FillPrice { get; private set; }

        /// <summary>
        /// System liquidation order maker size
        /// </summary>
        /// <value>System liquidation order maker size</value>
        [DataMember(Name="left", EmitDefaultValue=false)]
        public long Left { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FuturesLiqOrder {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  OrderPrice: ").Append(OrderPrice).Append("\n");
            sb.Append("  FillPrice: ").Append(FillPrice).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FuturesLiqOrder);
        }

        /// <summary>
        /// Returns true if FuturesLiqOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of FuturesLiqOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FuturesLiqOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.OrderPrice == input.OrderPrice ||
                    (this.OrderPrice != null &&
                    this.OrderPrice.Equals(input.OrderPrice))
                ) && 
                (
                    this.FillPrice == input.FillPrice ||
                    (this.FillPrice != null &&
                    this.FillPrice.Equals(input.FillPrice))
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.OrderPrice != null)
                    hashCode = hashCode * 59 + this.OrderPrice.GetHashCode();
                if (this.FillPrice != null)
                    hashCode = hashCode * 59 + this.FillPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Left.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
