/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// 下单返回
    /// </summary>
    [DataContract]
    public partial class OrderResponse :  IEquatable<OrderResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderResponse" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="txHash">Transaction Hash.</param>
        /// <param name="side">买单或者卖单 - buy - sell.</param>
        /// <param name="usdtAmount">Amount.</param>
        /// <param name="currency">币.</param>
        /// <param name="currencyAmount">Currency amount.</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete.</param>
        /// <param name="gasMode">Trading mode affects slippage selection - &#x60;speed&#x60; : Smart mode - &#x60;custom&#x60; : Custom mode, uses &#x60;slippage&#x60; parameter.</param>
        /// <param name="chain">链.</param>
        /// <param name="gasFee">Miner Fee (USDT-based).</param>
        /// <param name="transactionFee">Trading Fee (USDT-based).</param>
        /// <param name="failedReason">Failure reason (if any).</param>
        /// <param name="createTime">创建时间（时间戳）.</param>
        public OrderResponse(string orderId = default(string), string txHash = default(string), string side = default(string), string usdtAmount = default(string), string currency = default(string), string currencyAmount = default(string), int status = default(int), string gasMode = default(string), string chain = default(string), string gasFee = default(string), string transactionFee = default(string), string failedReason = default(string), long createTime = default(long))
        {
            this.OrderId = orderId;
            this.TxHash = txHash;
            this.Side = side;
            this.UsdtAmount = usdtAmount;
            this.Currency = currency;
            this.CurrencyAmount = currencyAmount;
            this.Status = status;
            this.GasMode = gasMode;
            this.Chain = chain;
            this.GasFee = gasFee;
            this.TransactionFee = transactionFee;
            this.FailedReason = failedReason;
            this.CreateTime = createTime;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public string OrderId { get; set; }

        /// <summary>
        /// Transaction Hash
        /// </summary>
        /// <value>Transaction Hash</value>
        [DataMember(Name="tx_hash")]
        public string TxHash { get; set; }

        /// <summary>
        /// 买单或者卖单 - buy - sell
        /// </summary>
        /// <value>买单或者卖单 - buy - sell</value>
        [DataMember(Name="side")]
        public string Side { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="usdt_amount")]
        public string UsdtAmount { get; set; }

        /// <summary>
        /// 币
        /// </summary>
        /// <value>币</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Currency amount
        /// </summary>
        /// <value>Currency amount</value>
        [DataMember(Name="currency_amount")]
        public string CurrencyAmount { get; set; }

        /// <summary>
        /// Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete
        /// </summary>
        /// <value>Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</value>
        [DataMember(Name="status")]
        public int Status { get; set; }

        /// <summary>
        /// Trading mode affects slippage selection - &#x60;speed&#x60; : Smart mode - &#x60;custom&#x60; : Custom mode, uses &#x60;slippage&#x60; parameter
        /// </summary>
        /// <value>Trading mode affects slippage selection - &#x60;speed&#x60; : Smart mode - &#x60;custom&#x60; : Custom mode, uses &#x60;slippage&#x60; parameter</value>
        [DataMember(Name="gas_mode")]
        public string GasMode { get; set; }

        /// <summary>
        /// 链
        /// </summary>
        /// <value>链</value>
        [DataMember(Name="chain")]
        public string Chain { get; set; }

        /// <summary>
        /// Miner Fee (USDT-based)
        /// </summary>
        /// <value>Miner Fee (USDT-based)</value>
        [DataMember(Name="gas_fee")]
        public string GasFee { get; set; }

        /// <summary>
        /// Trading Fee (USDT-based)
        /// </summary>
        /// <value>Trading Fee (USDT-based)</value>
        [DataMember(Name="transaction_fee")]
        public string TransactionFee { get; set; }

        /// <summary>
        /// Failure reason (if any)
        /// </summary>
        /// <value>Failure reason (if any)</value>
        [DataMember(Name="failed_reason")]
        public string FailedReason { get; set; }

        /// <summary>
        /// 创建时间（时间戳）
        /// </summary>
        /// <value>创建时间（时间戳）</value>
        [DataMember(Name="create_time")]
        public long CreateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderResponse {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TxHash: ").Append(TxHash).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  UsdtAmount: ").Append(UsdtAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GasMode: ").Append(GasMode).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  GasFee: ").Append(GasFee).Append("\n");
            sb.Append("  TransactionFee: ").Append(TransactionFee).Append("\n");
            sb.Append("  FailedReason: ").Append(FailedReason).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderResponse);
        }

        /// <summary>
        /// Returns true if OrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.TxHash == input.TxHash ||
                    (this.TxHash != null &&
                    this.TxHash.Equals(input.TxHash))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.UsdtAmount == input.UsdtAmount ||
                    (this.UsdtAmount != null &&
                    this.UsdtAmount.Equals(input.UsdtAmount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrencyAmount == input.CurrencyAmount ||
                    (this.CurrencyAmount != null &&
                    this.CurrencyAmount.Equals(input.CurrencyAmount))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.GasMode == input.GasMode ||
                    (this.GasMode != null &&
                    this.GasMode.Equals(input.GasMode))
                ) && 
                (
                    this.Chain == input.Chain ||
                    (this.Chain != null &&
                    this.Chain.Equals(input.Chain))
                ) && 
                (
                    this.GasFee == input.GasFee ||
                    (this.GasFee != null &&
                    this.GasFee.Equals(input.GasFee))
                ) && 
                (
                    this.TransactionFee == input.TransactionFee ||
                    (this.TransactionFee != null &&
                    this.TransactionFee.Equals(input.TransactionFee))
                ) && 
                (
                    this.FailedReason == input.FailedReason ||
                    (this.FailedReason != null &&
                    this.FailedReason.Equals(input.FailedReason))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    this.CreateTime.Equals(input.CreateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.TxHash != null)
                    hashCode = hashCode * 59 + this.TxHash.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.UsdtAmount != null)
                    hashCode = hashCode * 59 + this.UsdtAmount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrencyAmount != null)
                    hashCode = hashCode * 59 + this.CurrencyAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.GasMode != null)
                    hashCode = hashCode * 59 + this.GasMode.GetHashCode();
                if (this.Chain != null)
                    hashCode = hashCode * 59 + this.Chain.GetHashCode();
                if (this.GasFee != null)
                    hashCode = hashCode * 59 + this.GasFee.GetHashCode();
                if (this.TransactionFee != null)
                    hashCode = hashCode * 59 + this.TransactionFee.GetHashCode();
                if (this.FailedReason != null)
                    hashCode = hashCode * 59 + this.FailedReason.GetHashCode();
                hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
