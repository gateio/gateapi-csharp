/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Ticker2
    /// </summary>
    [DataContract]
    public partial class Ticker2 :  IEquatable<Ticker2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticker2" /> class.
        /// </summary>
        /// <param name="currency">Currency symbol.</param>
        /// <param name="last">Last trading price.</param>
        /// <param name="change">Change percentage in the last 24h.</param>
        /// <param name="volume">24h Trading Volume (USDT).</param>
        /// <param name="marketCap">Current Coin Market Value.</param>
        public Ticker2(string currency = default(string), string last = default(string), string change = default(string), string volume = default(string), string marketCap = default(string))
        {
            this.Currency = currency;
            this.Last = last;
            this.Change = change;
            this.Volume = volume;
            this.MarketCap = marketCap;
        }

        /// <summary>
        /// Currency symbol
        /// </summary>
        /// <value>Currency symbol</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Last trading price
        /// </summary>
        /// <value>Last trading price</value>
        [DataMember(Name="last")]
        public string Last { get; set; }

        /// <summary>
        /// Change percentage in the last 24h
        /// </summary>
        /// <value>Change percentage in the last 24h</value>
        [DataMember(Name="change")]
        public string Change { get; set; }

        /// <summary>
        /// 24h Trading Volume (USDT)
        /// </summary>
        /// <value>24h Trading Volume (USDT)</value>
        [DataMember(Name="volume")]
        public string Volume { get; set; }

        /// <summary>
        /// Current Coin Market Value
        /// </summary>
        /// <value>Current Coin Market Value</value>
        [DataMember(Name="market_cap")]
        public string MarketCap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticker2 {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  MarketCap: ").Append(MarketCap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ticker2);
        }

        /// <summary>
        /// Returns true if Ticker2 instances are equal
        /// </summary>
        /// <param name="input">Instance of Ticker2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticker2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.Change == input.Change ||
                    (this.Change != null &&
                    this.Change.Equals(input.Change))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.MarketCap == input.MarketCap ||
                    (this.MarketCap != null &&
                    this.MarketCap.Equals(input.MarketCap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.Change != null)
                    hashCode = hashCode * 59 + this.Change.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.MarketCap != null)
                    hashCode = hashCode * 59 + this.MarketCap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
