/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// AccountRateLimit
    /// </summary>
    [DataContract]
    public partial class AccountRateLimit :  IEquatable<AccountRateLimit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountRateLimit" /> class.
        /// </summary>
        /// <param name="tier">Frequency limit level (For detailed frequency limit rules, see [Transaction ratio frequency limit](#rate-limit-based-on-fill-ratio)).</param>
        /// <param name="ratio">Transaction rate.</param>
        /// <param name="mainRatio">Total transaction ratio of main account.</param>
        /// <param name="updatedAt">Update time.</param>
        public AccountRateLimit(string tier = default(string), string ratio = default(string), string mainRatio = default(string), string updatedAt = default(string))
        {
            this.Tier = tier;
            this.Ratio = ratio;
            this.MainRatio = mainRatio;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Frequency limit level (For detailed frequency limit rules, see [Transaction ratio frequency limit](#rate-limit-based-on-fill-ratio))
        /// </summary>
        /// <value>Frequency limit level (For detailed frequency limit rules, see [Transaction ratio frequency limit](#rate-limit-based-on-fill-ratio))</value>
        [DataMember(Name="tier")]
        public string Tier { get; set; }

        /// <summary>
        /// Transaction rate
        /// </summary>
        /// <value>Transaction rate</value>
        [DataMember(Name="ratio")]
        public string Ratio { get; set; }

        /// <summary>
        /// Total transaction ratio of main account
        /// </summary>
        /// <value>Total transaction ratio of main account</value>
        [DataMember(Name="main_ratio")]
        public string MainRatio { get; set; }

        /// <summary>
        /// Update time
        /// </summary>
        /// <value>Update time</value>
        [DataMember(Name="updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountRateLimit {\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Ratio: ").Append(Ratio).Append("\n");
            sb.Append("  MainRatio: ").Append(MainRatio).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountRateLimit);
        }

        /// <summary>
        /// Returns true if AccountRateLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountRateLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountRateLimit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.Ratio == input.Ratio ||
                    (this.Ratio != null &&
                    this.Ratio.Equals(input.Ratio))
                ) && 
                (
                    this.MainRatio == input.MainRatio ||
                    (this.MainRatio != null &&
                    this.MainRatio.Equals(input.MainRatio))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.Ratio != null)
                    hashCode = hashCode * 59 + this.Ratio.GetHashCode();
                if (this.MainRatio != null)
                    hashCode = hashCode * 59 + this.MainRatio.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
