/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// MarginCurrencyPair
    /// </summary>
    [DataContract]
    public partial class MarginCurrencyPair :  IEquatable<MarginCurrencyPair>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarginCurrencyPair" /> class.
        /// </summary>
        /// <param name="id">Currency pair.</param>
        /// <param name="_base">Base currency.</param>
        /// <param name="quote">Quote currency.</param>
        /// <param name="leverage">Leverage.</param>
        /// <param name="minBaseAmount">Minimum base currency to loan, &#x60;null&#x60; means no limit.</param>
        /// <param name="minQuoteAmount">Minimum quote currency to loan, &#x60;null&#x60; means no limit.</param>
        /// <param name="maxQuoteAmount">Maximum borrowable amount for quote currency. Base currency limit is calculated by quote maximum and market price. &#x60;null&#x60; means no limit.</param>
        /// <param name="status">Currency pair status   - &#x60;0&#x60;: disabled  - &#x60;1&#x60;: enabled.</param>
        public MarginCurrencyPair(string id = default(string), string _base = default(string), string quote = default(string), int leverage = default(int), string minBaseAmount = default(string), string minQuoteAmount = default(string), string maxQuoteAmount = default(string), int status = default(int))
        {
            this.Id = id;
            this.Base = _base;
            this.Quote = quote;
            this.Leverage = leverage;
            this.MinBaseAmount = minBaseAmount;
            this.MinQuoteAmount = minQuoteAmount;
            this.MaxQuoteAmount = maxQuoteAmount;
            this.Status = status;
        }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Base currency
        /// </summary>
        /// <value>Base currency</value>
        [DataMember(Name="base")]
        public string Base { get; set; }

        /// <summary>
        /// Quote currency
        /// </summary>
        /// <value>Quote currency</value>
        [DataMember(Name="quote")]
        public string Quote { get; set; }

        /// <summary>
        /// Leverage
        /// </summary>
        /// <value>Leverage</value>
        [DataMember(Name="leverage")]
        public int Leverage { get; set; }

        /// <summary>
        /// Minimum base currency to loan, &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Minimum base currency to loan, &#x60;null&#x60; means no limit</value>
        [DataMember(Name="min_base_amount")]
        public string MinBaseAmount { get; set; }

        /// <summary>
        /// Minimum quote currency to loan, &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Minimum quote currency to loan, &#x60;null&#x60; means no limit</value>
        [DataMember(Name="min_quote_amount")]
        public string MinQuoteAmount { get; set; }

        /// <summary>
        /// Maximum borrowable amount for quote currency. Base currency limit is calculated by quote maximum and market price. &#x60;null&#x60; means no limit
        /// </summary>
        /// <value>Maximum borrowable amount for quote currency. Base currency limit is calculated by quote maximum and market price. &#x60;null&#x60; means no limit</value>
        [DataMember(Name="max_quote_amount")]
        public string MaxQuoteAmount { get; set; }

        /// <summary>
        /// Currency pair status   - &#x60;0&#x60;: disabled  - &#x60;1&#x60;: enabled
        /// </summary>
        /// <value>Currency pair status   - &#x60;0&#x60;: disabled  - &#x60;1&#x60;: enabled</value>
        [DataMember(Name="status")]
        public int Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarginCurrencyPair {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  MinBaseAmount: ").Append(MinBaseAmount).Append("\n");
            sb.Append("  MinQuoteAmount: ").Append(MinQuoteAmount).Append("\n");
            sb.Append("  MaxQuoteAmount: ").Append(MaxQuoteAmount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarginCurrencyPair);
        }

        /// <summary>
        /// Returns true if MarginCurrencyPair instances are equal
        /// </summary>
        /// <param name="input">Instance of MarginCurrencyPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarginCurrencyPair input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    this.Leverage.Equals(input.Leverage)
                ) && 
                (
                    this.MinBaseAmount == input.MinBaseAmount ||
                    (this.MinBaseAmount != null &&
                    this.MinBaseAmount.Equals(input.MinBaseAmount))
                ) && 
                (
                    this.MinQuoteAmount == input.MinQuoteAmount ||
                    (this.MinQuoteAmount != null &&
                    this.MinQuoteAmount.Equals(input.MinQuoteAmount))
                ) && 
                (
                    this.MaxQuoteAmount == input.MaxQuoteAmount ||
                    (this.MaxQuoteAmount != null &&
                    this.MaxQuoteAmount.Equals(input.MaxQuoteAmount))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.MinBaseAmount != null)
                    hashCode = hashCode * 59 + this.MinBaseAmount.GetHashCode();
                if (this.MinQuoteAmount != null)
                    hashCode = hashCode * 59 + this.MinQuoteAmount.GetHashCode();
                if (this.MaxQuoteAmount != null)
                    hashCode = hashCode * 59 + this.MaxQuoteAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
