/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SubCrossMarginAccount
    /// </summary>
    [DataContract]
    public partial class SubCrossMarginAccount :  IEquatable<SubCrossMarginAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubCrossMarginAccount" /> class.
        /// </summary>
        /// <param name="userId">User ID of the cross margin account. 0 means that the subaccount has not yet opened a cross margin account.</param>
        /// <param name="locked">Whether account is locked.</param>
        /// <param name="balances">balances.</param>
        /// <param name="total">Total account value in USDT, i.e., the sum of all currencies&#39; &#x60;(available+freeze)*price*discount&#x60;.</param>
        /// <param name="borrowed">Total borrowed value in USDT, i.e., the sum of all currencies&#39; &#x60;borrowed*price*discount&#x60;.</param>
        /// <param name="borrowedNet">Total borrowed value in USDT * borrowed factor.</param>
        /// <param name="net">Total net assets in USDT.</param>
        /// <param name="leverage">Position leverage.</param>
        /// <param name="interest">Total unpaid interests in USDT, i.e., the sum of all currencies&#39; &#x60;interest*price*discount&#x60;.</param>
        /// <param name="risk">Risk rate. When it belows 110%, liquidation will be triggered. Calculation formula: &#x60;total / (borrowed+interest)&#x60;.</param>
        /// <param name="totalInitialMargin">Total initial margin.</param>
        /// <param name="totalMarginBalance">Total margin balance.</param>
        /// <param name="totalMaintenanceMargin">Total maintenance margin.</param>
        /// <param name="totalInitialMarginRate">Total initial margin rate.</param>
        /// <param name="totalMaintenanceMarginRate">Total maintenance margin rate.</param>
        /// <param name="totalAvailableMargin">Total available margin.</param>
        public SubCrossMarginAccount(long userId = default(long), bool locked = default(bool), Dictionary<string, CrossMarginBalance1> balances = default(Dictionary<string, CrossMarginBalance1>), string total = default(string), string borrowed = default(string), string borrowedNet = default(string), string net = default(string), string leverage = default(string), string interest = default(string), string risk = default(string), string totalInitialMargin = default(string), string totalMarginBalance = default(string), string totalMaintenanceMargin = default(string), string totalInitialMarginRate = default(string), string totalMaintenanceMarginRate = default(string), string totalAvailableMargin = default(string))
        {
            this.UserId = userId;
            this.Locked = locked;
            this.Balances = balances;
            this.Total = total;
            this.Borrowed = borrowed;
            this.BorrowedNet = borrowedNet;
            this.Net = net;
            this.Leverage = leverage;
            this.Interest = interest;
            this.Risk = risk;
            this.TotalInitialMargin = totalInitialMargin;
            this.TotalMarginBalance = totalMarginBalance;
            this.TotalMaintenanceMargin = totalMaintenanceMargin;
            this.TotalInitialMarginRate = totalInitialMarginRate;
            this.TotalMaintenanceMarginRate = totalMaintenanceMarginRate;
            this.TotalAvailableMargin = totalAvailableMargin;
        }

        /// <summary>
        /// User ID of the cross margin account. 0 means that the subaccount has not yet opened a cross margin account
        /// </summary>
        /// <value>User ID of the cross margin account. 0 means that the subaccount has not yet opened a cross margin account</value>
        [DataMember(Name="user_id")]
        public long UserId { get; set; }

        /// <summary>
        /// Whether account is locked
        /// </summary>
        /// <value>Whether account is locked</value>
        [DataMember(Name="locked")]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets Balances
        /// </summary>
        [DataMember(Name="balances")]
        public Dictionary<string, CrossMarginBalance1> Balances { get; set; }

        /// <summary>
        /// Total account value in USDT, i.e., the sum of all currencies&#39; &#x60;(available+freeze)*price*discount&#x60;
        /// </summary>
        /// <value>Total account value in USDT, i.e., the sum of all currencies&#39; &#x60;(available+freeze)*price*discount&#x60;</value>
        [DataMember(Name="total")]
        public string Total { get; set; }

        /// <summary>
        /// Total borrowed value in USDT, i.e., the sum of all currencies&#39; &#x60;borrowed*price*discount&#x60;
        /// </summary>
        /// <value>Total borrowed value in USDT, i.e., the sum of all currencies&#39; &#x60;borrowed*price*discount&#x60;</value>
        [DataMember(Name="borrowed")]
        public string Borrowed { get; set; }

        /// <summary>
        /// Total borrowed value in USDT * borrowed factor
        /// </summary>
        /// <value>Total borrowed value in USDT * borrowed factor</value>
        [DataMember(Name="borrowed_net")]
        public string BorrowedNet { get; set; }

        /// <summary>
        /// Total net assets in USDT
        /// </summary>
        /// <value>Total net assets in USDT</value>
        [DataMember(Name="net")]
        public string Net { get; set; }

        /// <summary>
        /// Position leverage
        /// </summary>
        /// <value>Position leverage</value>
        [DataMember(Name="leverage")]
        public string Leverage { get; set; }

        /// <summary>
        /// Total unpaid interests in USDT, i.e., the sum of all currencies&#39; &#x60;interest*price*discount&#x60;
        /// </summary>
        /// <value>Total unpaid interests in USDT, i.e., the sum of all currencies&#39; &#x60;interest*price*discount&#x60;</value>
        [DataMember(Name="interest")]
        public string Interest { get; set; }

        /// <summary>
        /// Risk rate. When it belows 110%, liquidation will be triggered. Calculation formula: &#x60;total / (borrowed+interest)&#x60;
        /// </summary>
        /// <value>Risk rate. When it belows 110%, liquidation will be triggered. Calculation formula: &#x60;total / (borrowed+interest)&#x60;</value>
        [DataMember(Name="risk")]
        public string Risk { get; set; }

        /// <summary>
        /// Total initial margin
        /// </summary>
        /// <value>Total initial margin</value>
        [DataMember(Name="total_initial_margin")]
        public string TotalInitialMargin { get; set; }

        /// <summary>
        /// Total margin balance
        /// </summary>
        /// <value>Total margin balance</value>
        [DataMember(Name="total_margin_balance")]
        public string TotalMarginBalance { get; set; }

        /// <summary>
        /// Total maintenance margin
        /// </summary>
        /// <value>Total maintenance margin</value>
        [DataMember(Name="total_maintenance_margin")]
        public string TotalMaintenanceMargin { get; set; }

        /// <summary>
        /// Total initial margin rate
        /// </summary>
        /// <value>Total initial margin rate</value>
        [DataMember(Name="total_initial_margin_rate")]
        public string TotalInitialMarginRate { get; set; }

        /// <summary>
        /// Total maintenance margin rate
        /// </summary>
        /// <value>Total maintenance margin rate</value>
        [DataMember(Name="total_maintenance_margin_rate")]
        public string TotalMaintenanceMarginRate { get; set; }

        /// <summary>
        /// Total available margin
        /// </summary>
        /// <value>Total available margin</value>
        [DataMember(Name="total_available_margin")]
        public string TotalAvailableMargin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubCrossMarginAccount {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Borrowed: ").Append(Borrowed).Append("\n");
            sb.Append("  BorrowedNet: ").Append(BorrowedNet).Append("\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  TotalInitialMargin: ").Append(TotalInitialMargin).Append("\n");
            sb.Append("  TotalMarginBalance: ").Append(TotalMarginBalance).Append("\n");
            sb.Append("  TotalMaintenanceMargin: ").Append(TotalMaintenanceMargin).Append("\n");
            sb.Append("  TotalInitialMarginRate: ").Append(TotalInitialMarginRate).Append("\n");
            sb.Append("  TotalMaintenanceMarginRate: ").Append(TotalMaintenanceMarginRate).Append("\n");
            sb.Append("  TotalAvailableMargin: ").Append(TotalAvailableMargin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubCrossMarginAccount);
        }

        /// <summary>
        /// Returns true if SubCrossMarginAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of SubCrossMarginAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubCrossMarginAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                ) && 
                (
                    this.Balances == input.Balances ||
                    this.Balances != null &&
                    input.Balances != null &&
                    this.Balances.SequenceEqual(input.Balances)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Borrowed == input.Borrowed ||
                    (this.Borrowed != null &&
                    this.Borrowed.Equals(input.Borrowed))
                ) && 
                (
                    this.BorrowedNet == input.BorrowedNet ||
                    (this.BorrowedNet != null &&
                    this.BorrowedNet.Equals(input.BorrowedNet))
                ) && 
                (
                    this.Net == input.Net ||
                    (this.Net != null &&
                    this.Net.Equals(input.Net))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.Interest == input.Interest ||
                    (this.Interest != null &&
                    this.Interest.Equals(input.Interest))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.TotalInitialMargin == input.TotalInitialMargin ||
                    (this.TotalInitialMargin != null &&
                    this.TotalInitialMargin.Equals(input.TotalInitialMargin))
                ) && 
                (
                    this.TotalMarginBalance == input.TotalMarginBalance ||
                    (this.TotalMarginBalance != null &&
                    this.TotalMarginBalance.Equals(input.TotalMarginBalance))
                ) && 
                (
                    this.TotalMaintenanceMargin == input.TotalMaintenanceMargin ||
                    (this.TotalMaintenanceMargin != null &&
                    this.TotalMaintenanceMargin.Equals(input.TotalMaintenanceMargin))
                ) && 
                (
                    this.TotalInitialMarginRate == input.TotalInitialMarginRate ||
                    (this.TotalInitialMarginRate != null &&
                    this.TotalInitialMarginRate.Equals(input.TotalInitialMarginRate))
                ) && 
                (
                    this.TotalMaintenanceMarginRate == input.TotalMaintenanceMarginRate ||
                    (this.TotalMaintenanceMarginRate != null &&
                    this.TotalMaintenanceMarginRate.Equals(input.TotalMaintenanceMarginRate))
                ) && 
                (
                    this.TotalAvailableMargin == input.TotalAvailableMargin ||
                    (this.TotalAvailableMargin != null &&
                    this.TotalAvailableMargin.Equals(input.TotalAvailableMargin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.Balances != null)
                    hashCode = hashCode * 59 + this.Balances.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Borrowed != null)
                    hashCode = hashCode * 59 + this.Borrowed.GetHashCode();
                if (this.BorrowedNet != null)
                    hashCode = hashCode * 59 + this.BorrowedNet.GetHashCode();
                if (this.Net != null)
                    hashCode = hashCode * 59 + this.Net.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.Interest != null)
                    hashCode = hashCode * 59 + this.Interest.GetHashCode();
                if (this.Risk != null)
                    hashCode = hashCode * 59 + this.Risk.GetHashCode();
                if (this.TotalInitialMargin != null)
                    hashCode = hashCode * 59 + this.TotalInitialMargin.GetHashCode();
                if (this.TotalMarginBalance != null)
                    hashCode = hashCode * 59 + this.TotalMarginBalance.GetHashCode();
                if (this.TotalMaintenanceMargin != null)
                    hashCode = hashCode * 59 + this.TotalMaintenanceMargin.GetHashCode();
                if (this.TotalInitialMarginRate != null)
                    hashCode = hashCode * 59 + this.TotalInitialMarginRate.GetHashCode();
                if (this.TotalMaintenanceMarginRate != null)
                    hashCode = hashCode * 59 + this.TotalMaintenanceMarginRate.GetHashCode();
                if (this.TotalAvailableMargin != null)
                    hashCode = hashCode * 59 + this.TotalAvailableMargin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
