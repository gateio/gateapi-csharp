/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// CollateralAlign
    /// </summary>
    [DataContract]
    public partial class CollateralAlign :  IEquatable<CollateralAlign>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralAlign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CollateralAlign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralAlign" /> class.
        /// </summary>
        /// <param name="orderId">Order ID (required).</param>
        /// <param name="collateralCurrency">Collateral (required).</param>
        /// <param name="collateralAmount">Collateral amount (required).</param>
        /// <param name="type">Operation types: append - for adding collateral, redeem - for withdrawing collateral (required).</param>
        public CollateralAlign(long orderId = default(long), string collateralCurrency = default(string), string collateralAmount = default(string), string type = default(string))
        {
            this.OrderId = orderId;
            // to ensure "collateralCurrency" is required (not null)
            this.CollateralCurrency = collateralCurrency ?? throw new ArgumentNullException("collateralCurrency", "collateralCurrency is a required property for CollateralAlign and cannot be null");
            // to ensure "collateralAmount" is required (not null)
            this.CollateralAmount = collateralAmount ?? throw new ArgumentNullException("collateralAmount", "collateralAmount is a required property for CollateralAlign and cannot be null");
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type", "type is a required property for CollateralAlign and cannot be null");
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Collateral
        /// </summary>
        /// <value>Collateral</value>
        [DataMember(Name="collateral_currency")]
        public string CollateralCurrency { get; set; }

        /// <summary>
        /// Collateral amount
        /// </summary>
        /// <value>Collateral amount</value>
        [DataMember(Name="collateral_amount")]
        public string CollateralAmount { get; set; }

        /// <summary>
        /// Operation types: append - for adding collateral, redeem - for withdrawing collateral
        /// </summary>
        /// <value>Operation types: append - for adding collateral, redeem - for withdrawing collateral</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollateralAlign {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CollateralCurrency: ").Append(CollateralCurrency).Append("\n");
            sb.Append("  CollateralAmount: ").Append(CollateralAmount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralAlign);
        }

        /// <summary>
        /// Returns true if CollateralAlign instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralAlign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralAlign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.CollateralCurrency == input.CollateralCurrency ||
                    (this.CollateralCurrency != null &&
                    this.CollateralCurrency.Equals(input.CollateralCurrency))
                ) && 
                (
                    this.CollateralAmount == input.CollateralAmount ||
                    (this.CollateralAmount != null &&
                    this.CollateralAmount.Equals(input.CollateralAmount))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.CollateralCurrency != null)
                    hashCode = hashCode * 59 + this.CollateralCurrency.GetHashCode();
                if (this.CollateralAmount != null)
                    hashCode = hashCode * 59 + this.CollateralAmount.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
