/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SwapCoinStruct
    /// </summary>
    [DataContract]
    public partial class SwapCoinStruct :  IEquatable<SwapCoinStruct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwapCoinStruct" /> class.
        /// </summary>
        /// <param name="id">Order ID.</param>
        /// <param name="uid">User ID.</param>
        /// <param name="coin">Currency.</param>
        /// <param name="type">Type: 0-Lock, 1-Certificate.</param>
        /// <param name="amount">Amount.</param>
        /// <param name="exchangeRate">Exchange Ratio.</param>
        /// <param name="pid">Plan ID.</param>
        /// <param name="status">status 1-success.</param>
        /// <param name="createStamp">Transaction timestamp.</param>
        public SwapCoinStruct(int id = default(int), int uid = default(int), string coin = default(string), int type = default(int), string amount = default(string), string exchangeRate = default(string), int pid = default(int), int status = default(int), int createStamp = default(int))
        {
            this.Id = id;
            this.Uid = uid;
            this.Coin = coin;
            this.Type = type;
            this.Amount = amount;
            this.ExchangeRate = exchangeRate;
            this.Pid = pid;
            this.Status = status;
            this.CreateStamp = createStamp;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="uid")]
        public int Uid { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="coin")]
        public string Coin { get; set; }

        /// <summary>
        /// Type: 0-Lock, 1-Certificate
        /// </summary>
        /// <value>Type: 0-Lock, 1-Certificate</value>
        [DataMember(Name="type")]
        public int Type { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Exchange Ratio
        /// </summary>
        /// <value>Exchange Ratio</value>
        [DataMember(Name="exchange_rate")]
        public string ExchangeRate { get; set; }

        /// <summary>
        /// Plan ID
        /// </summary>
        /// <value>Plan ID</value>
        [DataMember(Name="pid")]
        public int Pid { get; set; }

        /// <summary>
        /// status 1-success
        /// </summary>
        /// <value>status 1-success</value>
        [DataMember(Name="status")]
        public int Status { get; set; }

        /// <summary>
        /// Transaction timestamp
        /// </summary>
        /// <value>Transaction timestamp</value>
        [DataMember(Name="createStamp")]
        public int CreateStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwapCoinStruct {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreateStamp: ").Append(CreateStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwapCoinStruct);
        }

        /// <summary>
        /// Returns true if SwapCoinStruct instances are equal
        /// </summary>
        /// <param name="input">Instance of SwapCoinStruct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwapCoinStruct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Uid == input.Uid ||
                    this.Uid.Equals(input.Uid)
                ) && 
                (
                    this.Coin == input.Coin ||
                    (this.Coin != null &&
                    this.Coin.Equals(input.Coin))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Pid == input.Pid ||
                    this.Pid.Equals(input.Pid)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreateStamp == input.CreateStamp ||
                    this.CreateStamp.Equals(input.CreateStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Coin != null)
                    hashCode = hashCode * 59 + this.Coin.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                hashCode = hashCode * 59 + this.Pid.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.CreateStamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
