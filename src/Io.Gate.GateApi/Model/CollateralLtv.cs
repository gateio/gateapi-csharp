/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Collateral Ratio
    /// </summary>
    [DataContract]
    public partial class CollateralLtv :  IEquatable<CollateralLtv>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralLtv" /> class.
        /// </summary>
        /// <param name="initLtv">The initial collateralization rate.</param>
        /// <param name="alertLtv">Warning collateralization ratio.</param>
        /// <param name="liquidateLtv">The liquidation collateralization rate.</param>
        public CollateralLtv(string initLtv = default(string), string alertLtv = default(string), string liquidateLtv = default(string))
        {
            this.InitLtv = initLtv;
            this.AlertLtv = alertLtv;
            this.LiquidateLtv = liquidateLtv;
        }

        /// <summary>
        /// The initial collateralization rate
        /// </summary>
        /// <value>The initial collateralization rate</value>
        [DataMember(Name="init_ltv")]
        public string InitLtv { get; set; }

        /// <summary>
        /// Warning collateralization ratio
        /// </summary>
        /// <value>Warning collateralization ratio</value>
        [DataMember(Name="alert_ltv")]
        public string AlertLtv { get; set; }

        /// <summary>
        /// The liquidation collateralization rate
        /// </summary>
        /// <value>The liquidation collateralization rate</value>
        [DataMember(Name="liquidate_ltv")]
        public string LiquidateLtv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollateralLtv {\n");
            sb.Append("  InitLtv: ").Append(InitLtv).Append("\n");
            sb.Append("  AlertLtv: ").Append(AlertLtv).Append("\n");
            sb.Append("  LiquidateLtv: ").Append(LiquidateLtv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralLtv);
        }

        /// <summary>
        /// Returns true if CollateralLtv instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralLtv to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralLtv input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InitLtv == input.InitLtv ||
                    (this.InitLtv != null &&
                    this.InitLtv.Equals(input.InitLtv))
                ) && 
                (
                    this.AlertLtv == input.AlertLtv ||
                    (this.AlertLtv != null &&
                    this.AlertLtv.Equals(input.AlertLtv))
                ) && 
                (
                    this.LiquidateLtv == input.LiquidateLtv ||
                    (this.LiquidateLtv != null &&
                    this.LiquidateLtv.Equals(input.LiquidateLtv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitLtv != null)
                    hashCode = hashCode * 59 + this.InitLtv.GetHashCode();
                if (this.AlertLtv != null)
                    hashCode = hashCode * 59 + this.AlertLtv.GetHashCode();
                if (this.LiquidateLtv != null)
                    hashCode = hashCode * 59 + this.LiquidateLtv.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
