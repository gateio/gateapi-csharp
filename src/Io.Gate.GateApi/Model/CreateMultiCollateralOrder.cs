/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// CreateMultiCollateralOrder
    /// </summary>
    [DataContract]
    public partial class CreateMultiCollateralOrder :  IEquatable<CreateMultiCollateralOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMultiCollateralOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMultiCollateralOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMultiCollateralOrder" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="orderType">current - current, fixed - fixed, if not specified, default to current.</param>
        /// <param name="fixedType">Fixed interest rate loan period: 7d - 7 days, 30d - 30 days. Must be provided for fixed.</param>
        /// <param name="fixedRate">Fixed interest rate, must be specified for fixed.</param>
        /// <param name="autoRenew">Fixed interest rate, automatic renewal.</param>
        /// <param name="autoRepay">Fixed interest rate, automatic repayment.</param>
        /// <param name="borrowCurrency">Borrowed currency (required).</param>
        /// <param name="borrowAmount">Borrowing amount (required).</param>
        /// <param name="collateralCurrencies">Collateral currency and amount.</param>
        public CreateMultiCollateralOrder(string orderId = default(string), string orderType = default(string), string fixedType = default(string), string fixedRate = default(string), bool autoRenew = default(bool), bool autoRepay = default(bool), string borrowCurrency = default(string), string borrowAmount = default(string), List<CollateralCurrency> collateralCurrencies = default(List<CollateralCurrency>))
        {
            // to ensure "borrowCurrency" is required (not null)
            this.BorrowCurrency = borrowCurrency ?? throw new ArgumentNullException("borrowCurrency", "borrowCurrency is a required property for CreateMultiCollateralOrder and cannot be null");
            // to ensure "borrowAmount" is required (not null)
            this.BorrowAmount = borrowAmount ?? throw new ArgumentNullException("borrowAmount", "borrowAmount is a required property for CreateMultiCollateralOrder and cannot be null");
            this.OrderId = orderId;
            this.OrderType = orderType;
            this.FixedType = fixedType;
            this.FixedRate = fixedRate;
            this.AutoRenew = autoRenew;
            this.AutoRepay = autoRepay;
            this.CollateralCurrencies = collateralCurrencies;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public string OrderId { get; set; }

        /// <summary>
        /// current - current, fixed - fixed, if not specified, default to current
        /// </summary>
        /// <value>current - current, fixed - fixed, if not specified, default to current</value>
        [DataMember(Name="order_type")]
        public string OrderType { get; set; }

        /// <summary>
        /// Fixed interest rate loan period: 7d - 7 days, 30d - 30 days. Must be provided for fixed
        /// </summary>
        /// <value>Fixed interest rate loan period: 7d - 7 days, 30d - 30 days. Must be provided for fixed</value>
        [DataMember(Name="fixed_type")]
        public string FixedType { get; set; }

        /// <summary>
        /// Fixed interest rate, must be specified for fixed
        /// </summary>
        /// <value>Fixed interest rate, must be specified for fixed</value>
        [DataMember(Name="fixed_rate")]
        public string FixedRate { get; set; }

        /// <summary>
        /// Fixed interest rate, automatic renewal
        /// </summary>
        /// <value>Fixed interest rate, automatic renewal</value>
        [DataMember(Name="auto_renew")]
        public bool AutoRenew { get; set; }

        /// <summary>
        /// Fixed interest rate, automatic repayment
        /// </summary>
        /// <value>Fixed interest rate, automatic repayment</value>
        [DataMember(Name="auto_repay")]
        public bool AutoRepay { get; set; }

        /// <summary>
        /// Borrowed currency
        /// </summary>
        /// <value>Borrowed currency</value>
        [DataMember(Name="borrow_currency")]
        public string BorrowCurrency { get; set; }

        /// <summary>
        /// Borrowing amount
        /// </summary>
        /// <value>Borrowing amount</value>
        [DataMember(Name="borrow_amount")]
        public string BorrowAmount { get; set; }

        /// <summary>
        /// Collateral currency and amount
        /// </summary>
        /// <value>Collateral currency and amount</value>
        [DataMember(Name="collateral_currencies")]
        public List<CollateralCurrency> CollateralCurrencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMultiCollateralOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  FixedType: ").Append(FixedType).Append("\n");
            sb.Append("  FixedRate: ").Append(FixedRate).Append("\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  AutoRepay: ").Append(AutoRepay).Append("\n");
            sb.Append("  BorrowCurrency: ").Append(BorrowCurrency).Append("\n");
            sb.Append("  BorrowAmount: ").Append(BorrowAmount).Append("\n");
            sb.Append("  CollateralCurrencies: ").Append(CollateralCurrencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMultiCollateralOrder);
        }

        /// <summary>
        /// Returns true if CreateMultiCollateralOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMultiCollateralOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMultiCollateralOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.FixedType == input.FixedType ||
                    (this.FixedType != null &&
                    this.FixedType.Equals(input.FixedType))
                ) && 
                (
                    this.FixedRate == input.FixedRate ||
                    (this.FixedRate != null &&
                    this.FixedRate.Equals(input.FixedRate))
                ) && 
                (
                    this.AutoRenew == input.AutoRenew ||
                    this.AutoRenew.Equals(input.AutoRenew)
                ) && 
                (
                    this.AutoRepay == input.AutoRepay ||
                    this.AutoRepay.Equals(input.AutoRepay)
                ) && 
                (
                    this.BorrowCurrency == input.BorrowCurrency ||
                    (this.BorrowCurrency != null &&
                    this.BorrowCurrency.Equals(input.BorrowCurrency))
                ) && 
                (
                    this.BorrowAmount == input.BorrowAmount ||
                    (this.BorrowAmount != null &&
                    this.BorrowAmount.Equals(input.BorrowAmount))
                ) && 
                (
                    this.CollateralCurrencies == input.CollateralCurrencies ||
                    this.CollateralCurrencies != null &&
                    input.CollateralCurrencies != null &&
                    this.CollateralCurrencies.SequenceEqual(input.CollateralCurrencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.FixedType != null)
                    hashCode = hashCode * 59 + this.FixedType.GetHashCode();
                if (this.FixedRate != null)
                    hashCode = hashCode * 59 + this.FixedRate.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRenew.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRepay.GetHashCode();
                if (this.BorrowCurrency != null)
                    hashCode = hashCode * 59 + this.BorrowCurrency.GetHashCode();
                if (this.BorrowAmount != null)
                    hashCode = hashCode * 59 + this.BorrowAmount.GetHashCode();
                if (this.CollateralCurrencies != null)
                    hashCode = hashCode * 59 + this.CollateralCurrencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
