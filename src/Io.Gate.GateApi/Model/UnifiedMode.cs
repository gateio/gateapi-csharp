/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UnifiedMode
    /// </summary>
    [DataContract]
    public partial class UnifiedMode :  IEquatable<UnifiedMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedMode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnifiedMode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedMode" /> class.
        /// </summary>
        /// <param name="mode">Portfolio mode - cross_margin : cross margin - usdt_futures : usdt futures (required).</param>
        /// <param name="enabled">Is it enabled? (required).</param>
        public UnifiedMode(string mode = default(string), bool enabled = default(bool))
        {
            // to ensure "mode" is required (not null)
            this.Mode = mode ?? throw new ArgumentNullException("mode", "mode is a required property for UnifiedMode and cannot be null");
            this.Enabled = enabled;
        }

        /// <summary>
        /// Portfolio mode - cross_margin : cross margin - usdt_futures : usdt futures
        /// </summary>
        /// <value>Portfolio mode - cross_margin : cross margin - usdt_futures : usdt futures</value>
        [DataMember(Name="mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Is it enabled?
        /// </summary>
        /// <value>Is it enabled?</value>
        [DataMember(Name="enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedMode {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedMode);
        }

        /// <summary>
        /// Returns true if UnifiedMode instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
