/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Structured order
    /// </summary>
    [DataContract]
    public partial class StructuredOrderList :  IEquatable<StructuredOrderList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredOrderList" /> class.
        /// </summary>
        /// <param name="id">Order ID.</param>
        /// <param name="pid">Plan ID.</param>
        /// <param name="lockCoin">Locked coin.</param>
        /// <param name="amount">Locked amount.</param>
        /// <param name="status">Status:   SUCCESS - SUCCESS  FAILED - FAILED DONE - DONE.</param>
        /// <param name="income">Income.</param>
        /// <param name="createTime">Created time.</param>
        public StructuredOrderList(int id = default(int), string pid = default(string), string lockCoin = default(string), string amount = default(string), string status = default(string), string income = default(string), int createTime = default(int))
        {
            this.Id = id;
            this.Pid = pid;
            this.LockCoin = lockCoin;
            this.Amount = amount;
            this.Status = status;
            this.Income = income;
            this.CreateTime = createTime;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="id")]
        public int Id { get; set; }

        /// <summary>
        /// Plan ID
        /// </summary>
        /// <value>Plan ID</value>
        [DataMember(Name="pid")]
        public string Pid { get; set; }

        /// <summary>
        /// Locked coin
        /// </summary>
        /// <value>Locked coin</value>
        [DataMember(Name="lock_coin")]
        public string LockCoin { get; set; }

        /// <summary>
        /// Locked amount
        /// </summary>
        /// <value>Locked amount</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Status:   SUCCESS - SUCCESS  FAILED - FAILED DONE - DONE
        /// </summary>
        /// <value>Status:   SUCCESS - SUCCESS  FAILED - FAILED DONE - DONE</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Income
        /// </summary>
        /// <value>Income</value>
        [DataMember(Name="income")]
        public string Income { get; set; }

        /// <summary>
        /// Created time
        /// </summary>
        /// <value>Created time</value>
        [DataMember(Name="create_time")]
        public int CreateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructuredOrderList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  LockCoin: ").Append(LockCoin).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Income: ").Append(Income).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredOrderList);
        }

        /// <summary>
        /// Returns true if StructuredOrderList instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredOrderList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredOrderList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.LockCoin == input.LockCoin ||
                    (this.LockCoin != null &&
                    this.LockCoin.Equals(input.LockCoin))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Income == input.Income ||
                    (this.Income != null &&
                    this.Income.Equals(input.Income))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    this.CreateTime.Equals(input.CreateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.LockCoin != null)
                    hashCode = hashCode * 59 + this.LockCoin.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Income != null)
                    hashCode = hashCode * 59 + this.Income.GetHashCode();
                hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
