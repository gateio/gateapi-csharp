/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// OptionsAccount
    /// </summary>
    [DataContract]
    public partial class OptionsAccount :  IEquatable<OptionsAccount>, IValidatableObject
    {
        /// <summary>
        /// ｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式
        /// </summary>
        /// <value>｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式</value>
        public enum MarginModeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2

        }

        /// <summary>
        /// ｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式
        /// </summary>
        /// <value>｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式</value>
        [DataMember(Name="margin_mode")]
        public MarginModeEnum? MarginMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsAccount" /> class.
        /// </summary>
        /// <param name="user">User ID.</param>
        /// <param name="total">Account balance.</param>
        /// <param name="positionValue">Position value, long position value is positive, short position value is negative.</param>
        /// <param name="equity">Account equity, the sum of account balance and position value.</param>
        /// <param name="shortEnabled">If the account is allowed to short.</param>
        /// <param name="mmpEnabled">Whether to enable MMP.</param>
        /// <param name="liqTriggered">Whether to trigger position liquidation.</param>
        /// <param name="marginMode">｜ 保证金模式： - 0：经典现货保证金模式 - 1：跨币种保证金模式 - 2：组合保证金模式.</param>
        /// <param name="unrealisedPnl">Unrealized PNL.</param>
        /// <param name="initMargin">Initial position margin.</param>
        /// <param name="maintMargin">Position maintenance margin.</param>
        /// <param name="orderMargin">Order margin of unfinished orders.</param>
        /// <param name="askOrderMargin">Margin for outstanding sell orders.</param>
        /// <param name="bidOrderMargin">Margin for outstanding buy orders.</param>
        /// <param name="available">Available balance to transfer out or trade.</param>
        /// <param name="point">POINT amount.</param>
        /// <param name="currency">Settle currency.</param>
        /// <param name="ordersLimit">Maximum number of outstanding orders.</param>
        /// <param name="positionNotionalLimit">Notional value upper limit, including the nominal value of positions and outstanding orders.</param>
        public OptionsAccount(long user = default(long), string total = default(string), string positionValue = default(string), string equity = default(string), bool shortEnabled = default(bool), bool mmpEnabled = default(bool), bool liqTriggered = default(bool), MarginModeEnum? marginMode = default(MarginModeEnum?), string unrealisedPnl = default(string), string initMargin = default(string), string maintMargin = default(string), string orderMargin = default(string), string askOrderMargin = default(string), string bidOrderMargin = default(string), string available = default(string), string point = default(string), string currency = default(string), int ordersLimit = default(int), long positionNotionalLimit = default(long))
        {
            this.User = user;
            this.Total = total;
            this.PositionValue = positionValue;
            this.Equity = equity;
            this.ShortEnabled = shortEnabled;
            this.MmpEnabled = mmpEnabled;
            this.LiqTriggered = liqTriggered;
            this.MarginMode = marginMode;
            this.UnrealisedPnl = unrealisedPnl;
            this.InitMargin = initMargin;
            this.MaintMargin = maintMargin;
            this.OrderMargin = orderMargin;
            this.AskOrderMargin = askOrderMargin;
            this.BidOrderMargin = bidOrderMargin;
            this.Available = available;
            this.Point = point;
            this.Currency = currency;
            this.OrdersLimit = ordersLimit;
            this.PositionNotionalLimit = positionNotionalLimit;
        }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user")]
        public long User { get; set; }

        /// <summary>
        /// Account balance
        /// </summary>
        /// <value>Account balance</value>
        [DataMember(Name="total")]
        public string Total { get; set; }

        /// <summary>
        /// Position value, long position value is positive, short position value is negative
        /// </summary>
        /// <value>Position value, long position value is positive, short position value is negative</value>
        [DataMember(Name="position_value")]
        public string PositionValue { get; set; }

        /// <summary>
        /// Account equity, the sum of account balance and position value
        /// </summary>
        /// <value>Account equity, the sum of account balance and position value</value>
        [DataMember(Name="equity")]
        public string Equity { get; set; }

        /// <summary>
        /// If the account is allowed to short
        /// </summary>
        /// <value>If the account is allowed to short</value>
        [DataMember(Name="short_enabled")]
        public bool ShortEnabled { get; set; }

        /// <summary>
        /// Whether to enable MMP
        /// </summary>
        /// <value>Whether to enable MMP</value>
        [DataMember(Name="mmp_enabled")]
        public bool MmpEnabled { get; set; }

        /// <summary>
        /// Whether to trigger position liquidation
        /// </summary>
        /// <value>Whether to trigger position liquidation</value>
        [DataMember(Name="liq_triggered")]
        public bool LiqTriggered { get; set; }

        /// <summary>
        /// Unrealized PNL
        /// </summary>
        /// <value>Unrealized PNL</value>
        [DataMember(Name="unrealised_pnl")]
        public string UnrealisedPnl { get; set; }

        /// <summary>
        /// Initial position margin
        /// </summary>
        /// <value>Initial position margin</value>
        [DataMember(Name="init_margin")]
        public string InitMargin { get; set; }

        /// <summary>
        /// Position maintenance margin
        /// </summary>
        /// <value>Position maintenance margin</value>
        [DataMember(Name="maint_margin")]
        public string MaintMargin { get; set; }

        /// <summary>
        /// Order margin of unfinished orders
        /// </summary>
        /// <value>Order margin of unfinished orders</value>
        [DataMember(Name="order_margin")]
        public string OrderMargin { get; set; }

        /// <summary>
        /// Margin for outstanding sell orders
        /// </summary>
        /// <value>Margin for outstanding sell orders</value>
        [DataMember(Name="ask_order_margin")]
        public string AskOrderMargin { get; set; }

        /// <summary>
        /// Margin for outstanding buy orders
        /// </summary>
        /// <value>Margin for outstanding buy orders</value>
        [DataMember(Name="bid_order_margin")]
        public string BidOrderMargin { get; set; }

        /// <summary>
        /// Available balance to transfer out or trade
        /// </summary>
        /// <value>Available balance to transfer out or trade</value>
        [DataMember(Name="available")]
        public string Available { get; set; }

        /// <summary>
        /// POINT amount
        /// </summary>
        /// <value>POINT amount</value>
        [DataMember(Name="point")]
        public string Point { get; set; }

        /// <summary>
        /// Settle currency
        /// </summary>
        /// <value>Settle currency</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Maximum number of outstanding orders
        /// </summary>
        /// <value>Maximum number of outstanding orders</value>
        [DataMember(Name="orders_limit")]
        public int OrdersLimit { get; set; }

        /// <summary>
        /// Notional value upper limit, including the nominal value of positions and outstanding orders
        /// </summary>
        /// <value>Notional value upper limit, including the nominal value of positions and outstanding orders</value>
        [DataMember(Name="position_notional_limit")]
        public long PositionNotionalLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionsAccount {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  PositionValue: ").Append(PositionValue).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  ShortEnabled: ").Append(ShortEnabled).Append("\n");
            sb.Append("  MmpEnabled: ").Append(MmpEnabled).Append("\n");
            sb.Append("  LiqTriggered: ").Append(LiqTriggered).Append("\n");
            sb.Append("  MarginMode: ").Append(MarginMode).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  InitMargin: ").Append(InitMargin).Append("\n");
            sb.Append("  MaintMargin: ").Append(MaintMargin).Append("\n");
            sb.Append("  OrderMargin: ").Append(OrderMargin).Append("\n");
            sb.Append("  AskOrderMargin: ").Append(AskOrderMargin).Append("\n");
            sb.Append("  BidOrderMargin: ").Append(BidOrderMargin).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Point: ").Append(Point).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OrdersLimit: ").Append(OrdersLimit).Append("\n");
            sb.Append("  PositionNotionalLimit: ").Append(PositionNotionalLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionsAccount);
        }

        /// <summary>
        /// Returns true if OptionsAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionsAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.PositionValue == input.PositionValue ||
                    (this.PositionValue != null &&
                    this.PositionValue.Equals(input.PositionValue))
                ) && 
                (
                    this.Equity == input.Equity ||
                    (this.Equity != null &&
                    this.Equity.Equals(input.Equity))
                ) && 
                (
                    this.ShortEnabled == input.ShortEnabled ||
                    this.ShortEnabled.Equals(input.ShortEnabled)
                ) && 
                (
                    this.MmpEnabled == input.MmpEnabled ||
                    this.MmpEnabled.Equals(input.MmpEnabled)
                ) && 
                (
                    this.LiqTriggered == input.LiqTriggered ||
                    this.LiqTriggered.Equals(input.LiqTriggered)
                ) && 
                (
                    this.MarginMode == input.MarginMode ||
                    this.MarginMode.Equals(input.MarginMode)
                ) && 
                (
                    this.UnrealisedPnl == input.UnrealisedPnl ||
                    (this.UnrealisedPnl != null &&
                    this.UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) && 
                (
                    this.InitMargin == input.InitMargin ||
                    (this.InitMargin != null &&
                    this.InitMargin.Equals(input.InitMargin))
                ) && 
                (
                    this.MaintMargin == input.MaintMargin ||
                    (this.MaintMargin != null &&
                    this.MaintMargin.Equals(input.MaintMargin))
                ) && 
                (
                    this.OrderMargin == input.OrderMargin ||
                    (this.OrderMargin != null &&
                    this.OrderMargin.Equals(input.OrderMargin))
                ) && 
                (
                    this.AskOrderMargin == input.AskOrderMargin ||
                    (this.AskOrderMargin != null &&
                    this.AskOrderMargin.Equals(input.AskOrderMargin))
                ) && 
                (
                    this.BidOrderMargin == input.BidOrderMargin ||
                    (this.BidOrderMargin != null &&
                    this.BidOrderMargin.Equals(input.BidOrderMargin))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.Point == input.Point ||
                    (this.Point != null &&
                    this.Point.Equals(input.Point))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.OrdersLimit == input.OrdersLimit ||
                    this.OrdersLimit.Equals(input.OrdersLimit)
                ) && 
                (
                    this.PositionNotionalLimit == input.PositionNotionalLimit ||
                    this.PositionNotionalLimit.Equals(input.PositionNotionalLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.PositionValue != null)
                    hashCode = hashCode * 59 + this.PositionValue.GetHashCode();
                if (this.Equity != null)
                    hashCode = hashCode * 59 + this.Equity.GetHashCode();
                hashCode = hashCode * 59 + this.ShortEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.MmpEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.LiqTriggered.GetHashCode();
                hashCode = hashCode * 59 + this.MarginMode.GetHashCode();
                if (this.UnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnl.GetHashCode();
                if (this.InitMargin != null)
                    hashCode = hashCode * 59 + this.InitMargin.GetHashCode();
                if (this.MaintMargin != null)
                    hashCode = hashCode * 59 + this.MaintMargin.GetHashCode();
                if (this.OrderMargin != null)
                    hashCode = hashCode * 59 + this.OrderMargin.GetHashCode();
                if (this.AskOrderMargin != null)
                    hashCode = hashCode * 59 + this.AskOrderMargin.GetHashCode();
                if (this.BidOrderMargin != null)
                    hashCode = hashCode * 59 + this.BidOrderMargin.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.Point != null)
                    hashCode = hashCode * 59 + this.Point.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                hashCode = hashCode * 59 + this.OrdersLimit.GetHashCode();
                hashCode = hashCode * 59 + this.PositionNotionalLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
