/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Spot order detail
    /// </summary>
    [DataContract]
    public partial class SpotPriceTriggeredOrder :  IEquatable<SpotPriceTriggeredOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpotPriceTriggeredOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpotPriceTriggeredOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpotPriceTriggeredOrder" /> class.
        /// </summary>
        /// <param name="trigger">trigger (required).</param>
        /// <param name="put">put (required).</param>
        /// <param name="market">Currency pair (required).</param>
        public SpotPriceTriggeredOrder(SpotPriceTrigger trigger = default(SpotPriceTrigger), SpotPricePutOrder put = default(SpotPricePutOrder), string market = default(string))
        {
            // to ensure "trigger" is required (not null)
            this.Trigger = trigger ?? throw new ArgumentNullException("trigger", "trigger is a required property for SpotPriceTriggeredOrder and cannot be null");
            // to ensure "put" is required (not null)
            this.Put = put ?? throw new ArgumentNullException("put", "put is a required property for SpotPriceTriggeredOrder and cannot be null");
            // to ensure "market" is required (not null)
            this.Market = market ?? throw new ArgumentNullException("market", "market is a required property for SpotPriceTriggeredOrder and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name="trigger")]
        public SpotPriceTrigger Trigger { get; set; }

        /// <summary>
        /// Gets or Sets Put
        /// </summary>
        [DataMember(Name="put")]
        public SpotPricePutOrder Put { get; set; }

        /// <summary>
        /// Auto order ID
        /// </summary>
        /// <value>Auto order ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; private set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int User { get; private set; }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="market")]
        public string Market { get; set; }

        /// <summary>
        /// Creation time
        /// </summary>
        /// <value>Creation time</value>
        [DataMember(Name="ctime", EmitDefaultValue=false)]
        public long Ctime { get; private set; }

        /// <summary>
        /// Finished time
        /// </summary>
        /// <value>Finished time</value>
        [DataMember(Name="ftime", EmitDefaultValue=false)]
        public long Ftime { get; private set; }

        /// <summary>
        /// ID of the newly created order on condition triggered
        /// </summary>
        /// <value>ID of the newly created order on condition triggered</value>
        [DataMember(Name="fired_order_id", EmitDefaultValue=false)]
        public long FiredOrderId { get; private set; }

        /// <summary>
        /// Status  - open: open - cancelled: being manually cancelled - finish: successfully executed - failed: failed to execute - expired - expired 
        /// </summary>
        /// <value>Status  - open: open - cancelled: being manually cancelled - finish: successfully executed - failed: failed to execute - expired - expired </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Additional remarks on how the order was finished
        /// </summary>
        /// <value>Additional remarks on how the order was finished</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpotPriceTriggeredOrder {\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Put: ").Append(Put).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Ctime: ").Append(Ctime).Append("\n");
            sb.Append("  Ftime: ").Append(Ftime).Append("\n");
            sb.Append("  FiredOrderId: ").Append(FiredOrderId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpotPriceTriggeredOrder);
        }

        /// <summary>
        /// Returns true if SpotPriceTriggeredOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of SpotPriceTriggeredOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpotPriceTriggeredOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Put == input.Put ||
                    (this.Put != null &&
                    this.Put.Equals(input.Put))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.Ctime == input.Ctime ||
                    this.Ctime.Equals(input.Ctime)
                ) && 
                (
                    this.Ftime == input.Ftime ||
                    this.Ftime.Equals(input.Ftime)
                ) && 
                (
                    this.FiredOrderId == input.FiredOrderId ||
                    this.FiredOrderId.Equals(input.FiredOrderId)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Put != null)
                    hashCode = hashCode * 59 + this.Put.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                hashCode = hashCode * 59 + this.Ctime.GetHashCode();
                hashCode = hashCode * 59 + this.Ftime.GetHashCode();
                hashCode = hashCode * 59 + this.FiredOrderId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
