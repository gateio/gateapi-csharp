/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Input for the portfolio margin calculator.
    /// </summary>
    [DataContract]
    public partial class UnifiedPortfolioInput :  IEquatable<UnifiedPortfolioInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedPortfolioInput" /> class.
        /// </summary>
        /// <param name="spotBalances">Spot.</param>
        /// <param name="spotOrders">Spot orders.</param>
        /// <param name="futuresPositions">Futures positions.</param>
        /// <param name="futuresOrders">Futures order.</param>
        /// <param name="optionsPositions">Options positions.</param>
        /// <param name="optionsOrders">Option orders.</param>
        /// <param name="spotHedge">Whether to enable spot hedging..</param>
        public UnifiedPortfolioInput(List<MockSpotBalance> spotBalances = default(List<MockSpotBalance>), List<MockSpotOrder> spotOrders = default(List<MockSpotOrder>), List<MockFuturesPosition> futuresPositions = default(List<MockFuturesPosition>), List<MockFuturesOrder> futuresOrders = default(List<MockFuturesOrder>), List<MockOptionsPosition> optionsPositions = default(List<MockOptionsPosition>), List<MockOptionsOrder> optionsOrders = default(List<MockOptionsOrder>), bool spotHedge = default(bool))
        {
            this.SpotBalances = spotBalances;
            this.SpotOrders = spotOrders;
            this.FuturesPositions = futuresPositions;
            this.FuturesOrders = futuresOrders;
            this.OptionsPositions = optionsPositions;
            this.OptionsOrders = optionsOrders;
            this.SpotHedge = spotHedge;
        }

        /// <summary>
        /// Spot
        /// </summary>
        /// <value>Spot</value>
        [DataMember(Name="spot_balances")]
        public List<MockSpotBalance> SpotBalances { get; set; }

        /// <summary>
        /// Spot orders
        /// </summary>
        /// <value>Spot orders</value>
        [DataMember(Name="spot_orders")]
        public List<MockSpotOrder> SpotOrders { get; set; }

        /// <summary>
        /// Futures positions
        /// </summary>
        /// <value>Futures positions</value>
        [DataMember(Name="futures_positions")]
        public List<MockFuturesPosition> FuturesPositions { get; set; }

        /// <summary>
        /// Futures order
        /// </summary>
        /// <value>Futures order</value>
        [DataMember(Name="futures_orders")]
        public List<MockFuturesOrder> FuturesOrders { get; set; }

        /// <summary>
        /// Options positions
        /// </summary>
        /// <value>Options positions</value>
        [DataMember(Name="options_positions")]
        public List<MockOptionsPosition> OptionsPositions { get; set; }

        /// <summary>
        /// Option orders
        /// </summary>
        /// <value>Option orders</value>
        [DataMember(Name="options_orders")]
        public List<MockOptionsOrder> OptionsOrders { get; set; }

        /// <summary>
        /// Whether to enable spot hedging.
        /// </summary>
        /// <value>Whether to enable spot hedging.</value>
        [DataMember(Name="spot_hedge")]
        public bool SpotHedge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedPortfolioInput {\n");
            sb.Append("  SpotBalances: ").Append(SpotBalances).Append("\n");
            sb.Append("  SpotOrders: ").Append(SpotOrders).Append("\n");
            sb.Append("  FuturesPositions: ").Append(FuturesPositions).Append("\n");
            sb.Append("  FuturesOrders: ").Append(FuturesOrders).Append("\n");
            sb.Append("  OptionsPositions: ").Append(OptionsPositions).Append("\n");
            sb.Append("  OptionsOrders: ").Append(OptionsOrders).Append("\n");
            sb.Append("  SpotHedge: ").Append(SpotHedge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedPortfolioInput);
        }

        /// <summary>
        /// Returns true if UnifiedPortfolioInput instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedPortfolioInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedPortfolioInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpotBalances == input.SpotBalances ||
                    this.SpotBalances != null &&
                    input.SpotBalances != null &&
                    this.SpotBalances.SequenceEqual(input.SpotBalances)
                ) && 
                (
                    this.SpotOrders == input.SpotOrders ||
                    this.SpotOrders != null &&
                    input.SpotOrders != null &&
                    this.SpotOrders.SequenceEqual(input.SpotOrders)
                ) && 
                (
                    this.FuturesPositions == input.FuturesPositions ||
                    this.FuturesPositions != null &&
                    input.FuturesPositions != null &&
                    this.FuturesPositions.SequenceEqual(input.FuturesPositions)
                ) && 
                (
                    this.FuturesOrders == input.FuturesOrders ||
                    this.FuturesOrders != null &&
                    input.FuturesOrders != null &&
                    this.FuturesOrders.SequenceEqual(input.FuturesOrders)
                ) && 
                (
                    this.OptionsPositions == input.OptionsPositions ||
                    this.OptionsPositions != null &&
                    input.OptionsPositions != null &&
                    this.OptionsPositions.SequenceEqual(input.OptionsPositions)
                ) && 
                (
                    this.OptionsOrders == input.OptionsOrders ||
                    this.OptionsOrders != null &&
                    input.OptionsOrders != null &&
                    this.OptionsOrders.SequenceEqual(input.OptionsOrders)
                ) && 
                (
                    this.SpotHedge == input.SpotHedge ||
                    this.SpotHedge.Equals(input.SpotHedge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpotBalances != null)
                    hashCode = hashCode * 59 + this.SpotBalances.GetHashCode();
                if (this.SpotOrders != null)
                    hashCode = hashCode * 59 + this.SpotOrders.GetHashCode();
                if (this.FuturesPositions != null)
                    hashCode = hashCode * 59 + this.FuturesPositions.GetHashCode();
                if (this.FuturesOrders != null)
                    hashCode = hashCode * 59 + this.FuturesOrders.GetHashCode();
                if (this.OptionsPositions != null)
                    hashCode = hashCode * 59 + this.OptionsPositions.GetHashCode();
                if (this.OptionsOrders != null)
                    hashCode = hashCode * 59 + this.OptionsOrders.GetHashCode();
                hashCode = hashCode * 59 + this.SpotHedge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
