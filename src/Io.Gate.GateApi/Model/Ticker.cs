/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Ticker
    /// </summary>
    [DataContract]
    public partial class Ticker :  IEquatable<Ticker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticker" /> class.
        /// </summary>
        /// <param name="currencyPair">Currency pair.</param>
        /// <param name="last">Last trading price.</param>
        /// <param name="lowestAsk">Recent lowest ask.</param>
        /// <param name="lowestSize">The latest seller&#39;s lowest price quantity; does not exist for batch query; exists for single query, and is empty if there is no data.</param>
        /// <param name="highestBid">Recent highest bid.</param>
        /// <param name="highestSize">The latest buyer&#39;s highest price quantity; does not exist for batch query; exists for single query, and is empty if there is no data.</param>
        /// <param name="changePercentage">Change percentage in the last 24h.</param>
        /// <param name="changeUtc0">utc0 timezone, the percentage change in the last 24 hours.</param>
        /// <param name="changeUtc8">utc8 timezone, the percentage change in the last 24 hours.</param>
        /// <param name="baseVolume">Base currency trade volume in the last 24h.</param>
        /// <param name="quoteVolume">Quote currency trade volume in the last 24h.</param>
        /// <param name="high24h">Highest price in 24h.</param>
        /// <param name="low24h">Lowest price in 24h.</param>
        /// <param name="etfNetValue">ETF net value.</param>
        /// <param name="etfPreNetValue">ETF previous net value at re-balancing time.</param>
        /// <param name="etfPreTimestamp">ETF previous re-balancing time.</param>
        /// <param name="etfLeverage">ETF current leverage.</param>
        public Ticker(string currencyPair = default(string), string last = default(string), string lowestAsk = default(string), string lowestSize = default(string), string highestBid = default(string), string highestSize = default(string), string changePercentage = default(string), string changeUtc0 = default(string), string changeUtc8 = default(string), string baseVolume = default(string), string quoteVolume = default(string), string high24h = default(string), string low24h = default(string), string etfNetValue = default(string), string etfPreNetValue = default(string), long? etfPreTimestamp = default(long?), string etfLeverage = default(string))
        {
            this.CurrencyPair = currencyPair;
            this.Last = last;
            this.LowestAsk = lowestAsk;
            this.LowestSize = lowestSize;
            this.HighestBid = highestBid;
            this.HighestSize = highestSize;
            this.ChangePercentage = changePercentage;
            this.ChangeUtc0 = changeUtc0;
            this.ChangeUtc8 = changeUtc8;
            this.BaseVolume = baseVolume;
            this.QuoteVolume = quoteVolume;
            this.High24h = high24h;
            this.Low24h = low24h;
            this.EtfNetValue = etfNetValue;
            this.EtfPreNetValue = etfPreNetValue;
            this.EtfPreTimestamp = etfPreTimestamp;
            this.EtfLeverage = etfLeverage;
        }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="currency_pair")]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// Last trading price
        /// </summary>
        /// <value>Last trading price</value>
        [DataMember(Name="last")]
        public string Last { get; set; }

        /// <summary>
        /// Recent lowest ask
        /// </summary>
        /// <value>Recent lowest ask</value>
        [DataMember(Name="lowest_ask")]
        public string LowestAsk { get; set; }

        /// <summary>
        /// The latest seller&#39;s lowest price quantity; does not exist for batch query; exists for single query, and is empty if there is no data
        /// </summary>
        /// <value>The latest seller&#39;s lowest price quantity; does not exist for batch query; exists for single query, and is empty if there is no data</value>
        [DataMember(Name="lowest_size")]
        public string LowestSize { get; set; }

        /// <summary>
        /// Recent highest bid
        /// </summary>
        /// <value>Recent highest bid</value>
        [DataMember(Name="highest_bid")]
        public string HighestBid { get; set; }

        /// <summary>
        /// The latest buyer&#39;s highest price quantity; does not exist for batch query; exists for single query, and is empty if there is no data
        /// </summary>
        /// <value>The latest buyer&#39;s highest price quantity; does not exist for batch query; exists for single query, and is empty if there is no data</value>
        [DataMember(Name="highest_size")]
        public string HighestSize { get; set; }

        /// <summary>
        /// Change percentage in the last 24h
        /// </summary>
        /// <value>Change percentage in the last 24h</value>
        [DataMember(Name="change_percentage")]
        public string ChangePercentage { get; set; }

        /// <summary>
        /// utc0 timezone, the percentage change in the last 24 hours
        /// </summary>
        /// <value>utc0 timezone, the percentage change in the last 24 hours</value>
        [DataMember(Name="change_utc0")]
        public string ChangeUtc0 { get; set; }

        /// <summary>
        /// utc8 timezone, the percentage change in the last 24 hours
        /// </summary>
        /// <value>utc8 timezone, the percentage change in the last 24 hours</value>
        [DataMember(Name="change_utc8")]
        public string ChangeUtc8 { get; set; }

        /// <summary>
        /// Base currency trade volume in the last 24h
        /// </summary>
        /// <value>Base currency trade volume in the last 24h</value>
        [DataMember(Name="base_volume")]
        public string BaseVolume { get; set; }

        /// <summary>
        /// Quote currency trade volume in the last 24h
        /// </summary>
        /// <value>Quote currency trade volume in the last 24h</value>
        [DataMember(Name="quote_volume")]
        public string QuoteVolume { get; set; }

        /// <summary>
        /// Highest price in 24h
        /// </summary>
        /// <value>Highest price in 24h</value>
        [DataMember(Name="high_24h")]
        public string High24h { get; set; }

        /// <summary>
        /// Lowest price in 24h
        /// </summary>
        /// <value>Lowest price in 24h</value>
        [DataMember(Name="low_24h")]
        public string Low24h { get; set; }

        /// <summary>
        /// ETF net value
        /// </summary>
        /// <value>ETF net value</value>
        [DataMember(Name="etf_net_value")]
        public string EtfNetValue { get; set; }

        /// <summary>
        /// ETF previous net value at re-balancing time
        /// </summary>
        /// <value>ETF previous net value at re-balancing time</value>
        [DataMember(Name="etf_pre_net_value")]
        public string EtfPreNetValue { get; set; }

        /// <summary>
        /// ETF previous re-balancing time
        /// </summary>
        /// <value>ETF previous re-balancing time</value>
        [DataMember(Name="etf_pre_timestamp")]
        public long? EtfPreTimestamp { get; set; }

        /// <summary>
        /// ETF current leverage
        /// </summary>
        /// <value>ETF current leverage</value>
        [DataMember(Name="etf_leverage")]
        public string EtfLeverage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticker {\n");
            sb.Append("  CurrencyPair: ").Append(CurrencyPair).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  LowestAsk: ").Append(LowestAsk).Append("\n");
            sb.Append("  LowestSize: ").Append(LowestSize).Append("\n");
            sb.Append("  HighestBid: ").Append(HighestBid).Append("\n");
            sb.Append("  HighestSize: ").Append(HighestSize).Append("\n");
            sb.Append("  ChangePercentage: ").Append(ChangePercentage).Append("\n");
            sb.Append("  ChangeUtc0: ").Append(ChangeUtc0).Append("\n");
            sb.Append("  ChangeUtc8: ").Append(ChangeUtc8).Append("\n");
            sb.Append("  BaseVolume: ").Append(BaseVolume).Append("\n");
            sb.Append("  QuoteVolume: ").Append(QuoteVolume).Append("\n");
            sb.Append("  High24h: ").Append(High24h).Append("\n");
            sb.Append("  Low24h: ").Append(Low24h).Append("\n");
            sb.Append("  EtfNetValue: ").Append(EtfNetValue).Append("\n");
            sb.Append("  EtfPreNetValue: ").Append(EtfPreNetValue).Append("\n");
            sb.Append("  EtfPreTimestamp: ").Append(EtfPreTimestamp).Append("\n");
            sb.Append("  EtfLeverage: ").Append(EtfLeverage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ticker);
        }

        /// <summary>
        /// Returns true if Ticker instances are equal
        /// </summary>
        /// <param name="input">Instance of Ticker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyPair == input.CurrencyPair ||
                    (this.CurrencyPair != null &&
                    this.CurrencyPair.Equals(input.CurrencyPair))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.LowestAsk == input.LowestAsk ||
                    (this.LowestAsk != null &&
                    this.LowestAsk.Equals(input.LowestAsk))
                ) && 
                (
                    this.LowestSize == input.LowestSize ||
                    (this.LowestSize != null &&
                    this.LowestSize.Equals(input.LowestSize))
                ) && 
                (
                    this.HighestBid == input.HighestBid ||
                    (this.HighestBid != null &&
                    this.HighestBid.Equals(input.HighestBid))
                ) && 
                (
                    this.HighestSize == input.HighestSize ||
                    (this.HighestSize != null &&
                    this.HighestSize.Equals(input.HighestSize))
                ) && 
                (
                    this.ChangePercentage == input.ChangePercentage ||
                    (this.ChangePercentage != null &&
                    this.ChangePercentage.Equals(input.ChangePercentage))
                ) && 
                (
                    this.ChangeUtc0 == input.ChangeUtc0 ||
                    (this.ChangeUtc0 != null &&
                    this.ChangeUtc0.Equals(input.ChangeUtc0))
                ) && 
                (
                    this.ChangeUtc8 == input.ChangeUtc8 ||
                    (this.ChangeUtc8 != null &&
                    this.ChangeUtc8.Equals(input.ChangeUtc8))
                ) && 
                (
                    this.BaseVolume == input.BaseVolume ||
                    (this.BaseVolume != null &&
                    this.BaseVolume.Equals(input.BaseVolume))
                ) && 
                (
                    this.QuoteVolume == input.QuoteVolume ||
                    (this.QuoteVolume != null &&
                    this.QuoteVolume.Equals(input.QuoteVolume))
                ) && 
                (
                    this.High24h == input.High24h ||
                    (this.High24h != null &&
                    this.High24h.Equals(input.High24h))
                ) && 
                (
                    this.Low24h == input.Low24h ||
                    (this.Low24h != null &&
                    this.Low24h.Equals(input.Low24h))
                ) && 
                (
                    this.EtfNetValue == input.EtfNetValue ||
                    (this.EtfNetValue != null &&
                    this.EtfNetValue.Equals(input.EtfNetValue))
                ) && 
                (
                    this.EtfPreNetValue == input.EtfPreNetValue ||
                    (this.EtfPreNetValue != null &&
                    this.EtfPreNetValue.Equals(input.EtfPreNetValue))
                ) && 
                (
                    this.EtfPreTimestamp == input.EtfPreTimestamp ||
                    (this.EtfPreTimestamp != null &&
                    this.EtfPreTimestamp.Equals(input.EtfPreTimestamp))
                ) && 
                (
                    this.EtfLeverage == input.EtfLeverage ||
                    (this.EtfLeverage != null &&
                    this.EtfLeverage.Equals(input.EtfLeverage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyPair != null)
                    hashCode = hashCode * 59 + this.CurrencyPair.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.LowestAsk != null)
                    hashCode = hashCode * 59 + this.LowestAsk.GetHashCode();
                if (this.LowestSize != null)
                    hashCode = hashCode * 59 + this.LowestSize.GetHashCode();
                if (this.HighestBid != null)
                    hashCode = hashCode * 59 + this.HighestBid.GetHashCode();
                if (this.HighestSize != null)
                    hashCode = hashCode * 59 + this.HighestSize.GetHashCode();
                if (this.ChangePercentage != null)
                    hashCode = hashCode * 59 + this.ChangePercentage.GetHashCode();
                if (this.ChangeUtc0 != null)
                    hashCode = hashCode * 59 + this.ChangeUtc0.GetHashCode();
                if (this.ChangeUtc8 != null)
                    hashCode = hashCode * 59 + this.ChangeUtc8.GetHashCode();
                if (this.BaseVolume != null)
                    hashCode = hashCode * 59 + this.BaseVolume.GetHashCode();
                if (this.QuoteVolume != null)
                    hashCode = hashCode * 59 + this.QuoteVolume.GetHashCode();
                if (this.High24h != null)
                    hashCode = hashCode * 59 + this.High24h.GetHashCode();
                if (this.Low24h != null)
                    hashCode = hashCode * 59 + this.Low24h.GetHashCode();
                if (this.EtfNetValue != null)
                    hashCode = hashCode * 59 + this.EtfNetValue.GetHashCode();
                if (this.EtfPreNetValue != null)
                    hashCode = hashCode * 59 + this.EtfPreNetValue.GetHashCode();
                if (this.EtfPreTimestamp != null)
                    hashCode = hashCode * 59 + this.EtfPreTimestamp.GetHashCode();
                if (this.EtfLeverage != null)
                    hashCode = hashCode * 59 + this.EtfLeverage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
