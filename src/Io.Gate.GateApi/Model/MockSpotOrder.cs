/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Spot orders
    /// </summary>
    [DataContract]
    public partial class MockSpotOrder :  IEquatable<MockSpotOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MockSpotOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MockSpotOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MockSpotOrder" /> class.
        /// </summary>
        /// <param name="currencyPairs">Currency pair (required).</param>
        /// <param name="orderPrice">Price (required).</param>
        /// <param name="count">Initial order quantity for spot trading pairs, not involved in actual calculation.  Currently only supports three currencies: BTC, ETH..</param>
        /// <param name="left">Unfilled quantity, involved in actual calculation. (required).</param>
        /// <param name="type">Order type, sell - sell order, buy - buy order. (required).</param>
        public MockSpotOrder(string currencyPairs = default(string), string orderPrice = default(string), string count = default(string), string left = default(string), string type = default(string))
        {
            // to ensure "currencyPairs" is required (not null)
            this.CurrencyPairs = currencyPairs ?? throw new ArgumentNullException("currencyPairs", "currencyPairs is a required property for MockSpotOrder and cannot be null");
            // to ensure "orderPrice" is required (not null)
            this.OrderPrice = orderPrice ?? throw new ArgumentNullException("orderPrice", "orderPrice is a required property for MockSpotOrder and cannot be null");
            // to ensure "left" is required (not null)
            this.Left = left ?? throw new ArgumentNullException("left", "left is a required property for MockSpotOrder and cannot be null");
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type", "type is a required property for MockSpotOrder and cannot be null");
            this.Count = count;
        }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="currency_pairs")]
        public string CurrencyPairs { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="order_price")]
        public string OrderPrice { get; set; }

        /// <summary>
        /// Initial order quantity for spot trading pairs, not involved in actual calculation.  Currently only supports three currencies: BTC, ETH.
        /// </summary>
        /// <value>Initial order quantity for spot trading pairs, not involved in actual calculation.  Currently only supports three currencies: BTC, ETH.</value>
        [DataMember(Name="count")]
        public string Count { get; set; }

        /// <summary>
        /// Unfilled quantity, involved in actual calculation.
        /// </summary>
        /// <value>Unfilled quantity, involved in actual calculation.</value>
        [DataMember(Name="left")]
        public string Left { get; set; }

        /// <summary>
        /// Order type, sell - sell order, buy - buy order.
        /// </summary>
        /// <value>Order type, sell - sell order, buy - buy order.</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MockSpotOrder {\n");
            sb.Append("  CurrencyPairs: ").Append(CurrencyPairs).Append("\n");
            sb.Append("  OrderPrice: ").Append(OrderPrice).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MockSpotOrder);
        }

        /// <summary>
        /// Returns true if MockSpotOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of MockSpotOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MockSpotOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyPairs == input.CurrencyPairs ||
                    (this.CurrencyPairs != null &&
                    this.CurrencyPairs.Equals(input.CurrencyPairs))
                ) && 
                (
                    this.OrderPrice == input.OrderPrice ||
                    (this.OrderPrice != null &&
                    this.OrderPrice.Equals(input.OrderPrice))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyPairs != null)
                    hashCode = hashCode * 59 + this.CurrencyPairs.GetHashCode();
                if (this.OrderPrice != null)
                    hashCode = hashCode * 59 + this.OrderPrice.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Left != null)
                    hashCode = hashCode * 59 + this.Left.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
