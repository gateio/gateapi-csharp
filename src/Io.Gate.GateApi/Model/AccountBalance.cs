/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Total balances calculated with specified currency unit
    /// </summary>
    [DataContract]
    public partial class AccountBalance :  IEquatable<AccountBalance>, IValidatableObject
    {
        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum BTC for value: BTC
            /// </summary>
            [EnumMember(Value = "BTC")]
            BTC = 1,

            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 2,

            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 3,

            /// <summary>
            /// Enum USDT for value: USDT
            /// </summary>
            [EnumMember(Value = "USDT")]
            USDT = 4

        }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="currency")]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBalance" /> class.
        /// </summary>
        /// <param name="amount">Account total balance amount.</param>
        /// <param name="currency">Currency.</param>
        /// <param name="unrealisedPnl">Unrealised_pnl, this field will only appear in futures, options, delivery, and total accounts.</param>
        /// <param name="borrowed">Borrowed，this field will only appear in margin and cross_margin accounts.</param>
        public AccountBalance(string amount = default(string), CurrencyEnum? currency = default(CurrencyEnum?), string unrealisedPnl = default(string), string borrowed = default(string))
        {
            this.Amount = amount;
            this.Currency = currency;
            this.UnrealisedPnl = unrealisedPnl;
            this.Borrowed = borrowed;
        }

        /// <summary>
        /// Account total balance amount
        /// </summary>
        /// <value>Account total balance amount</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Unrealised_pnl, this field will only appear in futures, options, delivery, and total accounts
        /// </summary>
        /// <value>Unrealised_pnl, this field will only appear in futures, options, delivery, and total accounts</value>
        [DataMember(Name="unrealised_pnl")]
        public string UnrealisedPnl { get; set; }

        /// <summary>
        /// Borrowed，this field will only appear in margin and cross_margin accounts
        /// </summary>
        /// <value>Borrowed，this field will only appear in margin and cross_margin accounts</value>
        [DataMember(Name="borrowed")]
        public string Borrowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountBalance {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  Borrowed: ").Append(Borrowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountBalance);
        }

        /// <summary>
        /// Returns true if AccountBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.UnrealisedPnl == input.UnrealisedPnl ||
                    (this.UnrealisedPnl != null &&
                    this.UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) && 
                (
                    this.Borrowed == input.Borrowed ||
                    (this.Borrowed != null &&
                    this.Borrowed.Equals(input.Borrowed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.UnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnl.GetHashCode();
                if (this.Borrowed != null)
                    hashCode = hashCode * 59 + this.Borrowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
