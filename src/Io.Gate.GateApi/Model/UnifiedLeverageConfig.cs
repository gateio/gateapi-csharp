/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UnifiedLeverageConfig
    /// </summary>
    [DataContract]
    public partial class UnifiedLeverageConfig :  IEquatable<UnifiedLeverageConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedLeverageConfig" /> class.
        /// </summary>
        /// <param name="currentLeverage">Current leverage ratio.</param>
        /// <param name="minLeverage">Minimum adjustable leverage ratio.</param>
        /// <param name="maxLeverage">Maximum adjustable leverage ratio.</param>
        /// <param name="debit">Current liabilities.</param>
        /// <param name="availableMargin">Available Margin.</param>
        /// <param name="borrowable">The current leverage you can choose is.</param>
        /// <param name="exceptLeverageBorrowable">The maximum amount of margin that can be borrowed and the maximum amount of Uniloan that can be borrowed, whichever is smaller.</param>
        public UnifiedLeverageConfig(string currentLeverage = default(string), string minLeverage = default(string), string maxLeverage = default(string), string debit = default(string), string availableMargin = default(string), string borrowable = default(string), string exceptLeverageBorrowable = default(string))
        {
            this.CurrentLeverage = currentLeverage;
            this.MinLeverage = minLeverage;
            this.MaxLeverage = maxLeverage;
            this.Debit = debit;
            this.AvailableMargin = availableMargin;
            this.Borrowable = borrowable;
            this.ExceptLeverageBorrowable = exceptLeverageBorrowable;
        }

        /// <summary>
        /// Current leverage ratio
        /// </summary>
        /// <value>Current leverage ratio</value>
        [DataMember(Name="current_leverage")]
        public string CurrentLeverage { get; set; }

        /// <summary>
        /// Minimum adjustable leverage ratio
        /// </summary>
        /// <value>Minimum adjustable leverage ratio</value>
        [DataMember(Name="min_leverage")]
        public string MinLeverage { get; set; }

        /// <summary>
        /// Maximum adjustable leverage ratio
        /// </summary>
        /// <value>Maximum adjustable leverage ratio</value>
        [DataMember(Name="max_leverage")]
        public string MaxLeverage { get; set; }

        /// <summary>
        /// Current liabilities
        /// </summary>
        /// <value>Current liabilities</value>
        [DataMember(Name="debit")]
        public string Debit { get; set; }

        /// <summary>
        /// Available Margin
        /// </summary>
        /// <value>Available Margin</value>
        [DataMember(Name="available_margin")]
        public string AvailableMargin { get; set; }

        /// <summary>
        /// The current leverage you can choose is
        /// </summary>
        /// <value>The current leverage you can choose is</value>
        [DataMember(Name="borrowable")]
        public string Borrowable { get; set; }

        /// <summary>
        /// The maximum amount of margin that can be borrowed and the maximum amount of Uniloan that can be borrowed, whichever is smaller
        /// </summary>
        /// <value>The maximum amount of margin that can be borrowed and the maximum amount of Uniloan that can be borrowed, whichever is smaller</value>
        [DataMember(Name="except_leverage_borrowable")]
        public string ExceptLeverageBorrowable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedLeverageConfig {\n");
            sb.Append("  CurrentLeverage: ").Append(CurrentLeverage).Append("\n");
            sb.Append("  MinLeverage: ").Append(MinLeverage).Append("\n");
            sb.Append("  MaxLeverage: ").Append(MaxLeverage).Append("\n");
            sb.Append("  Debit: ").Append(Debit).Append("\n");
            sb.Append("  AvailableMargin: ").Append(AvailableMargin).Append("\n");
            sb.Append("  Borrowable: ").Append(Borrowable).Append("\n");
            sb.Append("  ExceptLeverageBorrowable: ").Append(ExceptLeverageBorrowable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedLeverageConfig);
        }

        /// <summary>
        /// Returns true if UnifiedLeverageConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedLeverageConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedLeverageConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentLeverage == input.CurrentLeverage ||
                    (this.CurrentLeverage != null &&
                    this.CurrentLeverage.Equals(input.CurrentLeverage))
                ) && 
                (
                    this.MinLeverage == input.MinLeverage ||
                    (this.MinLeverage != null &&
                    this.MinLeverage.Equals(input.MinLeverage))
                ) && 
                (
                    this.MaxLeverage == input.MaxLeverage ||
                    (this.MaxLeverage != null &&
                    this.MaxLeverage.Equals(input.MaxLeverage))
                ) && 
                (
                    this.Debit == input.Debit ||
                    (this.Debit != null &&
                    this.Debit.Equals(input.Debit))
                ) && 
                (
                    this.AvailableMargin == input.AvailableMargin ||
                    (this.AvailableMargin != null &&
                    this.AvailableMargin.Equals(input.AvailableMargin))
                ) && 
                (
                    this.Borrowable == input.Borrowable ||
                    (this.Borrowable != null &&
                    this.Borrowable.Equals(input.Borrowable))
                ) && 
                (
                    this.ExceptLeverageBorrowable == input.ExceptLeverageBorrowable ||
                    (this.ExceptLeverageBorrowable != null &&
                    this.ExceptLeverageBorrowable.Equals(input.ExceptLeverageBorrowable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentLeverage != null)
                    hashCode = hashCode * 59 + this.CurrentLeverage.GetHashCode();
                if (this.MinLeverage != null)
                    hashCode = hashCode * 59 + this.MinLeverage.GetHashCode();
                if (this.MaxLeverage != null)
                    hashCode = hashCode * 59 + this.MaxLeverage.GetHashCode();
                if (this.Debit != null)
                    hashCode = hashCode * 59 + this.Debit.GetHashCode();
                if (this.AvailableMargin != null)
                    hashCode = hashCode * 59 + this.AvailableMargin.GetHashCode();
                if (this.Borrowable != null)
                    hashCode = hashCode * 59 + this.Borrowable.GetHashCode();
                if (this.ExceptLeverageBorrowable != null)
                    hashCode = hashCode * 59 + this.ExceptLeverageBorrowable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
