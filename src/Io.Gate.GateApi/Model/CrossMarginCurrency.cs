/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// CrossMarginCurrency
    /// </summary>
    [DataContract]
    public partial class CrossMarginCurrency :  IEquatable<CrossMarginCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossMarginCurrency" /> class.
        /// </summary>
        /// <param name="name">Currency name.</param>
        /// <param name="rate">Minimum lending rate (hourly rate).</param>
        /// <param name="prec">Currency precision.</param>
        /// <param name="discount">Currency value discount, which is used in total value calculation.</param>
        /// <param name="minBorrowAmount">Minimum currency borrow amount. Unit is currency itself.</param>
        /// <param name="userMaxBorrowAmount">Maximum borrow value allowed per user, in USDT.</param>
        /// <param name="totalMaxBorrowAmount">Maximum borrow value allowed for this currency, in USDT.</param>
        /// <param name="price">Price change between this currency and USDT.</param>
        /// <param name="loanable">Whether currency is borrowed.</param>
        /// <param name="status">status  - &#x60;0&#x60; : disable  - &#x60;1&#x60; : enable.</param>
        public CrossMarginCurrency(string name = default(string), string rate = default(string), string prec = default(string), string discount = default(string), string minBorrowAmount = default(string), string userMaxBorrowAmount = default(string), string totalMaxBorrowAmount = default(string), string price = default(string), bool loanable = default(bool), int status = default(int))
        {
            this.Name = name;
            this.Rate = rate;
            this.Prec = prec;
            this.Discount = discount;
            this.MinBorrowAmount = minBorrowAmount;
            this.UserMaxBorrowAmount = userMaxBorrowAmount;
            this.TotalMaxBorrowAmount = totalMaxBorrowAmount;
            this.Price = price;
            this.Loanable = loanable;
            this.Status = status;
        }

        /// <summary>
        /// Currency name
        /// </summary>
        /// <value>Currency name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Minimum lending rate (hourly rate)
        /// </summary>
        /// <value>Minimum lending rate (hourly rate)</value>
        [DataMember(Name="rate")]
        public string Rate { get; set; }

        /// <summary>
        /// Currency precision
        /// </summary>
        /// <value>Currency precision</value>
        [DataMember(Name="prec")]
        public string Prec { get; set; }

        /// <summary>
        /// Currency value discount, which is used in total value calculation
        /// </summary>
        /// <value>Currency value discount, which is used in total value calculation</value>
        [DataMember(Name="discount")]
        public string Discount { get; set; }

        /// <summary>
        /// Minimum currency borrow amount. Unit is currency itself
        /// </summary>
        /// <value>Minimum currency borrow amount. Unit is currency itself</value>
        [DataMember(Name="min_borrow_amount")]
        public string MinBorrowAmount { get; set; }

        /// <summary>
        /// Maximum borrow value allowed per user, in USDT
        /// </summary>
        /// <value>Maximum borrow value allowed per user, in USDT</value>
        [DataMember(Name="user_max_borrow_amount")]
        public string UserMaxBorrowAmount { get; set; }

        /// <summary>
        /// Maximum borrow value allowed for this currency, in USDT
        /// </summary>
        /// <value>Maximum borrow value allowed for this currency, in USDT</value>
        [DataMember(Name="total_max_borrow_amount")]
        public string TotalMaxBorrowAmount { get; set; }

        /// <summary>
        /// Price change between this currency and USDT
        /// </summary>
        /// <value>Price change between this currency and USDT</value>
        [DataMember(Name="price")]
        public string Price { get; set; }

        /// <summary>
        /// Whether currency is borrowed
        /// </summary>
        /// <value>Whether currency is borrowed</value>
        [DataMember(Name="loanable")]
        public bool Loanable { get; set; }

        /// <summary>
        /// status  - &#x60;0&#x60; : disable  - &#x60;1&#x60; : enable
        /// </summary>
        /// <value>status  - &#x60;0&#x60; : disable  - &#x60;1&#x60; : enable</value>
        [DataMember(Name="status")]
        public int Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossMarginCurrency {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Prec: ").Append(Prec).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  MinBorrowAmount: ").Append(MinBorrowAmount).Append("\n");
            sb.Append("  UserMaxBorrowAmount: ").Append(UserMaxBorrowAmount).Append("\n");
            sb.Append("  TotalMaxBorrowAmount: ").Append(TotalMaxBorrowAmount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Loanable: ").Append(Loanable).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossMarginCurrency);
        }

        /// <summary>
        /// Returns true if CrossMarginCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossMarginCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossMarginCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Prec == input.Prec ||
                    (this.Prec != null &&
                    this.Prec.Equals(input.Prec))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.MinBorrowAmount == input.MinBorrowAmount ||
                    (this.MinBorrowAmount != null &&
                    this.MinBorrowAmount.Equals(input.MinBorrowAmount))
                ) && 
                (
                    this.UserMaxBorrowAmount == input.UserMaxBorrowAmount ||
                    (this.UserMaxBorrowAmount != null &&
                    this.UserMaxBorrowAmount.Equals(input.UserMaxBorrowAmount))
                ) && 
                (
                    this.TotalMaxBorrowAmount == input.TotalMaxBorrowAmount ||
                    (this.TotalMaxBorrowAmount != null &&
                    this.TotalMaxBorrowAmount.Equals(input.TotalMaxBorrowAmount))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Loanable == input.Loanable ||
                    this.Loanable.Equals(input.Loanable)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.Prec != null)
                    hashCode = hashCode * 59 + this.Prec.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.MinBorrowAmount != null)
                    hashCode = hashCode * 59 + this.MinBorrowAmount.GetHashCode();
                if (this.UserMaxBorrowAmount != null)
                    hashCode = hashCode * 59 + this.UserMaxBorrowAmount.GetHashCode();
                if (this.TotalMaxBorrowAmount != null)
                    hashCode = hashCode * 59 + this.TotalMaxBorrowAmount.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.Loanable.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
