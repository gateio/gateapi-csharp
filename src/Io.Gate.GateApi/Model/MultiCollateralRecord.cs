/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Multi-Collateral adjustment record.
    /// </summary>
    [DataContract]
    public partial class MultiCollateralRecord :  IEquatable<MultiCollateralRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCollateralRecord" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="recordId">Collateral record ID.</param>
        /// <param name="beforeLtv">The collateral ratio before adjustment.</param>
        /// <param name="afterLtv">The collateral ratio before adjustment.</param>
        /// <param name="operateTime">Operation time, timestamp in seconds..</param>
        /// <param name="borrowCurrencies">Borrowing Currency List.</param>
        /// <param name="collateralCurrencies">Collateral Currency List.</param>
        public MultiCollateralRecord(long orderId = default(long), long recordId = default(long), string beforeLtv = default(string), string afterLtv = default(string), long operateTime = default(long), List<MultiCollateralRecordCurrency> borrowCurrencies = default(List<MultiCollateralRecordCurrency>), List<MultiCollateralRecordCurrency> collateralCurrencies = default(List<MultiCollateralRecordCurrency>))
        {
            this.OrderId = orderId;
            this.RecordId = recordId;
            this.BeforeLtv = beforeLtv;
            this.AfterLtv = afterLtv;
            this.OperateTime = operateTime;
            this.BorrowCurrencies = borrowCurrencies;
            this.CollateralCurrencies = collateralCurrencies;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Collateral record ID
        /// </summary>
        /// <value>Collateral record ID</value>
        [DataMember(Name="record_id")]
        public long RecordId { get; set; }

        /// <summary>
        /// The collateral ratio before adjustment
        /// </summary>
        /// <value>The collateral ratio before adjustment</value>
        [DataMember(Name="before_ltv")]
        public string BeforeLtv { get; set; }

        /// <summary>
        /// The collateral ratio before adjustment
        /// </summary>
        /// <value>The collateral ratio before adjustment</value>
        [DataMember(Name="after_ltv")]
        public string AfterLtv { get; set; }

        /// <summary>
        /// Operation time, timestamp in seconds.
        /// </summary>
        /// <value>Operation time, timestamp in seconds.</value>
        [DataMember(Name="operate_time")]
        public long OperateTime { get; set; }

        /// <summary>
        /// Borrowing Currency List
        /// </summary>
        /// <value>Borrowing Currency List</value>
        [DataMember(Name="borrow_currencies")]
        public List<MultiCollateralRecordCurrency> BorrowCurrencies { get; set; }

        /// <summary>
        /// Collateral Currency List
        /// </summary>
        /// <value>Collateral Currency List</value>
        [DataMember(Name="collateral_currencies")]
        public List<MultiCollateralRecordCurrency> CollateralCurrencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultiCollateralRecord {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  BeforeLtv: ").Append(BeforeLtv).Append("\n");
            sb.Append("  AfterLtv: ").Append(AfterLtv).Append("\n");
            sb.Append("  OperateTime: ").Append(OperateTime).Append("\n");
            sb.Append("  BorrowCurrencies: ").Append(BorrowCurrencies).Append("\n");
            sb.Append("  CollateralCurrencies: ").Append(CollateralCurrencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultiCollateralRecord);
        }

        /// <summary>
        /// Returns true if MultiCollateralRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of MultiCollateralRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultiCollateralRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    this.RecordId.Equals(input.RecordId)
                ) && 
                (
                    this.BeforeLtv == input.BeforeLtv ||
                    (this.BeforeLtv != null &&
                    this.BeforeLtv.Equals(input.BeforeLtv))
                ) && 
                (
                    this.AfterLtv == input.AfterLtv ||
                    (this.AfterLtv != null &&
                    this.AfterLtv.Equals(input.AfterLtv))
                ) && 
                (
                    this.OperateTime == input.OperateTime ||
                    this.OperateTime.Equals(input.OperateTime)
                ) && 
                (
                    this.BorrowCurrencies == input.BorrowCurrencies ||
                    this.BorrowCurrencies != null &&
                    input.BorrowCurrencies != null &&
                    this.BorrowCurrencies.SequenceEqual(input.BorrowCurrencies)
                ) && 
                (
                    this.CollateralCurrencies == input.CollateralCurrencies ||
                    this.CollateralCurrencies != null &&
                    input.CollateralCurrencies != null &&
                    this.CollateralCurrencies.SequenceEqual(input.CollateralCurrencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.BeforeLtv != null)
                    hashCode = hashCode * 59 + this.BeforeLtv.GetHashCode();
                if (this.AfterLtv != null)
                    hashCode = hashCode * 59 + this.AfterLtv.GetHashCode();
                hashCode = hashCode * 59 + this.OperateTime.GetHashCode();
                if (this.BorrowCurrencies != null)
                    hashCode = hashCode * 59 + this.BorrowCurrencies.GetHashCode();
                if (this.CollateralCurrencies != null)
                    hashCode = hashCode * 59 + this.CollateralCurrencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
