/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// List all supported currencies in flash swap
    /// </summary>
    [DataContract]
    public partial class FlashSwapCurrencyPair :  IEquatable<FlashSwapCurrencyPair>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlashSwapCurrencyPair" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FlashSwapCurrencyPair()
        {
        }

        /// <summary>
        /// The currency pair, BTC_USDT represents selling Bitcoin (BTC) and buying Tether (USDT).
        /// </summary>
        /// <value>The currency pair, BTC_USDT represents selling Bitcoin (BTC) and buying Tether (USDT).</value>
        [DataMember(Name="currency_pair", EmitDefaultValue=false)]
        public string CurrencyPair { get; private set; }

        /// <summary>
        /// The currency to be sold
        /// </summary>
        /// <value>The currency to be sold</value>
        [DataMember(Name="sell_currency", EmitDefaultValue=false)]
        public string SellCurrency { get; private set; }

        /// <summary>
        /// The currency to be bought
        /// </summary>
        /// <value>The currency to be bought</value>
        [DataMember(Name="buy_currency", EmitDefaultValue=false)]
        public string BuyCurrency { get; private set; }

        /// <summary>
        /// The minimum quantity required for selling
        /// </summary>
        /// <value>The minimum quantity required for selling</value>
        [DataMember(Name="sell_min_amount", EmitDefaultValue=false)]
        public string SellMinAmount { get; private set; }

        /// <summary>
        /// The maximum quantity allowed for selling
        /// </summary>
        /// <value>The maximum quantity allowed for selling</value>
        [DataMember(Name="sell_max_amount", EmitDefaultValue=false)]
        public string SellMaxAmount { get; private set; }

        /// <summary>
        /// The minimum quantity required for buying
        /// </summary>
        /// <value>The minimum quantity required for buying</value>
        [DataMember(Name="buy_min_amount", EmitDefaultValue=false)]
        public string BuyMinAmount { get; private set; }

        /// <summary>
        /// The maximum quantity allowed for buying
        /// </summary>
        /// <value>The maximum quantity allowed for buying</value>
        [DataMember(Name="buy_max_amount", EmitDefaultValue=false)]
        public string BuyMaxAmount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlashSwapCurrencyPair {\n");
            sb.Append("  CurrencyPair: ").Append(CurrencyPair).Append("\n");
            sb.Append("  SellCurrency: ").Append(SellCurrency).Append("\n");
            sb.Append("  BuyCurrency: ").Append(BuyCurrency).Append("\n");
            sb.Append("  SellMinAmount: ").Append(SellMinAmount).Append("\n");
            sb.Append("  SellMaxAmount: ").Append(SellMaxAmount).Append("\n");
            sb.Append("  BuyMinAmount: ").Append(BuyMinAmount).Append("\n");
            sb.Append("  BuyMaxAmount: ").Append(BuyMaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlashSwapCurrencyPair);
        }

        /// <summary>
        /// Returns true if FlashSwapCurrencyPair instances are equal
        /// </summary>
        /// <param name="input">Instance of FlashSwapCurrencyPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlashSwapCurrencyPair input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyPair == input.CurrencyPair ||
                    (this.CurrencyPair != null &&
                    this.CurrencyPair.Equals(input.CurrencyPair))
                ) && 
                (
                    this.SellCurrency == input.SellCurrency ||
                    (this.SellCurrency != null &&
                    this.SellCurrency.Equals(input.SellCurrency))
                ) && 
                (
                    this.BuyCurrency == input.BuyCurrency ||
                    (this.BuyCurrency != null &&
                    this.BuyCurrency.Equals(input.BuyCurrency))
                ) && 
                (
                    this.SellMinAmount == input.SellMinAmount ||
                    (this.SellMinAmount != null &&
                    this.SellMinAmount.Equals(input.SellMinAmount))
                ) && 
                (
                    this.SellMaxAmount == input.SellMaxAmount ||
                    (this.SellMaxAmount != null &&
                    this.SellMaxAmount.Equals(input.SellMaxAmount))
                ) && 
                (
                    this.BuyMinAmount == input.BuyMinAmount ||
                    (this.BuyMinAmount != null &&
                    this.BuyMinAmount.Equals(input.BuyMinAmount))
                ) && 
                (
                    this.BuyMaxAmount == input.BuyMaxAmount ||
                    (this.BuyMaxAmount != null &&
                    this.BuyMaxAmount.Equals(input.BuyMaxAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyPair != null)
                    hashCode = hashCode * 59 + this.CurrencyPair.GetHashCode();
                if (this.SellCurrency != null)
                    hashCode = hashCode * 59 + this.SellCurrency.GetHashCode();
                if (this.BuyCurrency != null)
                    hashCode = hashCode * 59 + this.BuyCurrency.GetHashCode();
                if (this.SellMinAmount != null)
                    hashCode = hashCode * 59 + this.SellMinAmount.GetHashCode();
                if (this.SellMaxAmount != null)
                    hashCode = hashCode * 59 + this.SellMaxAmount.GetHashCode();
                if (this.BuyMinAmount != null)
                    hashCode = hashCode * 59 + this.BuyMinAmount.GetHashCode();
                if (this.BuyMaxAmount != null)
                    hashCode = hashCode * 59 + this.BuyMaxAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
