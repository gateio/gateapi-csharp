/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Mult Repay Record
    /// </summary>
    [DataContract]
    public partial class MultiRepayRecord :  IEquatable<MultiRepayRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiRepayRecord" /> class.
        /// </summary>
        /// <param name="orderId">Order ID.</param>
        /// <param name="recordId">Repayment record ID.</param>
        /// <param name="initLtv">The initial collateralization rate.</param>
        /// <param name="beforeLtv">Ltv before the operation.</param>
        /// <param name="afterLtv">Ltv after the operation.</param>
        /// <param name="borrowTime">Borrowing time, timestamp in seconds..</param>
        /// <param name="repayTime">Repayment time, timestamp in seconds..</param>
        /// <param name="borrowCurrencies">List of borrowing information.</param>
        /// <param name="collateralCurrencies">List of collateral information.</param>
        /// <param name="repaidCurrencies">Repay Currency List.</param>
        /// <param name="totalInterestList">Total Interest List.</param>
        /// <param name="leftRepayInterestList">List of left repay interest.</param>
        public MultiRepayRecord(long orderId = default(long), long recordId = default(long), string initLtv = default(string), string beforeLtv = default(string), string afterLtv = default(string), long borrowTime = default(long), long repayTime = default(long), List<RepayRecordCurrency> borrowCurrencies = default(List<RepayRecordCurrency>), List<RepayRecordCurrency> collateralCurrencies = default(List<RepayRecordCurrency>), List<RepayRecordRepaidCurrency> repaidCurrencies = default(List<RepayRecordRepaidCurrency>), List<RepayRecordTotalInterest> totalInterestList = default(List<RepayRecordTotalInterest>), List<RepayRecordLeftInterest> leftRepayInterestList = default(List<RepayRecordLeftInterest>))
        {
            this.OrderId = orderId;
            this.RecordId = recordId;
            this.InitLtv = initLtv;
            this.BeforeLtv = beforeLtv;
            this.AfterLtv = afterLtv;
            this.BorrowTime = borrowTime;
            this.RepayTime = repayTime;
            this.BorrowCurrencies = borrowCurrencies;
            this.CollateralCurrencies = collateralCurrencies;
            this.RepaidCurrencies = repaidCurrencies;
            this.TotalInterestList = totalInterestList;
            this.LeftRepayInterestList = leftRepayInterestList;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// Repayment record ID
        /// </summary>
        /// <value>Repayment record ID</value>
        [DataMember(Name="record_id")]
        public long RecordId { get; set; }

        /// <summary>
        /// The initial collateralization rate
        /// </summary>
        /// <value>The initial collateralization rate</value>
        [DataMember(Name="init_ltv")]
        public string InitLtv { get; set; }

        /// <summary>
        /// Ltv before the operation
        /// </summary>
        /// <value>Ltv before the operation</value>
        [DataMember(Name="before_ltv")]
        public string BeforeLtv { get; set; }

        /// <summary>
        /// Ltv after the operation
        /// </summary>
        /// <value>Ltv after the operation</value>
        [DataMember(Name="after_ltv")]
        public string AfterLtv { get; set; }

        /// <summary>
        /// Borrowing time, timestamp in seconds.
        /// </summary>
        /// <value>Borrowing time, timestamp in seconds.</value>
        [DataMember(Name="borrow_time")]
        public long BorrowTime { get; set; }

        /// <summary>
        /// Repayment time, timestamp in seconds.
        /// </summary>
        /// <value>Repayment time, timestamp in seconds.</value>
        [DataMember(Name="repay_time")]
        public long RepayTime { get; set; }

        /// <summary>
        /// List of borrowing information
        /// </summary>
        /// <value>List of borrowing information</value>
        [DataMember(Name="borrow_currencies")]
        public List<RepayRecordCurrency> BorrowCurrencies { get; set; }

        /// <summary>
        /// List of collateral information
        /// </summary>
        /// <value>List of collateral information</value>
        [DataMember(Name="collateral_currencies")]
        public List<RepayRecordCurrency> CollateralCurrencies { get; set; }

        /// <summary>
        /// Repay Currency List
        /// </summary>
        /// <value>Repay Currency List</value>
        [DataMember(Name="repaid_currencies")]
        public List<RepayRecordRepaidCurrency> RepaidCurrencies { get; set; }

        /// <summary>
        /// Total Interest List
        /// </summary>
        /// <value>Total Interest List</value>
        [DataMember(Name="total_interest_list")]
        public List<RepayRecordTotalInterest> TotalInterestList { get; set; }

        /// <summary>
        /// List of left repay interest
        /// </summary>
        /// <value>List of left repay interest</value>
        [DataMember(Name="left_repay_interest_list")]
        public List<RepayRecordLeftInterest> LeftRepayInterestList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultiRepayRecord {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  InitLtv: ").Append(InitLtv).Append("\n");
            sb.Append("  BeforeLtv: ").Append(BeforeLtv).Append("\n");
            sb.Append("  AfterLtv: ").Append(AfterLtv).Append("\n");
            sb.Append("  BorrowTime: ").Append(BorrowTime).Append("\n");
            sb.Append("  RepayTime: ").Append(RepayTime).Append("\n");
            sb.Append("  BorrowCurrencies: ").Append(BorrowCurrencies).Append("\n");
            sb.Append("  CollateralCurrencies: ").Append(CollateralCurrencies).Append("\n");
            sb.Append("  RepaidCurrencies: ").Append(RepaidCurrencies).Append("\n");
            sb.Append("  TotalInterestList: ").Append(TotalInterestList).Append("\n");
            sb.Append("  LeftRepayInterestList: ").Append(LeftRepayInterestList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultiRepayRecord);
        }

        /// <summary>
        /// Returns true if MultiRepayRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of MultiRepayRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultiRepayRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    this.RecordId.Equals(input.RecordId)
                ) && 
                (
                    this.InitLtv == input.InitLtv ||
                    (this.InitLtv != null &&
                    this.InitLtv.Equals(input.InitLtv))
                ) && 
                (
                    this.BeforeLtv == input.BeforeLtv ||
                    (this.BeforeLtv != null &&
                    this.BeforeLtv.Equals(input.BeforeLtv))
                ) && 
                (
                    this.AfterLtv == input.AfterLtv ||
                    (this.AfterLtv != null &&
                    this.AfterLtv.Equals(input.AfterLtv))
                ) && 
                (
                    this.BorrowTime == input.BorrowTime ||
                    this.BorrowTime.Equals(input.BorrowTime)
                ) && 
                (
                    this.RepayTime == input.RepayTime ||
                    this.RepayTime.Equals(input.RepayTime)
                ) && 
                (
                    this.BorrowCurrencies == input.BorrowCurrencies ||
                    this.BorrowCurrencies != null &&
                    input.BorrowCurrencies != null &&
                    this.BorrowCurrencies.SequenceEqual(input.BorrowCurrencies)
                ) && 
                (
                    this.CollateralCurrencies == input.CollateralCurrencies ||
                    this.CollateralCurrencies != null &&
                    input.CollateralCurrencies != null &&
                    this.CollateralCurrencies.SequenceEqual(input.CollateralCurrencies)
                ) && 
                (
                    this.RepaidCurrencies == input.RepaidCurrencies ||
                    this.RepaidCurrencies != null &&
                    input.RepaidCurrencies != null &&
                    this.RepaidCurrencies.SequenceEqual(input.RepaidCurrencies)
                ) && 
                (
                    this.TotalInterestList == input.TotalInterestList ||
                    this.TotalInterestList != null &&
                    input.TotalInterestList != null &&
                    this.TotalInterestList.SequenceEqual(input.TotalInterestList)
                ) && 
                (
                    this.LeftRepayInterestList == input.LeftRepayInterestList ||
                    this.LeftRepayInterestList != null &&
                    input.LeftRepayInterestList != null &&
                    this.LeftRepayInterestList.SequenceEqual(input.LeftRepayInterestList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.InitLtv != null)
                    hashCode = hashCode * 59 + this.InitLtv.GetHashCode();
                if (this.BeforeLtv != null)
                    hashCode = hashCode * 59 + this.BeforeLtv.GetHashCode();
                if (this.AfterLtv != null)
                    hashCode = hashCode * 59 + this.AfterLtv.GetHashCode();
                hashCode = hashCode * 59 + this.BorrowTime.GetHashCode();
                hashCode = hashCode * 59 + this.RepayTime.GetHashCode();
                if (this.BorrowCurrencies != null)
                    hashCode = hashCode * 59 + this.BorrowCurrencies.GetHashCode();
                if (this.CollateralCurrencies != null)
                    hashCode = hashCode * 59 + this.CollateralCurrencies.GetHashCode();
                if (this.RepaidCurrencies != null)
                    hashCode = hashCode * 59 + this.RepaidCurrencies.GetHashCode();
                if (this.TotalInterestList != null)
                    hashCode = hashCode * 59 + this.TotalInterestList.GetHashCode();
                if (this.LeftRepayInterestList != null)
                    hashCode = hashCode * 59 + this.LeftRepayInterestList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
