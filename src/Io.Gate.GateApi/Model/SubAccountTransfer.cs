/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SubAccountTransfer
    /// </summary>
    [DataContract]
    public partial class SubAccountTransfer :  IEquatable<SubAccountTransfer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubAccountTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountTransfer" /> class.
        /// </summary>
        /// <param name="subAccount">Sub account user ID (required).</param>
        /// <param name="subAccountType">操作的子账号交易账户， spot - 现货账户， futures - 永续合约账户， delivery - 交割合约账户, options - 期权账户 (default to &quot;spot&quot;).</param>
        /// <param name="currency">Transfer currency name (required).</param>
        /// <param name="amount">Transfer amount (required).</param>
        /// <param name="direction">Transfer direction. to - transfer into sub account; from - transfer out from sub account (required).</param>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters..</param>
        public SubAccountTransfer(string subAccount = default(string), string subAccountType = "spot", string currency = default(string), string amount = default(string), string direction = default(string), string clientOrderId = default(string))
        {
            // to ensure "subAccount" is required (not null)
            this.SubAccount = subAccount ?? throw new ArgumentNullException("subAccount", "subAccount is a required property for SubAccountTransfer and cannot be null");
            // to ensure "currency" is required (not null)
            this.Currency = currency ?? throw new ArgumentNullException("currency", "currency is a required property for SubAccountTransfer and cannot be null");
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount", "amount is a required property for SubAccountTransfer and cannot be null");
            // to ensure "direction" is required (not null)
            this.Direction = direction ?? throw new ArgumentNullException("direction", "direction is a required property for SubAccountTransfer and cannot be null");
            // use default value if no "subAccountType" provided
            this.SubAccountType = subAccountType ?? "spot";
            this.ClientOrderId = clientOrderId;
        }

        /// <summary>
        /// Sub account user ID
        /// </summary>
        /// <value>Sub account user ID</value>
        [DataMember(Name="sub_account")]
        public string SubAccount { get; set; }

        /// <summary>
        /// 操作的子账号交易账户， spot - 现货账户， futures - 永续合约账户， delivery - 交割合约账户, options - 期权账户
        /// </summary>
        /// <value>操作的子账号交易账户， spot - 现货账户， futures - 永续合约账户， delivery - 交割合约账户, options - 期权账户</value>
        [DataMember(Name="sub_account_type")]
        public string SubAccountType { get; set; }

        /// <summary>
        /// Transfer currency name
        /// </summary>
        /// <value>Transfer currency name</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Transfer amount
        /// </summary>
        /// <value>Transfer amount</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Transfer direction. to - transfer into sub account; from - transfer out from sub account
        /// </summary>
        /// <value>Transfer direction. to - transfer into sub account; from - transfer out from sub account</value>
        [DataMember(Name="direction")]
        public string Direction { get; set; }

        /// <summary>
        /// The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters.
        /// </summary>
        /// <value>The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters.</value>
        [DataMember(Name="client_order_id")]
        public string ClientOrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountTransfer {\n");
            sb.Append("  SubAccount: ").Append(SubAccount).Append("\n");
            sb.Append("  SubAccountType: ").Append(SubAccountType).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ClientOrderId: ").Append(ClientOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccountTransfer);
        }

        /// <summary>
        /// Returns true if SubAccountTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccountTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubAccount == input.SubAccount ||
                    (this.SubAccount != null &&
                    this.SubAccount.Equals(input.SubAccount))
                ) && 
                (
                    this.SubAccountType == input.SubAccountType ||
                    (this.SubAccountType != null &&
                    this.SubAccountType.Equals(input.SubAccountType))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.ClientOrderId == input.ClientOrderId ||
                    (this.ClientOrderId != null &&
                    this.ClientOrderId.Equals(input.ClientOrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubAccount != null)
                    hashCode = hashCode * 59 + this.SubAccount.GetHashCode();
                if (this.SubAccountType != null)
                    hashCode = hashCode * 59 + this.SubAccountType.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.ClientOrderId != null)
                    hashCode = hashCode * 59 + this.ClientOrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
