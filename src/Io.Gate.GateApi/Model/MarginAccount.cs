/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Margin account detail. &#x60;base&#x60; refers to base currency, while &#x60;quotes to quote currency
    /// </summary>
    [DataContract]
    public partial class MarginAccount :  IEquatable<MarginAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarginAccount" /> class.
        /// </summary>
        /// <param name="currencyPair">Currency pair.</param>
        /// <param name="accountType">Account type, risk - risk rate account, mmr - maintenance margin rate account, inactive - market not activated.</param>
        /// <param name="leverage">User current market leverage multiple.</param>
        /// <param name="locked">Whether account is locked.</param>
        /// <param name="risk">Leveraged Account Current Risk Rate (Returned when the Account is a Risk Rate Account).</param>
        /// <param name="mmr">Leveraged Account Current Maintenance Margin Rate (returned when the Account is a Maintenance Margin Rate Account).</param>
        /// <param name="_base">_base.</param>
        /// <param name="quote">quote.</param>
        public MarginAccount(string currencyPair = default(string), string accountType = default(string), string leverage = default(string), bool locked = default(bool), string risk = default(string), string mmr = default(string), MarginAccountCurrency _base = default(MarginAccountCurrency), MarginAccountCurrency quote = default(MarginAccountCurrency))
        {
            this.CurrencyPair = currencyPair;
            this.AccountType = accountType;
            this.Leverage = leverage;
            this.Locked = locked;
            this.Risk = risk;
            this.Mmr = mmr;
            this.Base = _base;
            this.Quote = quote;
        }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="currency_pair")]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// Account type, risk - risk rate account, mmr - maintenance margin rate account, inactive - market not activated
        /// </summary>
        /// <value>Account type, risk - risk rate account, mmr - maintenance margin rate account, inactive - market not activated</value>
        [DataMember(Name="account_type")]
        public string AccountType { get; set; }

        /// <summary>
        /// User current market leverage multiple
        /// </summary>
        /// <value>User current market leverage multiple</value>
        [DataMember(Name="leverage")]
        public string Leverage { get; set; }

        /// <summary>
        /// Whether account is locked
        /// </summary>
        /// <value>Whether account is locked</value>
        [DataMember(Name="locked")]
        public bool Locked { get; set; }

        /// <summary>
        /// Leveraged Account Current Risk Rate (Returned when the Account is a Risk Rate Account)
        /// </summary>
        /// <value>Leveraged Account Current Risk Rate (Returned when the Account is a Risk Rate Account)</value>
        [DataMember(Name="risk")]
        public string Risk { get; set; }

        /// <summary>
        /// Leveraged Account Current Maintenance Margin Rate (returned when the Account is a Maintenance Margin Rate Account)
        /// </summary>
        /// <value>Leveraged Account Current Maintenance Margin Rate (returned when the Account is a Maintenance Margin Rate Account)</value>
        [DataMember(Name="mmr")]
        public string Mmr { get; set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [DataMember(Name="base")]
        public MarginAccountCurrency Base { get; set; }

        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name="quote")]
        public MarginAccountCurrency Quote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarginAccount {\n");
            sb.Append("  CurrencyPair: ").Append(CurrencyPair).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  Mmr: ").Append(Mmr).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarginAccount);
        }

        /// <summary>
        /// Returns true if MarginAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of MarginAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarginAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyPair == input.CurrencyPair ||
                    (this.CurrencyPair != null &&
                    this.CurrencyPair.Equals(input.CurrencyPair))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.Mmr == input.Mmr ||
                    (this.Mmr != null &&
                    this.Mmr.Equals(input.Mmr))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyPair != null)
                    hashCode = hashCode * 59 + this.CurrencyPair.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.Risk != null)
                    hashCode = hashCode * 59 + this.Risk.GetHashCode();
                if (this.Mmr != null)
                    hashCode = hashCode * 59 + this.Mmr.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
