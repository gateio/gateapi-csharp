/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Quotation Response
    /// </summary>
    [DataContract]
    public partial class QuoteResponse :  IEquatable<QuoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteResponse" /> class.
        /// </summary>
        /// <param name="quoteId">The quotation ID (quote_id) is used for placing orders and is valid for 1 minute.</param>
        /// <param name="minAmount">最小下单量.</param>
        /// <param name="maxAmount">最大下单量.</param>
        /// <param name="price">Coin Price (USDT-based).</param>
        /// <param name="slippage">Slippage.</param>
        /// <param name="estimateGasFeeAmountUsdt">Estimated Network Fee (USDT-based).</param>
        /// <param name="orderFee">Slippage value of 10 represents a 10% tolerance.</param>
        /// <param name="targetTokenMinAmount">最小获得数量.</param>
        /// <param name="targetTokenMaxAmount">最大获得数量.</param>
        /// <param name="errorType">Failure Type - &#x60;0&#x60; : Success - &#x60;1&#x60; : Exceeds maximum value - &#x60;2&#x60; : Below minimum value.</param>
        public QuoteResponse(string quoteId = default(string), string minAmount = default(string), string maxAmount = default(string), string price = default(string), string slippage = default(string), string estimateGasFeeAmountUsdt = default(string), string orderFee = default(string), string targetTokenMinAmount = default(string), string targetTokenMaxAmount = default(string), int errorType = default(int))
        {
            this.QuoteId = quoteId;
            this.MinAmount = minAmount;
            this.MaxAmount = maxAmount;
            this.Price = price;
            this.Slippage = slippage;
            this.EstimateGasFeeAmountUsdt = estimateGasFeeAmountUsdt;
            this.OrderFee = orderFee;
            this.TargetTokenMinAmount = targetTokenMinAmount;
            this.TargetTokenMaxAmount = targetTokenMaxAmount;
            this.ErrorType = errorType;
        }

        /// <summary>
        /// The quotation ID (quote_id) is used for placing orders and is valid for 1 minute
        /// </summary>
        /// <value>The quotation ID (quote_id) is used for placing orders and is valid for 1 minute</value>
        [DataMember(Name="quote_id")]
        public string QuoteId { get; set; }

        /// <summary>
        /// 最小下单量
        /// </summary>
        /// <value>最小下单量</value>
        [DataMember(Name="min_amount")]
        public string MinAmount { get; set; }

        /// <summary>
        /// 最大下单量
        /// </summary>
        /// <value>最大下单量</value>
        [DataMember(Name="max_amount")]
        public string MaxAmount { get; set; }

        /// <summary>
        /// Coin Price (USDT-based)
        /// </summary>
        /// <value>Coin Price (USDT-based)</value>
        [DataMember(Name="price")]
        public string Price { get; set; }

        /// <summary>
        /// Slippage
        /// </summary>
        /// <value>Slippage</value>
        [DataMember(Name="slippage")]
        public string Slippage { get; set; }

        /// <summary>
        /// Estimated Network Fee (USDT-based)
        /// </summary>
        /// <value>Estimated Network Fee (USDT-based)</value>
        [DataMember(Name="estimate_gas_fee_amount_usdt")]
        public string EstimateGasFeeAmountUsdt { get; set; }

        /// <summary>
        /// Slippage value of 10 represents a 10% tolerance
        /// </summary>
        /// <value>Slippage value of 10 represents a 10% tolerance</value>
        [DataMember(Name="order_fee")]
        public string OrderFee { get; set; }

        /// <summary>
        /// 最小获得数量
        /// </summary>
        /// <value>最小获得数量</value>
        [DataMember(Name="target_token_min_amount")]
        public string TargetTokenMinAmount { get; set; }

        /// <summary>
        /// 最大获得数量
        /// </summary>
        /// <value>最大获得数量</value>
        [DataMember(Name="target_token_max_amount")]
        public string TargetTokenMaxAmount { get; set; }

        /// <summary>
        /// Failure Type - &#x60;0&#x60; : Success - &#x60;1&#x60; : Exceeds maximum value - &#x60;2&#x60; : Below minimum value
        /// </summary>
        /// <value>Failure Type - &#x60;0&#x60; : Success - &#x60;1&#x60; : Exceeds maximum value - &#x60;2&#x60; : Below minimum value</value>
        [DataMember(Name="error_type")]
        public int ErrorType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteResponse {\n");
            sb.Append("  QuoteId: ").Append(QuoteId).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Slippage: ").Append(Slippage).Append("\n");
            sb.Append("  EstimateGasFeeAmountUsdt: ").Append(EstimateGasFeeAmountUsdt).Append("\n");
            sb.Append("  OrderFee: ").Append(OrderFee).Append("\n");
            sb.Append("  TargetTokenMinAmount: ").Append(TargetTokenMinAmount).Append("\n");
            sb.Append("  TargetTokenMaxAmount: ").Append(TargetTokenMaxAmount).Append("\n");
            sb.Append("  ErrorType: ").Append(ErrorType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteResponse);
        }

        /// <summary>
        /// Returns true if QuoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteId == input.QuoteId ||
                    (this.QuoteId != null &&
                    this.QuoteId.Equals(input.QuoteId))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Slippage == input.Slippage ||
                    (this.Slippage != null &&
                    this.Slippage.Equals(input.Slippage))
                ) && 
                (
                    this.EstimateGasFeeAmountUsdt == input.EstimateGasFeeAmountUsdt ||
                    (this.EstimateGasFeeAmountUsdt != null &&
                    this.EstimateGasFeeAmountUsdt.Equals(input.EstimateGasFeeAmountUsdt))
                ) && 
                (
                    this.OrderFee == input.OrderFee ||
                    (this.OrderFee != null &&
                    this.OrderFee.Equals(input.OrderFee))
                ) && 
                (
                    this.TargetTokenMinAmount == input.TargetTokenMinAmount ||
                    (this.TargetTokenMinAmount != null &&
                    this.TargetTokenMinAmount.Equals(input.TargetTokenMinAmount))
                ) && 
                (
                    this.TargetTokenMaxAmount == input.TargetTokenMaxAmount ||
                    (this.TargetTokenMaxAmount != null &&
                    this.TargetTokenMaxAmount.Equals(input.TargetTokenMaxAmount))
                ) && 
                (
                    this.ErrorType == input.ErrorType ||
                    this.ErrorType.Equals(input.ErrorType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteId != null)
                    hashCode = hashCode * 59 + this.QuoteId.GetHashCode();
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Slippage != null)
                    hashCode = hashCode * 59 + this.Slippage.GetHashCode();
                if (this.EstimateGasFeeAmountUsdt != null)
                    hashCode = hashCode * 59 + this.EstimateGasFeeAmountUsdt.GetHashCode();
                if (this.OrderFee != null)
                    hashCode = hashCode * 59 + this.OrderFee.GetHashCode();
                if (this.TargetTokenMinAmount != null)
                    hashCode = hashCode * 59 + this.TargetTokenMinAmount.GetHashCode();
                if (this.TargetTokenMaxAmount != null)
                    hashCode = hashCode * 59 + this.TargetTokenMaxAmount.GetHashCode();
                hashCode = hashCode * 59 + this.ErrorType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
