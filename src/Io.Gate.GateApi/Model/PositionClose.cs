/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// PositionClose
    /// </summary>
    [DataContract]
    public partial class PositionClose :  IEquatable<PositionClose>, IValidatableObject
    {
        /// <summary>
        /// Position side, long or short
        /// </summary>
        /// <value>Position side, long or short</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 1,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 2

        }

        /// <summary>
        /// Position side, long or short
        /// </summary>
        /// <value>Position side, long or short</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public SideEnum? Side { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionClose" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PositionClose()
        {
        }

        /// <summary>
        /// Position close time
        /// </summary>
        /// <value>Position close time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public double Time { get; private set; }

        /// <summary>
        /// Futures contract
        /// </summary>
        /// <value>Futures contract</value>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string Contract { get; private set; }

        /// <summary>
        /// PNL
        /// </summary>
        /// <value>PNL</value>
        [DataMember(Name="pnl", EmitDefaultValue=false)]
        public string Pnl { get; private set; }

        /// <summary>
        /// PNL - Position P/L
        /// </summary>
        /// <value>PNL - Position P/L</value>
        [DataMember(Name="pnl_pnl", EmitDefaultValue=false)]
        public string PnlPnl { get; private set; }

        /// <summary>
        /// PNL - Funding Fees
        /// </summary>
        /// <value>PNL - Funding Fees</value>
        [DataMember(Name="pnl_fund", EmitDefaultValue=false)]
        public string PnlFund { get; private set; }

        /// <summary>
        /// PNL - Transaction Fees
        /// </summary>
        /// <value>PNL - Transaction Fees</value>
        [DataMember(Name="pnl_fee", EmitDefaultValue=false)]
        public string PnlFee { get; private set; }

        /// <summary>
        /// Text of close order
        /// </summary>
        /// <value>Text of close order</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; private set; }

        /// <summary>
        /// Max Trade Size
        /// </summary>
        /// <value>Max Trade Size</value>
        [DataMember(Name="max_size", EmitDefaultValue=false)]
        public string MaxSize { get; private set; }

        /// <summary>
        /// Cumulative closed position volume
        /// </summary>
        /// <value>Cumulative closed position volume</value>
        [DataMember(Name="accum_size", EmitDefaultValue=false)]
        public string AccumSize { get; private set; }

        /// <summary>
        /// First Open Time
        /// </summary>
        /// <value>First Open Time</value>
        [DataMember(Name="first_open_time", EmitDefaultValue=false)]
        public long FirstOpenTime { get; private set; }

        /// <summary>
        /// When &#39;side&#39; is &#39;long,&#39; it indicates the opening average price; when &#39;side&#39; is &#39;short,&#39; it indicates the closing average price.
        /// </summary>
        /// <value>When &#39;side&#39; is &#39;long,&#39; it indicates the opening average price; when &#39;side&#39; is &#39;short,&#39; it indicates the closing average price.</value>
        [DataMember(Name="long_price", EmitDefaultValue=false)]
        public string LongPrice { get; private set; }

        /// <summary>
        /// When &#39;side&#39; is &#39;long,&#39; it indicates the opening average price; when &#39;side&#39; is &#39;short,&#39; it indicates the closing average price
        /// </summary>
        /// <value>When &#39;side&#39; is &#39;long,&#39; it indicates the opening average price; when &#39;side&#39; is &#39;short,&#39; it indicates the closing average price</value>
        [DataMember(Name="short_price", EmitDefaultValue=false)]
        public string ShortPrice { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PositionClose {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Pnl: ").Append(Pnl).Append("\n");
            sb.Append("  PnlPnl: ").Append(PnlPnl).Append("\n");
            sb.Append("  PnlFund: ").Append(PnlFund).Append("\n");
            sb.Append("  PnlFee: ").Append(PnlFee).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  MaxSize: ").Append(MaxSize).Append("\n");
            sb.Append("  AccumSize: ").Append(AccumSize).Append("\n");
            sb.Append("  FirstOpenTime: ").Append(FirstOpenTime).Append("\n");
            sb.Append("  LongPrice: ").Append(LongPrice).Append("\n");
            sb.Append("  ShortPrice: ").Append(ShortPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PositionClose);
        }

        /// <summary>
        /// Returns true if PositionClose instances are equal
        /// </summary>
        /// <param name="input">Instance of PositionClose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PositionClose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) && 
                (
                    this.Pnl == input.Pnl ||
                    (this.Pnl != null &&
                    this.Pnl.Equals(input.Pnl))
                ) && 
                (
                    this.PnlPnl == input.PnlPnl ||
                    (this.PnlPnl != null &&
                    this.PnlPnl.Equals(input.PnlPnl))
                ) && 
                (
                    this.PnlFund == input.PnlFund ||
                    (this.PnlFund != null &&
                    this.PnlFund.Equals(input.PnlFund))
                ) && 
                (
                    this.PnlFee == input.PnlFee ||
                    (this.PnlFee != null &&
                    this.PnlFee.Equals(input.PnlFee))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.MaxSize == input.MaxSize ||
                    (this.MaxSize != null &&
                    this.MaxSize.Equals(input.MaxSize))
                ) && 
                (
                    this.AccumSize == input.AccumSize ||
                    (this.AccumSize != null &&
                    this.AccumSize.Equals(input.AccumSize))
                ) && 
                (
                    this.FirstOpenTime == input.FirstOpenTime ||
                    this.FirstOpenTime.Equals(input.FirstOpenTime)
                ) && 
                (
                    this.LongPrice == input.LongPrice ||
                    (this.LongPrice != null &&
                    this.LongPrice.Equals(input.LongPrice))
                ) && 
                (
                    this.ShortPrice == input.ShortPrice ||
                    (this.ShortPrice != null &&
                    this.ShortPrice.Equals(input.ShortPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Pnl != null)
                    hashCode = hashCode * 59 + this.Pnl.GetHashCode();
                if (this.PnlPnl != null)
                    hashCode = hashCode * 59 + this.PnlPnl.GetHashCode();
                if (this.PnlFund != null)
                    hashCode = hashCode * 59 + this.PnlFund.GetHashCode();
                if (this.PnlFee != null)
                    hashCode = hashCode * 59 + this.PnlFee.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.MaxSize != null)
                    hashCode = hashCode * 59 + this.MaxSize.GetHashCode();
                if (this.AccumSize != null)
                    hashCode = hashCode * 59 + this.AccumSize.GetHashCode();
                hashCode = hashCode * 59 + this.FirstOpenTime.GetHashCode();
                if (this.LongPrice != null)
                    hashCode = hashCode * 59 + this.LongPrice.GetHashCode();
                if (this.ShortPrice != null)
                    hashCode = hashCode * 59 + this.ShortPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
