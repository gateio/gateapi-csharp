/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Margin result
    /// </summary>
    [DataContract]
    public partial class MockMarginResult :  IEquatable<MockMarginResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MockMarginResult" /> class.
        /// </summary>
        /// <param name="type">Position combination type &#x60;original_position&#x60; - Original position &#x60;long_delta_original_position&#x60; - Positive delta + Original position &#x60;short_delta_original_position&#x60; - Negative delta + Original position.</param>
        /// <param name="profitLossRanges">The results of 33 pressure scenarios for MR1.</param>
        /// <param name="maxLoss">最大损失.</param>
        /// <param name="mr1">Stress testing.</param>
        /// <param name="mr2">Basis spread risk.</param>
        /// <param name="mr3">Volatility spread risk.</param>
        /// <param name="mr4">Option short risk.</param>
        public MockMarginResult(string type = default(string), List<ProfitLossRange> profitLossRanges = default(List<ProfitLossRange>), ProfitLossRange maxLoss = default(ProfitLossRange), string mr1 = default(string), string mr2 = default(string), string mr3 = default(string), string mr4 = default(string))
        {
            this.Type = type;
            this.ProfitLossRanges = profitLossRanges;
            this.MaxLoss = maxLoss;
            this.Mr1 = mr1;
            this.Mr2 = mr2;
            this.Mr3 = mr3;
            this.Mr4 = mr4;
        }

        /// <summary>
        /// Position combination type &#x60;original_position&#x60; - Original position &#x60;long_delta_original_position&#x60; - Positive delta + Original position &#x60;short_delta_original_position&#x60; - Negative delta + Original position
        /// </summary>
        /// <value>Position combination type &#x60;original_position&#x60; - Original position &#x60;long_delta_original_position&#x60; - Positive delta + Original position &#x60;short_delta_original_position&#x60; - Negative delta + Original position</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// The results of 33 pressure scenarios for MR1
        /// </summary>
        /// <value>The results of 33 pressure scenarios for MR1</value>
        [DataMember(Name="profit_loss_ranges")]
        public List<ProfitLossRange> ProfitLossRanges { get; set; }

        /// <summary>
        /// 最大损失
        /// </summary>
        /// <value>最大损失</value>
        [DataMember(Name="max_loss")]
        public ProfitLossRange MaxLoss { get; set; }

        /// <summary>
        /// Stress testing
        /// </summary>
        /// <value>Stress testing</value>
        [DataMember(Name="mr1")]
        public string Mr1 { get; set; }

        /// <summary>
        /// Basis spread risk
        /// </summary>
        /// <value>Basis spread risk</value>
        [DataMember(Name="mr2")]
        public string Mr2 { get; set; }

        /// <summary>
        /// Volatility spread risk
        /// </summary>
        /// <value>Volatility spread risk</value>
        [DataMember(Name="mr3")]
        public string Mr3 { get; set; }

        /// <summary>
        /// Option short risk
        /// </summary>
        /// <value>Option short risk</value>
        [DataMember(Name="mr4")]
        public string Mr4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MockMarginResult {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ProfitLossRanges: ").Append(ProfitLossRanges).Append("\n");
            sb.Append("  MaxLoss: ").Append(MaxLoss).Append("\n");
            sb.Append("  Mr1: ").Append(Mr1).Append("\n");
            sb.Append("  Mr2: ").Append(Mr2).Append("\n");
            sb.Append("  Mr3: ").Append(Mr3).Append("\n");
            sb.Append("  Mr4: ").Append(Mr4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MockMarginResult);
        }

        /// <summary>
        /// Returns true if MockMarginResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MockMarginResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MockMarginResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ProfitLossRanges == input.ProfitLossRanges ||
                    this.ProfitLossRanges != null &&
                    input.ProfitLossRanges != null &&
                    this.ProfitLossRanges.SequenceEqual(input.ProfitLossRanges)
                ) && 
                (
                    this.MaxLoss == input.MaxLoss ||
                    (this.MaxLoss != null &&
                    this.MaxLoss.Equals(input.MaxLoss))
                ) && 
                (
                    this.Mr1 == input.Mr1 ||
                    (this.Mr1 != null &&
                    this.Mr1.Equals(input.Mr1))
                ) && 
                (
                    this.Mr2 == input.Mr2 ||
                    (this.Mr2 != null &&
                    this.Mr2.Equals(input.Mr2))
                ) && 
                (
                    this.Mr3 == input.Mr3 ||
                    (this.Mr3 != null &&
                    this.Mr3.Equals(input.Mr3))
                ) && 
                (
                    this.Mr4 == input.Mr4 ||
                    (this.Mr4 != null &&
                    this.Mr4.Equals(input.Mr4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ProfitLossRanges != null)
                    hashCode = hashCode * 59 + this.ProfitLossRanges.GetHashCode();
                if (this.MaxLoss != null)
                    hashCode = hashCode * 59 + this.MaxLoss.GetHashCode();
                if (this.Mr1 != null)
                    hashCode = hashCode * 59 + this.Mr1.GetHashCode();
                if (this.Mr2 != null)
                    hashCode = hashCode * 59 + this.Mr2.GetHashCode();
                if (this.Mr3 != null)
                    hashCode = hashCode * 59 + this.Mr3.GetHashCode();
                if (this.Mr4 != null)
                    hashCode = hashCode * 59 + this.Mr4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
