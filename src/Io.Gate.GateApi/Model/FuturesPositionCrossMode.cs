/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// FuturesPositionCrossMode
    /// </summary>
    [DataContract]
    public partial class FuturesPositionCrossMode :  IEquatable<FuturesPositionCrossMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FuturesPositionCrossMode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FuturesPositionCrossMode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FuturesPositionCrossMode" /> class.
        /// </summary>
        /// <param name="mode">Full position-by-position model, ISOLATED-by-position, CROSS-full position (required).</param>
        /// <param name="contract">Contract Market (required).</param>
        public FuturesPositionCrossMode(string mode = default(string), string contract = default(string))
        {
            // to ensure "mode" is required (not null)
            this.Mode = mode ?? throw new ArgumentNullException("mode", "mode is a required property for FuturesPositionCrossMode and cannot be null");
            // to ensure "contract" is required (not null)
            this.Contract = contract ?? throw new ArgumentNullException("contract", "contract is a required property for FuturesPositionCrossMode and cannot be null");
        }

        /// <summary>
        /// Full position-by-position model, ISOLATED-by-position, CROSS-full position
        /// </summary>
        /// <value>Full position-by-position model, ISOLATED-by-position, CROSS-full position</value>
        [DataMember(Name="mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Contract Market
        /// </summary>
        /// <value>Contract Market</value>
        [DataMember(Name="contract")]
        public string Contract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FuturesPositionCrossMode {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FuturesPositionCrossMode);
        }

        /// <summary>
        /// Returns true if FuturesPositionCrossMode instances are equal
        /// </summary>
        /// <param name="input">Instance of FuturesPositionCrossMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FuturesPositionCrossMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
