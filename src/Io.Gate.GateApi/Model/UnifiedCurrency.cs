/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UnifiedCurrency
    /// </summary>
    [DataContract]
    public partial class UnifiedCurrency :  IEquatable<UnifiedCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedCurrency" /> class.
        /// </summary>
        /// <param name="name">Currency name.</param>
        /// <param name="prec">Currency precision.</param>
        /// <param name="minBorrowAmount">The minimum debit limit is the unit of currency.</param>
        /// <param name="userMaxBorrowAmount">The minimum debit limit is the unit of currency.</param>
        /// <param name="totalMaxBorrowAmount">The maximum debit limit for the platform is USDT.</param>
        /// <param name="loanStatus">Does the lending status  - &#x60;disable&#x60; : Loans are prohibited  - &#x60;enable&#x60;: Support lending.</param>
        public UnifiedCurrency(string name = default(string), string prec = default(string), string minBorrowAmount = default(string), string userMaxBorrowAmount = default(string), string totalMaxBorrowAmount = default(string), string loanStatus = default(string))
        {
            this.Name = name;
            this.Prec = prec;
            this.MinBorrowAmount = minBorrowAmount;
            this.UserMaxBorrowAmount = userMaxBorrowAmount;
            this.TotalMaxBorrowAmount = totalMaxBorrowAmount;
            this.LoanStatus = loanStatus;
        }

        /// <summary>
        /// Currency name
        /// </summary>
        /// <value>Currency name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Currency precision
        /// </summary>
        /// <value>Currency precision</value>
        [DataMember(Name="prec")]
        public string Prec { get; set; }

        /// <summary>
        /// The minimum debit limit is the unit of currency
        /// </summary>
        /// <value>The minimum debit limit is the unit of currency</value>
        [DataMember(Name="min_borrow_amount")]
        public string MinBorrowAmount { get; set; }

        /// <summary>
        /// The minimum debit limit is the unit of currency
        /// </summary>
        /// <value>The minimum debit limit is the unit of currency</value>
        [DataMember(Name="user_max_borrow_amount")]
        public string UserMaxBorrowAmount { get; set; }

        /// <summary>
        /// The maximum debit limit for the platform is USDT
        /// </summary>
        /// <value>The maximum debit limit for the platform is USDT</value>
        [DataMember(Name="total_max_borrow_amount")]
        public string TotalMaxBorrowAmount { get; set; }

        /// <summary>
        /// Does the lending status  - &#x60;disable&#x60; : Loans are prohibited  - &#x60;enable&#x60;: Support lending
        /// </summary>
        /// <value>Does the lending status  - &#x60;disable&#x60; : Loans are prohibited  - &#x60;enable&#x60;: Support lending</value>
        [DataMember(Name="loan_status")]
        public string LoanStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnifiedCurrency {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prec: ").Append(Prec).Append("\n");
            sb.Append("  MinBorrowAmount: ").Append(MinBorrowAmount).Append("\n");
            sb.Append("  UserMaxBorrowAmount: ").Append(UserMaxBorrowAmount).Append("\n");
            sb.Append("  TotalMaxBorrowAmount: ").Append(TotalMaxBorrowAmount).Append("\n");
            sb.Append("  LoanStatus: ").Append(LoanStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnifiedCurrency);
        }

        /// <summary>
        /// Returns true if UnifiedCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of UnifiedCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnifiedCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Prec == input.Prec ||
                    (this.Prec != null &&
                    this.Prec.Equals(input.Prec))
                ) && 
                (
                    this.MinBorrowAmount == input.MinBorrowAmount ||
                    (this.MinBorrowAmount != null &&
                    this.MinBorrowAmount.Equals(input.MinBorrowAmount))
                ) && 
                (
                    this.UserMaxBorrowAmount == input.UserMaxBorrowAmount ||
                    (this.UserMaxBorrowAmount != null &&
                    this.UserMaxBorrowAmount.Equals(input.UserMaxBorrowAmount))
                ) && 
                (
                    this.TotalMaxBorrowAmount == input.TotalMaxBorrowAmount ||
                    (this.TotalMaxBorrowAmount != null &&
                    this.TotalMaxBorrowAmount.Equals(input.TotalMaxBorrowAmount))
                ) && 
                (
                    this.LoanStatus == input.LoanStatus ||
                    (this.LoanStatus != null &&
                    this.LoanStatus.Equals(input.LoanStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Prec != null)
                    hashCode = hashCode * 59 + this.Prec.GetHashCode();
                if (this.MinBorrowAmount != null)
                    hashCode = hashCode * 59 + this.MinBorrowAmount.GetHashCode();
                if (this.UserMaxBorrowAmount != null)
                    hashCode = hashCode * 59 + this.UserMaxBorrowAmount.GetHashCode();
                if (this.TotalMaxBorrowAmount != null)
                    hashCode = hashCode * 59 + this.TotalMaxBorrowAmount.GetHashCode();
                if (this.LoanStatus != null)
                    hashCode = hashCode * 59 + this.LoanStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
