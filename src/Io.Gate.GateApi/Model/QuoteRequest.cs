/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Quotation Request
    /// </summary>
    [DataContract]
    public partial class QuoteRequest :  IEquatable<QuoteRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteRequest" /> class.
        /// </summary>
        /// <param name="currency">Trading Symbol (required).</param>
        /// <param name="side">买单或者卖单 - buy - sell (required).</param>
        /// <param name="amount">Trade Quantity - &#x60;side&#x60; : &#x60;buy&#x60; refers to the quote currency, i.e., &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; refers to the base currency (required).</param>
        /// <param name="gasMode">Trading mode affects slippage selection - &#x60;speed&#x60; : Smart mode - &#x60;custom&#x60; : Custom mode, uses &#x60;slippage&#x60; parameter (required).</param>
        /// <param name="slippage">Slippage value of 10 represents a 10% tolerance.</param>
        public QuoteRequest(string currency = default(string), string side = default(string), string amount = default(string), string gasMode = default(string), string slippage = default(string))
        {
            // to ensure "currency" is required (not null)
            this.Currency = currency ?? throw new ArgumentNullException("currency", "currency is a required property for QuoteRequest and cannot be null");
            // to ensure "side" is required (not null)
            this.Side = side ?? throw new ArgumentNullException("side", "side is a required property for QuoteRequest and cannot be null");
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount", "amount is a required property for QuoteRequest and cannot be null");
            // to ensure "gasMode" is required (not null)
            this.GasMode = gasMode ?? throw new ArgumentNullException("gasMode", "gasMode is a required property for QuoteRequest and cannot be null");
            this.Slippage = slippage;
        }

        /// <summary>
        /// Trading Symbol
        /// </summary>
        /// <value>Trading Symbol</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// 买单或者卖单 - buy - sell
        /// </summary>
        /// <value>买单或者卖单 - buy - sell</value>
        [DataMember(Name="side")]
        public string Side { get; set; }

        /// <summary>
        /// Trade Quantity - &#x60;side&#x60; : &#x60;buy&#x60; refers to the quote currency, i.e., &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; refers to the base currency
        /// </summary>
        /// <value>Trade Quantity - &#x60;side&#x60; : &#x60;buy&#x60; refers to the quote currency, i.e., &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; refers to the base currency</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Trading mode affects slippage selection - &#x60;speed&#x60; : Smart mode - &#x60;custom&#x60; : Custom mode, uses &#x60;slippage&#x60; parameter
        /// </summary>
        /// <value>Trading mode affects slippage selection - &#x60;speed&#x60; : Smart mode - &#x60;custom&#x60; : Custom mode, uses &#x60;slippage&#x60; parameter</value>
        [DataMember(Name="gas_mode")]
        public string GasMode { get; set; }

        /// <summary>
        /// Slippage value of 10 represents a 10% tolerance
        /// </summary>
        /// <value>Slippage value of 10 represents a 10% tolerance</value>
        [DataMember(Name="slippage")]
        public string Slippage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteRequest {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  GasMode: ").Append(GasMode).Append("\n");
            sb.Append("  Slippage: ").Append(Slippage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteRequest);
        }

        /// <summary>
        /// Returns true if QuoteRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.GasMode == input.GasMode ||
                    (this.GasMode != null &&
                    this.GasMode.Equals(input.GasMode))
                ) && 
                (
                    this.Slippage == input.Slippage ||
                    (this.Slippage != null &&
                    this.Slippage.Equals(input.Slippage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.GasMode != null)
                    hashCode = hashCode * 59 + this.GasMode.GetHashCode();
                if (this.Slippage != null)
                    hashCode = hashCode * 59 + this.Slippage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
