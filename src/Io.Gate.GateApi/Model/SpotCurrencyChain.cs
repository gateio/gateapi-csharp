/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SpotCurrencyChain
    /// </summary>
    [DataContract]
    public partial class SpotCurrencyChain :  IEquatable<SpotCurrencyChain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpotCurrencyChain" /> class.
        /// </summary>
        /// <param name="name">Chain name.</param>
        /// <param name="addr">token address.</param>
        /// <param name="withdrawDisabled">Whether currency&#39;s withdrawal is disabled.</param>
        /// <param name="withdrawDelayed">Whether currency&#39;s withdrawal is delayed.</param>
        /// <param name="depositDisabled">Whether currency&#39;s deposit is disabled.</param>
        public SpotCurrencyChain(string name = default(string), string addr = default(string), bool withdrawDisabled = default(bool), bool withdrawDelayed = default(bool), bool depositDisabled = default(bool))
        {
            this.Name = name;
            this.Addr = addr;
            this.WithdrawDisabled = withdrawDisabled;
            this.WithdrawDelayed = withdrawDelayed;
            this.DepositDisabled = depositDisabled;
        }

        /// <summary>
        /// Chain name
        /// </summary>
        /// <value>Chain name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// token address
        /// </summary>
        /// <value>token address</value>
        [DataMember(Name="addr")]
        public string Addr { get; set; }

        /// <summary>
        /// Whether currency&#39;s withdrawal is disabled
        /// </summary>
        /// <value>Whether currency&#39;s withdrawal is disabled</value>
        [DataMember(Name="withdraw_disabled")]
        public bool WithdrawDisabled { get; set; }

        /// <summary>
        /// Whether currency&#39;s withdrawal is delayed
        /// </summary>
        /// <value>Whether currency&#39;s withdrawal is delayed</value>
        [DataMember(Name="withdraw_delayed")]
        public bool WithdrawDelayed { get; set; }

        /// <summary>
        /// Whether currency&#39;s deposit is disabled
        /// </summary>
        /// <value>Whether currency&#39;s deposit is disabled</value>
        [DataMember(Name="deposit_disabled")]
        public bool DepositDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpotCurrencyChain {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Addr: ").Append(Addr).Append("\n");
            sb.Append("  WithdrawDisabled: ").Append(WithdrawDisabled).Append("\n");
            sb.Append("  WithdrawDelayed: ").Append(WithdrawDelayed).Append("\n");
            sb.Append("  DepositDisabled: ").Append(DepositDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpotCurrencyChain);
        }

        /// <summary>
        /// Returns true if SpotCurrencyChain instances are equal
        /// </summary>
        /// <param name="input">Instance of SpotCurrencyChain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpotCurrencyChain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Addr == input.Addr ||
                    (this.Addr != null &&
                    this.Addr.Equals(input.Addr))
                ) && 
                (
                    this.WithdrawDisabled == input.WithdrawDisabled ||
                    this.WithdrawDisabled.Equals(input.WithdrawDisabled)
                ) && 
                (
                    this.WithdrawDelayed == input.WithdrawDelayed ||
                    this.WithdrawDelayed.Equals(input.WithdrawDelayed)
                ) && 
                (
                    this.DepositDisabled == input.DepositDisabled ||
                    this.DepositDisabled.Equals(input.DepositDisabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Addr != null)
                    hashCode = hashCode * 59 + this.Addr.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawDisabled.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawDelayed.GetHashCode();
                hashCode = hashCode * 59 + this.DepositDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
