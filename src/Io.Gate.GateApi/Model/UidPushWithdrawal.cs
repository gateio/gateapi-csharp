/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UidPushWithdrawal
    /// </summary>
    [DataContract]
    public partial class UidPushWithdrawal :  IEquatable<UidPushWithdrawal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UidPushWithdrawal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UidPushWithdrawal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UidPushWithdrawal" /> class.
        /// </summary>
        /// <param name="receiveUid">Recipient UID (required).</param>
        /// <param name="currency">Currency name (required).</param>
        /// <param name="amount">Transfer amount (required).</param>
        public UidPushWithdrawal(long receiveUid = default(long), string currency = default(string), string amount = default(string))
        {
            this.ReceiveUid = receiveUid;
            // to ensure "currency" is required (not null)
            this.Currency = currency ?? throw new ArgumentNullException("currency", "currency is a required property for UidPushWithdrawal and cannot be null");
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount", "amount is a required property for UidPushWithdrawal and cannot be null");
        }

        /// <summary>
        /// Recipient UID
        /// </summary>
        /// <value>Recipient UID</value>
        [DataMember(Name="receive_uid")]
        public long ReceiveUid { get; set; }

        /// <summary>
        /// Currency name
        /// </summary>
        /// <value>Currency name</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Transfer amount
        /// </summary>
        /// <value>Transfer amount</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UidPushWithdrawal {\n");
            sb.Append("  ReceiveUid: ").Append(ReceiveUid).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UidPushWithdrawal);
        }

        /// <summary>
        /// Returns true if UidPushWithdrawal instances are equal
        /// </summary>
        /// <param name="input">Instance of UidPushWithdrawal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UidPushWithdrawal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReceiveUid == input.ReceiveUid ||
                    this.ReceiveUid.Equals(input.ReceiveUid)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ReceiveUid.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
