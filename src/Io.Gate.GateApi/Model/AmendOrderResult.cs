/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Batch order modification results
    /// </summary>
    [DataContract]
    public partial class AmendOrderResult :  IEquatable<AmendOrderResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmendOrderResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AmendOrderResult()
        {
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; private set; }

        /// <summary>
        /// Trade amount
        /// </summary>
        /// <value>Trade amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; private set; }

        /// <summary>
        /// Order price
        /// </summary>
        /// <value>Order price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; private set; }

        /// <summary>
        /// The custom data that the user remarked when amending the order
        /// </summary>
        /// <value>The custom data that the user remarked when amending the order</value>
        [DataMember(Name="amend_text", EmitDefaultValue=false)]
        public string AmendText { get; private set; }

        /// <summary>
        /// Update success status
        /// </summary>
        /// <value>Update success status</value>
        [DataMember(Name="succeeded", EmitDefaultValue=false)]
        public bool Succeeded { get; private set; }

        /// <summary>
        /// Error indicator for failed modifications; empty when successful
        /// </summary>
        /// <value>Error indicator for failed modifications; empty when successful</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; private set; }

        /// <summary>
        /// Error description for failed modifications; empty when successful
        /// </summary>
        /// <value>Error description for failed modifications; empty when successful</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; private set; }

        /// <summary>
        /// Account types， spot - spot account, margin - margin account, unified - unified account, cross_margin - cross margin account.Portfolio margin accounts can only be set to &#x60;cross_margin&#x60;
        /// </summary>
        /// <value>Account types， spot - spot account, margin - margin account, unified - unified account, cross_margin - cross margin account.Portfolio margin accounts can only be set to &#x60;cross_margin&#x60;</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AmendOrderResult {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AmendText: ").Append(AmendText).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmendOrderResult);
        }

        /// <summary>
        /// Returns true if AmendOrderResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AmendOrderResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmendOrderResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.AmendText == input.AmendText ||
                    (this.AmendText != null &&
                    this.AmendText.Equals(input.AmendText))
                ) && 
                (
                    this.Succeeded == input.Succeeded ||
                    this.Succeeded.Equals(input.Succeeded)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.AmendText != null)
                    hashCode = hashCode * 59 + this.AmendText.GetHashCode();
                hashCode = hashCode * 59 + this.Succeeded.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
