/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// UserSub
    /// </summary>
    [DataContract]
    public partial class UserSub :  IEquatable<UserSub>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSub" /> class.
        /// </summary>
        /// <param name="uid">User ID.</param>
        /// <param name="belong">The system to which the user belongs (partner referral). If empty, it means not belonging to any system..</param>
        /// <param name="type">Type (0-not in the system 1-direct subordinate agent 2-indirect subordinate agent 3-direct direct customer 4-indirect direct customer 5-ordinary user).</param>
        /// <param name="refUid">Inviter user ID.</param>
        public UserSub(long uid = default(long), string belong = default(string), long type = default(long), long refUid = default(long))
        {
            this.Uid = uid;
            this.Belong = belong;
            this.Type = type;
            this.RefUid = refUid;
        }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="uid")]
        public long Uid { get; set; }

        /// <summary>
        /// The system to which the user belongs (partner referral). If empty, it means not belonging to any system.
        /// </summary>
        /// <value>The system to which the user belongs (partner referral). If empty, it means not belonging to any system.</value>
        [DataMember(Name="belong")]
        public string Belong { get; set; }

        /// <summary>
        /// Type (0-not in the system 1-direct subordinate agent 2-indirect subordinate agent 3-direct direct customer 4-indirect direct customer 5-ordinary user)
        /// </summary>
        /// <value>Type (0-not in the system 1-direct subordinate agent 2-indirect subordinate agent 3-direct direct customer 4-indirect direct customer 5-ordinary user)</value>
        [DataMember(Name="type")]
        public long Type { get; set; }

        /// <summary>
        /// Inviter user ID
        /// </summary>
        /// <value>Inviter user ID</value>
        [DataMember(Name="ref_uid")]
        public long RefUid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserSub {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Belong: ").Append(Belong).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RefUid: ").Append(RefUid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSub);
        }

        /// <summary>
        /// Returns true if UserSub instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSub input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uid == input.Uid ||
                    this.Uid.Equals(input.Uid)
                ) && 
                (
                    this.Belong == input.Belong ||
                    (this.Belong != null &&
                    this.Belong.Equals(input.Belong))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.RefUid == input.RefUid ||
                    this.RefUid.Equals(input.RefUid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Belong != null)
                    hashCode = hashCode * 59 + this.Belong.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.RefUid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
