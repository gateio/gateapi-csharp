/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Withdrawals to Gate addresses do not incur transaction fees.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>LedgerRecord</returns>
        LedgerRecord Withdraw (LedgerRecord ledgerRecord);

        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Withdrawals to Gate addresses do not incur transaction fees.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>ApiResponse of LedgerRecord</returns>
        ApiResponse<LedgerRecord> WithdrawWithHttpInfo (LedgerRecord ledgerRecord);
        /// <summary>
        /// UID transfer
        /// </summary>
        /// <remarks>
        /// Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>UidPushWithdrawalResp</returns>
        UidPushWithdrawalResp WithdrawPushOrder (UidPushWithdrawal uidPushWithdrawal);

        /// <summary>
        /// UID transfer
        /// </summary>
        /// <remarks>
        /// Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>ApiResponse of UidPushWithdrawalResp</returns>
        ApiResponse<UidPushWithdrawalResp> WithdrawPushOrderWithHttpInfo (UidPushWithdrawal uidPushWithdrawal);
        /// <summary>
        /// Cancel withdrawal with specified ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>LedgerRecord</returns>
        LedgerRecord CancelWithdrawal (string withdrawalId);

        /// <summary>
        /// Cancel withdrawal with specified ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>ApiResponse of LedgerRecord</returns>
        ApiResponse<LedgerRecord> CancelWithdrawalWithHttpInfo (string withdrawalId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Withdrawals to Gate addresses do not incur transaction fees.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>Task of LedgerRecord</returns>
        Task<LedgerRecord> WithdrawAsync (LedgerRecord ledgerRecord);

        /// <summary>
        /// Withdraw
        /// </summary>
        /// <remarks>
        /// Withdrawals to Gate addresses do not incur transaction fees.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>Task of ApiResponse (LedgerRecord)</returns>
        Task<ApiResponse<LedgerRecord>> WithdrawAsyncWithHttpInfo (LedgerRecord ledgerRecord);
        /// <summary>
        /// UID transfer
        /// </summary>
        /// <remarks>
        /// Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>Task of UidPushWithdrawalResp</returns>
        Task<UidPushWithdrawalResp> WithdrawPushOrderAsync (UidPushWithdrawal uidPushWithdrawal);

        /// <summary>
        /// UID transfer
        /// </summary>
        /// <remarks>
        /// Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>Task of ApiResponse (UidPushWithdrawalResp)</returns>
        Task<ApiResponse<UidPushWithdrawalResp>> WithdrawPushOrderAsyncWithHttpInfo (UidPushWithdrawal uidPushWithdrawal);
        /// <summary>
        /// Cancel withdrawal with specified ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>Task of LedgerRecord</returns>
        Task<LedgerRecord> CancelWithdrawalAsync (string withdrawalId);

        /// <summary>
        /// Cancel withdrawal with specified ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>Task of ApiResponse (LedgerRecord)</returns>
        Task<ApiResponse<LedgerRecord>> CancelWithdrawalAsyncWithHttpInfo (string withdrawalId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawalApi : IWithdrawalApiSync, IWithdrawalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WithdrawalApi : IWithdrawalApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WithdrawalApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WithdrawalApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WithdrawalApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WithdrawalApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Withdraw Withdrawals to Gate addresses do not incur transaction fees.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>LedgerRecord</returns>
        public LedgerRecord Withdraw (LedgerRecord ledgerRecord)
        {
             ApiResponse<LedgerRecord> localVarResponse = WithdrawWithHttpInfo(ledgerRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw Withdrawals to Gate addresses do not incur transaction fees.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>ApiResponse of LedgerRecord</returns>
        public ApiResponse<LedgerRecord> WithdrawWithHttpInfo (LedgerRecord ledgerRecord)
        {
            // verify the required parameter 'ledgerRecord' is set
            if (ledgerRecord == null)
                throw new ApiException(400, "Missing required parameter 'ledgerRecord' when calling WithdrawalApi->Withdraw");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ledgerRecord;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<LedgerRecord>("/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Withdraw", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw Withdrawals to Gate addresses do not incur transaction fees.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>Task of LedgerRecord</returns>
        public async Task<LedgerRecord> WithdrawAsync (LedgerRecord ledgerRecord)
        {
             Io.Gate.GateApi.Client.ApiResponse<LedgerRecord> localVarResponse = await WithdrawAsyncWithHttpInfo(ledgerRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Withdraw Withdrawals to Gate addresses do not incur transaction fees.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerRecord"></param>
        /// <returns>Task of ApiResponse (LedgerRecord)</returns>
        public async Task<ApiResponse<LedgerRecord>> WithdrawAsyncWithHttpInfo (LedgerRecord ledgerRecord)
        {
            // verify the required parameter 'ledgerRecord' is set
            if (ledgerRecord == null)
                throw new ApiException(400, "Missing required parameter 'ledgerRecord' when calling WithdrawalApi->Withdraw");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = ledgerRecord;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LedgerRecord>("/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Withdraw", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// UID transfer Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>UidPushWithdrawalResp</returns>
        public UidPushWithdrawalResp WithdrawPushOrder (UidPushWithdrawal uidPushWithdrawal)
        {
             ApiResponse<UidPushWithdrawalResp> localVarResponse = WithdrawPushOrderWithHttpInfo(uidPushWithdrawal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UID transfer Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>ApiResponse of UidPushWithdrawalResp</returns>
        public ApiResponse<UidPushWithdrawalResp> WithdrawPushOrderWithHttpInfo (UidPushWithdrawal uidPushWithdrawal)
        {
            // verify the required parameter 'uidPushWithdrawal' is set
            if (uidPushWithdrawal == null)
                throw new ApiException(400, "Missing required parameter 'uidPushWithdrawal' when calling WithdrawalApi->WithdrawPushOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = uidPushWithdrawal;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<UidPushWithdrawalResp>("/withdrawals/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawPushOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// UID transfer Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>Task of UidPushWithdrawalResp</returns>
        public async Task<UidPushWithdrawalResp> WithdrawPushOrderAsync (UidPushWithdrawal uidPushWithdrawal)
        {
             Io.Gate.GateApi.Client.ApiResponse<UidPushWithdrawalResp> localVarResponse = await WithdrawPushOrderAsyncWithHttpInfo(uidPushWithdrawal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UID transfer Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uidPushWithdrawal"></param>
        /// <returns>Task of ApiResponse (UidPushWithdrawalResp)</returns>
        public async Task<ApiResponse<UidPushWithdrawalResp>> WithdrawPushOrderAsyncWithHttpInfo (UidPushWithdrawal uidPushWithdrawal)
        {
            // verify the required parameter 'uidPushWithdrawal' is set
            if (uidPushWithdrawal == null)
                throw new ApiException(400, "Missing required parameter 'uidPushWithdrawal' when calling WithdrawalApi->WithdrawPushOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = uidPushWithdrawal;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UidPushWithdrawalResp>("/withdrawals/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawPushOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel withdrawal with specified ID 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>LedgerRecord</returns>
        public LedgerRecord CancelWithdrawal (string withdrawalId)
        {
             ApiResponse<LedgerRecord> localVarResponse = CancelWithdrawalWithHttpInfo(withdrawalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel withdrawal with specified ID 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>ApiResponse of LedgerRecord</returns>
        public ApiResponse<LedgerRecord> CancelWithdrawalWithHttpInfo (string withdrawalId)
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
                throw new ApiException(400, "Missing required parameter 'withdrawalId' when calling WithdrawalApi->CancelWithdrawal");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("withdrawal_id", ClientUtils.ParameterToString(withdrawalId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<LedgerRecord>("/withdrawals/{withdrawal_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelWithdrawal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel withdrawal with specified ID 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>Task of LedgerRecord</returns>
        public async Task<LedgerRecord> CancelWithdrawalAsync (string withdrawalId)
        {
             Io.Gate.GateApi.Client.ApiResponse<LedgerRecord> localVarResponse = await CancelWithdrawalAsyncWithHttpInfo(withdrawalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel withdrawal with specified ID 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawalId"></param>
        /// <returns>Task of ApiResponse (LedgerRecord)</returns>
        public async Task<ApiResponse<LedgerRecord>> CancelWithdrawalAsyncWithHttpInfo (string withdrawalId)
        {
            // verify the required parameter 'withdrawalId' is set
            if (withdrawalId == null)
                throw new ApiException(400, "Missing required parameter 'withdrawalId' when calling WithdrawalApi->CancelWithdrawal");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("withdrawal_id", ClientUtils.ParameterToString(withdrawalId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<LedgerRecord>("/withdrawals/{withdrawal_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelWithdrawal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
