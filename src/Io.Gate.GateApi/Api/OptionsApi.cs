/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all underlyings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OptionsUnderlying&gt;</returns>
        List<OptionsUnderlying> ListOptionsUnderlyings ();

        /// <summary>
        /// List all underlyings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OptionsUnderlying&gt;</returns>
        ApiResponse<List<OptionsUnderlying>> ListOptionsUnderlyingsWithHttpInfo ();
        /// <summary>
        /// List all expiration times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>List&lt;long&gt;</returns>
        List<long> ListOptionsExpirations (string underlying);

        /// <summary>
        /// List all expiration times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>ApiResponse of List&lt;long&gt;</returns>
        ApiResponse<List<long>> ListOptionsExpirationsWithHttpInfo (string underlying);
        /// <summary>
        /// List all the contracts with specified underlying and expiration time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>List&lt;OptionsContract&gt;</returns>
        List<OptionsContract> ListOptionsContracts (string underlying, long? expiration = default(long?));

        /// <summary>
        /// List all the contracts with specified underlying and expiration time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsContract&gt;</returns>
        ApiResponse<List<OptionsContract>> ListOptionsContractsWithHttpInfo (string underlying, long? expiration = default(long?));
        /// <summary>
        /// Query specified contract detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>OptionsContract</returns>
        OptionsContract GetOptionsContract (string contract);

        /// <summary>
        /// Query specified contract detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>ApiResponse of OptionsContract</returns>
        ApiResponse<OptionsContract> GetOptionsContractWithHttpInfo (string contract);
        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsSettlement&gt;</returns>
        List<OptionsSettlement> ListOptionsSettlements (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsSettlement&gt;</returns>
        ApiResponse<List<OptionsSettlement>> ListOptionsSettlementsWithHttpInfo (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get specified contract&#39;s settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>OptionsSettlement</returns>
        OptionsSettlement GetOptionsSettlement (string contract, string underlying, long at);

        /// <summary>
        /// Get specified contract&#39;s settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>ApiResponse of OptionsSettlement</returns>
        ApiResponse<OptionsSettlement> GetOptionsSettlementWithHttpInfo (string contract, string underlying, long at);
        /// <summary>
        /// List my options settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsMySettlements&gt;</returns>
        List<OptionsMySettlements> ListMyOptionsSettlements (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List my options settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsMySettlements&gt;</returns>
        ApiResponse<List<OptionsMySettlements>> ListMyOptionsSettlementsWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Options order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>FuturesOrderBook</returns>
        FuturesOrderBook ListOptionsOrderBook (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Options order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>ApiResponse of FuturesOrderBook</returns>
        ApiResponse<FuturesOrderBook> ListOptionsOrderBookWithHttpInfo (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// List tickers of options contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>List&lt;OptionsTicker&gt;</returns>
        List<OptionsTicker> ListOptionsTickers (string underlying);

        /// <summary>
        /// List tickers of options contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>ApiResponse of List&lt;OptionsTicker&gt;</returns>
        ApiResponse<List<OptionsTicker>> ListOptionsTickersWithHttpInfo (string underlying);
        /// <summary>
        /// Get underlying ticker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>OptionsUnderlyingTicker</returns>
        OptionsUnderlyingTicker ListOptionsUnderlyingTickers (string underlying);

        /// <summary>
        /// Get underlying ticker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>ApiResponse of OptionsUnderlyingTicker</returns>
        ApiResponse<OptionsUnderlyingTicker> ListOptionsUnderlyingTickersWithHttpInfo (string underlying);
        /// <summary>
        /// Get options candlesticks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>List&lt;OptionsCandlestick&gt;</returns>
        List<OptionsCandlestick> ListOptionsCandlesticks (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Get options candlesticks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>ApiResponse of List&lt;OptionsCandlestick&gt;</returns>
        ApiResponse<List<OptionsCandlestick>> ListOptionsCandlesticksWithHttpInfo (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Mark price candlesticks of an underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>List&lt;FuturesCandlestick&gt;</returns>
        List<FuturesCandlestick> ListOptionsUnderlyingCandlesticks (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Mark price candlesticks of an underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>ApiResponse of List&lt;FuturesCandlestick&gt;</returns>
        ApiResponse<List<FuturesCandlestick>> ListOptionsUnderlyingCandlesticksWithHttpInfo (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Options trade history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;FuturesTrade&gt;</returns>
        List<FuturesTrade> ListOptionsTrades (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Options trade history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesTrade&gt;</returns>
        ApiResponse<List<FuturesTrade>> ListOptionsTradesWithHttpInfo (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// List options account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OptionsAccount</returns>
        OptionsAccount ListOptionsAccount ();

        /// <summary>
        /// List options account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OptionsAccount</returns>
        ApiResponse<OptionsAccount> ListOptionsAccountWithHttpInfo ();
        /// <summary>
        /// List account changing history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>List&lt;OptionsAccountBook&gt;</returns>
        List<OptionsAccountBook> ListOptionsAccountBook (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));

        /// <summary>
        /// List account changing history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsAccountBook&gt;</returns>
        ApiResponse<List<OptionsAccountBook>> ListOptionsAccountBookWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));
        /// <summary>
        /// List user&#39;s positions of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>List&lt;OptionsPosition&gt;</returns>
        List<OptionsPosition> ListOptionsPositions (string underlying = default(string));

        /// <summary>
        /// List user&#39;s positions of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsPosition&gt;</returns>
        ApiResponse<List<OptionsPosition>> ListOptionsPositionsWithHttpInfo (string underlying = default(string));
        /// <summary>
        /// Get specified contract position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>OptionsPosition</returns>
        OptionsPosition GetOptionsPosition (string contract);

        /// <summary>
        /// Get specified contract position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>ApiResponse of OptionsPosition</returns>
        ApiResponse<OptionsPosition> GetOptionsPositionWithHttpInfo (string contract);
        /// <summary>
        /// List user&#39;s liquidation history of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>List&lt;OptionsPositionClose&gt;</returns>
        List<OptionsPositionClose> ListOptionsPositionClose (string underlying, string contract = default(string));

        /// <summary>
        /// List user&#39;s liquidation history of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsPositionClose&gt;</returns>
        ApiResponse<List<OptionsPositionClose>> ListOptionsPositionCloseWithHttpInfo (string underlying, string contract = default(string));
        /// <summary>
        /// List options orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsOrder&gt;</returns>
        List<OptionsOrder> ListOptionsOrders (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List options orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsOrder&gt;</returns>
        ApiResponse<List<OptionsOrder>> ListOptionsOrdersWithHttpInfo (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Create an options order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>OptionsOrder</returns>
        OptionsOrder CreateOptionsOrder (OptionsOrder optionsOrder);

        /// <summary>
        /// Create an options order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>ApiResponse of OptionsOrder</returns>
        ApiResponse<OptionsOrder> CreateOptionsOrderWithHttpInfo (OptionsOrder optionsOrder);
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>List&lt;OptionsOrder&gt;</returns>
        List<OptionsOrder> CancelOptionsOrders (string contract = default(string), string underlying = default(string), string side = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsOrder&gt;</returns>
        ApiResponse<List<OptionsOrder>> CancelOptionsOrdersWithHttpInfo (string contract = default(string), string underlying = default(string), string side = default(string));
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>OptionsOrder</returns>
        OptionsOrder GetOptionsOrder (long orderId);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of OptionsOrder</returns>
        ApiResponse<OptionsOrder> GetOptionsOrderWithHttpInfo (long orderId);
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>OptionsOrder</returns>
        OptionsOrder CancelOptionsOrder (long orderId);

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of OptionsOrder</returns>
        ApiResponse<OptionsOrder> CancelOptionsOrderWithHttpInfo (long orderId);
        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>TriggerTime</returns>
        TriggerTime CountdownCancelAllOptions (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask);

        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>ApiResponse of TriggerTime</returns>
        ApiResponse<TriggerTime> CountdownCancelAllOptionsWithHttpInfo (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask);
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsMyTrade&gt;</returns>
        List<OptionsMyTrade> ListMyOptionsTrades (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsMyTrade&gt;</returns>
        ApiResponse<List<OptionsMyTrade>> ListMyOptionsTradesWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// MMP Query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>List&lt;OptionsMMP&gt;</returns>
        List<OptionsMMP> GetOptionsMMP (string underlying = default(string));

        /// <summary>
        /// MMP Query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsMMP&gt;</returns>
        ApiResponse<List<OptionsMMP>> GetOptionsMMPWithHttpInfo (string underlying = default(string));
        /// <summary>
        /// MMP Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>OptionsMMP</returns>
        OptionsMMP SetOptionsMMP (OptionsMMP optionsMMP);

        /// <summary>
        /// MMP Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>ApiResponse of OptionsMMP</returns>
        ApiResponse<OptionsMMP> SetOptionsMMPWithHttpInfo (OptionsMMP optionsMMP);
        /// <summary>
        /// MMP Reset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>OptionsMMP</returns>
        OptionsMMP ResetOptionsMMP (OptionsMMPReset optionsMMPReset);

        /// <summary>
        /// MMP Reset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>ApiResponse of OptionsMMP</returns>
        ApiResponse<OptionsMMP> ResetOptionsMMPWithHttpInfo (OptionsMMPReset optionsMMPReset);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all underlyings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OptionsUnderlying&gt;</returns>
        Task<List<OptionsUnderlying>> ListOptionsUnderlyingsAsync ();

        /// <summary>
        /// List all underlyings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OptionsUnderlying&gt;)</returns>
        Task<ApiResponse<List<OptionsUnderlying>>> ListOptionsUnderlyingsAsyncWithHttpInfo ();
        /// <summary>
        /// List all expiration times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of List&lt;long&gt;</returns>
        Task<List<long>> ListOptionsExpirationsAsync (string underlying);

        /// <summary>
        /// List all expiration times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of ApiResponse (List&lt;long&gt;)</returns>
        Task<ApiResponse<List<long>>> ListOptionsExpirationsAsyncWithHttpInfo (string underlying);
        /// <summary>
        /// List all the contracts with specified underlying and expiration time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>Task of List&lt;OptionsContract&gt;</returns>
        Task<List<OptionsContract>> ListOptionsContractsAsync (string underlying, long? expiration = default(long?));

        /// <summary>
        /// List all the contracts with specified underlying and expiration time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsContract&gt;)</returns>
        Task<ApiResponse<List<OptionsContract>>> ListOptionsContractsAsyncWithHttpInfo (string underlying, long? expiration = default(long?));
        /// <summary>
        /// Query specified contract detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of OptionsContract</returns>
        Task<OptionsContract> GetOptionsContractAsync (string contract);

        /// <summary>
        /// Query specified contract detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of ApiResponse (OptionsContract)</returns>
        Task<ApiResponse<OptionsContract>> GetOptionsContractAsyncWithHttpInfo (string contract);
        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsSettlement&gt;</returns>
        Task<List<OptionsSettlement>> ListOptionsSettlementsAsync (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsSettlement&gt;)</returns>
        Task<ApiResponse<List<OptionsSettlement>>> ListOptionsSettlementsAsyncWithHttpInfo (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get specified contract&#39;s settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>Task of OptionsSettlement</returns>
        Task<OptionsSettlement> GetOptionsSettlementAsync (string contract, string underlying, long at);

        /// <summary>
        /// Get specified contract&#39;s settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>Task of ApiResponse (OptionsSettlement)</returns>
        Task<ApiResponse<OptionsSettlement>> GetOptionsSettlementAsyncWithHttpInfo (string contract, string underlying, long at);
        /// <summary>
        /// List my options settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsMySettlements&gt;</returns>
        Task<List<OptionsMySettlements>> ListMyOptionsSettlementsAsync (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List my options settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsMySettlements&gt;)</returns>
        Task<ApiResponse<List<OptionsMySettlements>>> ListMyOptionsSettlementsAsyncWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Options order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>Task of FuturesOrderBook</returns>
        Task<FuturesOrderBook> ListOptionsOrderBookAsync (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Options order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>Task of ApiResponse (FuturesOrderBook)</returns>
        Task<ApiResponse<FuturesOrderBook>> ListOptionsOrderBookAsyncWithHttpInfo (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// List tickers of options contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of List&lt;OptionsTicker&gt;</returns>
        Task<List<OptionsTicker>> ListOptionsTickersAsync (string underlying);

        /// <summary>
        /// List tickers of options contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsTicker&gt;)</returns>
        Task<ApiResponse<List<OptionsTicker>>> ListOptionsTickersAsyncWithHttpInfo (string underlying);
        /// <summary>
        /// Get underlying ticker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>Task of OptionsUnderlyingTicker</returns>
        Task<OptionsUnderlyingTicker> ListOptionsUnderlyingTickersAsync (string underlying);

        /// <summary>
        /// Get underlying ticker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>Task of ApiResponse (OptionsUnderlyingTicker)</returns>
        Task<ApiResponse<OptionsUnderlyingTicker>> ListOptionsUnderlyingTickersAsyncWithHttpInfo (string underlying);
        /// <summary>
        /// Get options candlesticks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of List&lt;OptionsCandlestick&gt;</returns>
        Task<List<OptionsCandlestick>> ListOptionsCandlesticksAsync (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Get options candlesticks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsCandlestick&gt;)</returns>
        Task<ApiResponse<List<OptionsCandlestick>>> ListOptionsCandlesticksAsyncWithHttpInfo (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Mark price candlesticks of an underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of List&lt;FuturesCandlestick&gt;</returns>
        Task<List<FuturesCandlestick>> ListOptionsUnderlyingCandlesticksAsync (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Mark price candlesticks of an underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesCandlestick&gt;)</returns>
        Task<ApiResponse<List<FuturesCandlestick>>> ListOptionsUnderlyingCandlesticksAsyncWithHttpInfo (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Options trade history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;FuturesTrade&gt;</returns>
        Task<List<FuturesTrade>> ListOptionsTradesAsync (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Options trade history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesTrade&gt;)</returns>
        Task<ApiResponse<List<FuturesTrade>>> ListOptionsTradesAsyncWithHttpInfo (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// List options account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OptionsAccount</returns>
        Task<OptionsAccount> ListOptionsAccountAsync ();

        /// <summary>
        /// List options account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OptionsAccount)</returns>
        Task<ApiResponse<OptionsAccount>> ListOptionsAccountAsyncWithHttpInfo ();
        /// <summary>
        /// List account changing history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>Task of List&lt;OptionsAccountBook&gt;</returns>
        Task<List<OptionsAccountBook>> ListOptionsAccountBookAsync (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));

        /// <summary>
        /// List account changing history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsAccountBook&gt;)</returns>
        Task<ApiResponse<List<OptionsAccountBook>>> ListOptionsAccountBookAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));
        /// <summary>
        /// List user&#39;s positions of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of List&lt;OptionsPosition&gt;</returns>
        Task<List<OptionsPosition>> ListOptionsPositionsAsync (string underlying = default(string));

        /// <summary>
        /// List user&#39;s positions of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsPosition&gt;)</returns>
        Task<ApiResponse<List<OptionsPosition>>> ListOptionsPositionsAsyncWithHttpInfo (string underlying = default(string));
        /// <summary>
        /// Get specified contract position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of OptionsPosition</returns>
        Task<OptionsPosition> GetOptionsPositionAsync (string contract);

        /// <summary>
        /// Get specified contract position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of ApiResponse (OptionsPosition)</returns>
        Task<ApiResponse<OptionsPosition>> GetOptionsPositionAsyncWithHttpInfo (string contract);
        /// <summary>
        /// List user&#39;s liquidation history of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>Task of List&lt;OptionsPositionClose&gt;</returns>
        Task<List<OptionsPositionClose>> ListOptionsPositionCloseAsync (string underlying, string contract = default(string));

        /// <summary>
        /// List user&#39;s liquidation history of specified underlying
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsPositionClose&gt;)</returns>
        Task<ApiResponse<List<OptionsPositionClose>>> ListOptionsPositionCloseAsyncWithHttpInfo (string underlying, string contract = default(string));
        /// <summary>
        /// List options orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsOrder&gt;</returns>
        Task<List<OptionsOrder>> ListOptionsOrdersAsync (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List options orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsOrder&gt;)</returns>
        Task<ApiResponse<List<OptionsOrder>>> ListOptionsOrdersAsyncWithHttpInfo (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Create an options order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>Task of OptionsOrder</returns>
        Task<OptionsOrder> CreateOptionsOrderAsync (OptionsOrder optionsOrder);

        /// <summary>
        /// Create an options order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>Task of ApiResponse (OptionsOrder)</returns>
        Task<ApiResponse<OptionsOrder>> CreateOptionsOrderAsyncWithHttpInfo (OptionsOrder optionsOrder);
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of List&lt;OptionsOrder&gt;</returns>
        Task<List<OptionsOrder>> CancelOptionsOrdersAsync (string contract = default(string), string underlying = default(string), string side = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsOrder&gt;)</returns>
        Task<ApiResponse<List<OptionsOrder>>> CancelOptionsOrdersAsyncWithHttpInfo (string contract = default(string), string underlying = default(string), string side = default(string));
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of OptionsOrder</returns>
        Task<OptionsOrder> GetOptionsOrderAsync (long orderId);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (OptionsOrder)</returns>
        Task<ApiResponse<OptionsOrder>> GetOptionsOrderAsyncWithHttpInfo (long orderId);
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of OptionsOrder</returns>
        Task<OptionsOrder> CancelOptionsOrderAsync (long orderId);

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (OptionsOrder)</returns>
        Task<ApiResponse<OptionsOrder>> CancelOptionsOrderAsyncWithHttpInfo (long orderId);
        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>Task of TriggerTime</returns>
        Task<TriggerTime> CountdownCancelAllOptionsAsync (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask);

        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>Task of ApiResponse (TriggerTime)</returns>
        Task<ApiResponse<TriggerTime>> CountdownCancelAllOptionsAsyncWithHttpInfo (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask);
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsMyTrade&gt;</returns>
        Task<List<OptionsMyTrade>> ListMyOptionsTradesAsync (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsMyTrade&gt;)</returns>
        Task<ApiResponse<List<OptionsMyTrade>>> ListMyOptionsTradesAsyncWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// MMP Query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of List&lt;OptionsMMP&gt;</returns>
        Task<List<OptionsMMP>> GetOptionsMMPAsync (string underlying = default(string));

        /// <summary>
        /// MMP Query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsMMP&gt;)</returns>
        Task<ApiResponse<List<OptionsMMP>>> GetOptionsMMPAsyncWithHttpInfo (string underlying = default(string));
        /// <summary>
        /// MMP Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>Task of OptionsMMP</returns>
        Task<OptionsMMP> SetOptionsMMPAsync (OptionsMMP optionsMMP);

        /// <summary>
        /// MMP Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>Task of ApiResponse (OptionsMMP)</returns>
        Task<ApiResponse<OptionsMMP>> SetOptionsMMPAsyncWithHttpInfo (OptionsMMP optionsMMP);
        /// <summary>
        /// MMP Reset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>Task of OptionsMMP</returns>
        Task<OptionsMMP> ResetOptionsMMPAsync (OptionsMMPReset optionsMMPReset);

        /// <summary>
        /// MMP Reset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>Task of ApiResponse (OptionsMMP)</returns>
        Task<ApiResponse<OptionsMMP>> ResetOptionsMMPAsyncWithHttpInfo (OptionsMMPReset optionsMMPReset);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionsApi : IOptionsApiSync, IOptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptionsApi : IOptionsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionsApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptionsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OptionsApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all underlyings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OptionsUnderlying&gt;</returns>
        public List<OptionsUnderlying> ListOptionsUnderlyings ()
        {
             ApiResponse<List<OptionsUnderlying>> localVarResponse = ListOptionsUnderlyingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all underlyings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OptionsUnderlying&gt;</returns>
        public ApiResponse<List<OptionsUnderlying>> ListOptionsUnderlyingsWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsUnderlying>>("/options/underlyings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsUnderlyings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all underlyings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OptionsUnderlying&gt;</returns>
        public async Task<List<OptionsUnderlying>> ListOptionsUnderlyingsAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsUnderlying>> localVarResponse = await ListOptionsUnderlyingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all underlyings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OptionsUnderlying&gt;)</returns>
        public async Task<ApiResponse<List<OptionsUnderlying>>> ListOptionsUnderlyingsAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsUnderlying>>("/options/underlyings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsUnderlyings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all expiration times 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>List&lt;long&gt;</returns>
        public List<long> ListOptionsExpirations (string underlying)
        {
             ApiResponse<List<long>> localVarResponse = ListOptionsExpirationsWithHttpInfo(underlying);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all expiration times 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>ApiResponse of List&lt;long&gt;</returns>
        public ApiResponse<List<long>> ListOptionsExpirationsWithHttpInfo (string underlying)
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsExpirations");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<long>>("/options/expirations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsExpirations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all expiration times 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of List&lt;long&gt;</returns>
        public async Task<List<long>> ListOptionsExpirationsAsync (string underlying)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<long>> localVarResponse = await ListOptionsExpirationsAsyncWithHttpInfo(underlying);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all expiration times 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of ApiResponse (List&lt;long&gt;)</returns>
        public async Task<ApiResponse<List<long>>> ListOptionsExpirationsAsyncWithHttpInfo (string underlying)
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsExpirations");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<long>>("/options/expirations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsExpirations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the contracts with specified underlying and expiration time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>List&lt;OptionsContract&gt;</returns>
        public List<OptionsContract> ListOptionsContracts (string underlying, long? expiration = default(long?))
        {
             ApiResponse<List<OptionsContract>> localVarResponse = ListOptionsContractsWithHttpInfo(underlying, expiration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all the contracts with specified underlying and expiration time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsContract&gt;</returns>
        public ApiResponse<List<OptionsContract>> ListOptionsContractsWithHttpInfo (string underlying, long? expiration = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsContracts");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsContract>>("/options/contracts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsContracts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the contracts with specified underlying and expiration time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>Task of List&lt;OptionsContract&gt;</returns>
        public async Task<List<OptionsContract>> ListOptionsContractsAsync (string underlying, long? expiration = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsContract>> localVarResponse = await ListOptionsContractsAsyncWithHttpInfo(underlying, expiration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all the contracts with specified underlying and expiration time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="expiration">Unix timestamp of the expiration time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsContract&gt;)</returns>
        public async Task<ApiResponse<List<OptionsContract>>> ListOptionsContractsAsyncWithHttpInfo (string underlying, long? expiration = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsContracts");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsContract>>("/options/contracts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsContracts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query specified contract detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>OptionsContract</returns>
        public OptionsContract GetOptionsContract (string contract)
        {
             ApiResponse<OptionsContract> localVarResponse = GetOptionsContractWithHttpInfo(contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query specified contract detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>ApiResponse of OptionsContract</returns>
        public ApiResponse<OptionsContract> GetOptionsContractWithHttpInfo (string contract)
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->GetOptionsContract");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionsContract>("/options/contracts/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query specified contract detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of OptionsContract</returns>
        public async Task<OptionsContract> GetOptionsContractAsync (string contract)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsContract> localVarResponse = await GetOptionsContractAsyncWithHttpInfo(contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query specified contract detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of ApiResponse (OptionsContract)</returns>
        public async Task<ApiResponse<OptionsContract>> GetOptionsContractAsyncWithHttpInfo (string contract)
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->GetOptionsContract");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionsContract>("/options/contracts/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsSettlement&gt;</returns>
        public List<OptionsSettlement> ListOptionsSettlements (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<OptionsSettlement>> localVarResponse = ListOptionsSettlementsWithHttpInfo(underlying, limit, offset, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsSettlement&gt;</returns>
        public ApiResponse<List<OptionsSettlement>> ListOptionsSettlementsWithHttpInfo (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsSettlements");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsSettlement>>("/options/settlements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsSettlements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsSettlement&gt;</returns>
        public async Task<List<OptionsSettlement>> ListOptionsSettlementsAsync (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsSettlement>> localVarResponse = await ListOptionsSettlementsAsyncWithHttpInfo(underlying, limit, offset, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsSettlement&gt;)</returns>
        public async Task<ApiResponse<List<OptionsSettlement>>> ListOptionsSettlementsAsyncWithHttpInfo (string underlying, int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsSettlements");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsSettlement>>("/options/settlements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsSettlements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified contract&#39;s settlement 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>OptionsSettlement</returns>
        public OptionsSettlement GetOptionsSettlement (string contract, string underlying, long at)
        {
             ApiResponse<OptionsSettlement> localVarResponse = GetOptionsSettlementWithHttpInfo(contract, underlying, at);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified contract&#39;s settlement 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>ApiResponse of OptionsSettlement</returns>
        public ApiResponse<OptionsSettlement> GetOptionsSettlementWithHttpInfo (string contract, string underlying, long at)
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->GetOptionsSettlement");

            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->GetOptionsSettlement");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "at", at));


            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionsSettlement>("/options/settlements/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsSettlement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified contract&#39;s settlement 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>Task of OptionsSettlement</returns>
        public async Task<OptionsSettlement> GetOptionsSettlementAsync (string contract, string underlying, long at)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsSettlement> localVarResponse = await GetOptionsSettlementAsyncWithHttpInfo(contract, underlying, at);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specified contract&#39;s settlement 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="at"></param>
        /// <returns>Task of ApiResponse (OptionsSettlement)</returns>
        public async Task<ApiResponse<OptionsSettlement>> GetOptionsSettlementAsyncWithHttpInfo (string contract, string underlying, long at)
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->GetOptionsSettlement");

            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->GetOptionsSettlement");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "at", at));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionsSettlement>("/options/settlements/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsSettlement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List my options settlements 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsMySettlements&gt;</returns>
        public List<OptionsMySettlements> ListMyOptionsSettlements (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<OptionsMySettlements>> localVarResponse = ListMyOptionsSettlementsWithHttpInfo(underlying, contract, limit, offset, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List my options settlements 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsMySettlements&gt;</returns>
        public ApiResponse<List<OptionsMySettlements>> ListMyOptionsSettlementsWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListMyOptionsSettlements");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsMySettlements>>("/options/my_settlements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyOptionsSettlements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List my options settlements 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsMySettlements&gt;</returns>
        public async Task<List<OptionsMySettlements>> ListMyOptionsSettlementsAsync (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsMySettlements>> localVarResponse = await ListMyOptionsSettlementsAsyncWithHttpInfo(underlying, contract, limit, offset, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List my options settlements 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsMySettlements&gt;)</returns>
        public async Task<ApiResponse<List<OptionsMySettlements>>> ListMyOptionsSettlementsAsyncWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListMyOptionsSettlements");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsMySettlements>>("/options/my_settlements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyOptionsSettlements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>FuturesOrderBook</returns>
        public FuturesOrderBook ListOptionsOrderBook (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             ApiResponse<FuturesOrderBook> localVarResponse = ListOptionsOrderBookWithHttpInfo(contract, interval, limit, withId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Options order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>ApiResponse of FuturesOrderBook</returns>
        public ApiResponse<FuturesOrderBook> ListOptionsOrderBookWithHttpInfo (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->ListOptionsOrderBook");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FuturesOrderBook>("/options/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>Task of FuturesOrderBook</returns>
        public async Task<FuturesOrderBook> ListOptionsOrderBookAsync (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesOrderBook> localVarResponse = await ListOptionsOrderBookAsyncWithHttpInfo(contract, interval, limit, withId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Options order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional, default to false)</param>
        /// <returns>Task of ApiResponse (FuturesOrderBook)</returns>
        public async Task<ApiResponse<FuturesOrderBook>> ListOptionsOrderBookAsyncWithHttpInfo (string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->ListOptionsOrderBook");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FuturesOrderBook>("/options/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List tickers of options contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>List&lt;OptionsTicker&gt;</returns>
        public List<OptionsTicker> ListOptionsTickers (string underlying)
        {
             ApiResponse<List<OptionsTicker>> localVarResponse = ListOptionsTickersWithHttpInfo(underlying);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List tickers of options contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>ApiResponse of List&lt;OptionsTicker&gt;</returns>
        public ApiResponse<List<OptionsTicker>> ListOptionsTickersWithHttpInfo (string underlying)
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsTickers");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsTicker>>("/options/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List tickers of options contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of List&lt;OptionsTicker&gt;</returns>
        public async Task<List<OptionsTicker>> ListOptionsTickersAsync (string underlying)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsTicker>> localVarResponse = await ListOptionsTickersAsyncWithHttpInfo(underlying);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List tickers of options contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsTicker&gt;)</returns>
        public async Task<ApiResponse<List<OptionsTicker>>> ListOptionsTickersAsyncWithHttpInfo (string underlying)
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsTickers");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsTicker>>("/options/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get underlying ticker 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>OptionsUnderlyingTicker</returns>
        public OptionsUnderlyingTicker ListOptionsUnderlyingTickers (string underlying)
        {
             ApiResponse<OptionsUnderlyingTicker> localVarResponse = ListOptionsUnderlyingTickersWithHttpInfo(underlying);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get underlying ticker 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>ApiResponse of OptionsUnderlyingTicker</returns>
        public ApiResponse<OptionsUnderlyingTicker> ListOptionsUnderlyingTickersWithHttpInfo (string underlying)
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsUnderlyingTickers");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("underlying", ClientUtils.ParameterToString(underlying)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionsUnderlyingTicker>("/options/underlying/tickers/{underlying}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsUnderlyingTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get underlying ticker 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>Task of OptionsUnderlyingTicker</returns>
        public async Task<OptionsUnderlyingTicker> ListOptionsUnderlyingTickersAsync (string underlying)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsUnderlyingTicker> localVarResponse = await ListOptionsUnderlyingTickersAsyncWithHttpInfo(underlying);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get underlying ticker 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying</param>
        /// <returns>Task of ApiResponse (OptionsUnderlyingTicker)</returns>
        public async Task<ApiResponse<OptionsUnderlyingTicker>> ListOptionsUnderlyingTickersAsyncWithHttpInfo (string underlying)
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsUnderlyingTickers");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("underlying", ClientUtils.ParameterToString(underlying)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionsUnderlyingTicker>("/options/underlying/tickers/{underlying}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsUnderlyingTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get options candlesticks 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>List&lt;OptionsCandlestick&gt;</returns>
        public List<OptionsCandlestick> ListOptionsCandlesticks (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             ApiResponse<List<OptionsCandlestick>> localVarResponse = ListOptionsCandlesticksWithHttpInfo(contract, limit, from, to, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get options candlesticks 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>ApiResponse of List&lt;OptionsCandlestick&gt;</returns>
        public ApiResponse<List<OptionsCandlestick>> ListOptionsCandlesticksWithHttpInfo (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->ListOptionsCandlesticks");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsCandlestick>>("/options/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get options candlesticks 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of List&lt;OptionsCandlestick&gt;</returns>
        public async Task<List<OptionsCandlestick>> ListOptionsCandlesticksAsync (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsCandlestick>> localVarResponse = await ListOptionsCandlesticksAsyncWithHttpInfo(contract, limit, from, to, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get options candlesticks 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsCandlestick&gt;)</returns>
        public async Task<ApiResponse<List<OptionsCandlestick>>> ListOptionsCandlesticksAsyncWithHttpInfo (string contract, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->ListOptionsCandlesticks");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsCandlestick>>("/options/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark price candlesticks of an underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>List&lt;FuturesCandlestick&gt;</returns>
        public List<FuturesCandlestick> ListOptionsUnderlyingCandlesticks (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             ApiResponse<List<FuturesCandlestick>> localVarResponse = ListOptionsUnderlyingCandlesticksWithHttpInfo(underlying, limit, from, to, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark price candlesticks of an underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>ApiResponse of List&lt;FuturesCandlestick&gt;</returns>
        public ApiResponse<List<FuturesCandlestick>> ListOptionsUnderlyingCandlesticksWithHttpInfo (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsUnderlyingCandlesticks");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesCandlestick>>("/options/underlying/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsUnderlyingCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark price candlesticks of an underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of List&lt;FuturesCandlestick&gt;</returns>
        public async Task<List<FuturesCandlestick>> ListOptionsUnderlyingCandlesticksAsync (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesCandlestick>> localVarResponse = await ListOptionsUnderlyingCandlesticksAsyncWithHttpInfo(underlying, limit, from, to, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark price candlesticks of an underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="interval">Interval time between data points (optional, default to 5m)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesCandlestick&gt;)</returns>
        public async Task<ApiResponse<List<FuturesCandlestick>>> ListOptionsUnderlyingCandlesticksAsyncWithHttpInfo (string underlying, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsUnderlyingCandlesticks");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesCandlestick>>("/options/underlying/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsUnderlyingCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options trade history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;FuturesTrade&gt;</returns>
        public List<FuturesTrade> ListOptionsTrades (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<FuturesTrade>> localVarResponse = ListOptionsTradesWithHttpInfo(contract, type, limit, offset, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Options trade history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesTrade&gt;</returns>
        public ApiResponse<List<FuturesTrade>> ListOptionsTradesWithHttpInfo (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesTrade>>("/options/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options trade history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;FuturesTrade&gt;</returns>
        public async Task<List<FuturesTrade>> ListOptionsTradesAsync (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesTrade>> localVarResponse = await ListOptionsTradesAsyncWithHttpInfo(contract, type, limit, offset, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Options trade history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="type">&#x60;C&#x60; is call, while &#x60;P&#x60; is put (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesTrade&gt;)</returns>
        public async Task<ApiResponse<List<FuturesTrade>>> ListOptionsTradesAsyncWithHttpInfo (string contract = default(string), string type = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesTrade>>("/options/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List options account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OptionsAccount</returns>
        public OptionsAccount ListOptionsAccount ()
        {
             ApiResponse<OptionsAccount> localVarResponse = ListOptionsAccountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List options account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OptionsAccount</returns>
        public ApiResponse<OptionsAccount> ListOptionsAccountWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionsAccount>("/options/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List options account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OptionsAccount</returns>
        public async Task<OptionsAccount> ListOptionsAccountAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsAccount> localVarResponse = await ListOptionsAccountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List options account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OptionsAccount)</returns>
        public async Task<ApiResponse<OptionsAccount>> ListOptionsAccountAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionsAccount>("/options/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account changing history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>List&lt;OptionsAccountBook&gt;</returns>
        public List<OptionsAccountBook> ListOptionsAccountBook (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
             ApiResponse<List<OptionsAccountBook>> localVarResponse = ListOptionsAccountBookWithHttpInfo(limit, offset, from, to, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List account changing history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsAccountBook&gt;</returns>
        public ApiResponse<List<OptionsAccountBook>> ListOptionsAccountBookWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsAccountBook>>("/options/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account changing history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>Task of List&lt;OptionsAccountBook&gt;</returns>
        public async Task<List<OptionsAccountBook>> ListOptionsAccountBookAsync (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsAccountBook>> localVarResponse = await ListOptionsAccountBookAsyncWithHttpInfo(limit, offset, from, to, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List account changing history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - set: settlement PNL  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsAccountBook&gt;)</returns>
        public async Task<ApiResponse<List<OptionsAccountBook>>> ListOptionsAccountBookAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsAccountBook>>("/options/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List user&#39;s positions of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>List&lt;OptionsPosition&gt;</returns>
        public List<OptionsPosition> ListOptionsPositions (string underlying = default(string))
        {
             ApiResponse<List<OptionsPosition>> localVarResponse = ListOptionsPositionsWithHttpInfo(underlying);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List user&#39;s positions of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsPosition&gt;</returns>
        public ApiResponse<List<OptionsPosition>> ListOptionsPositionsWithHttpInfo (string underlying = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsPosition>>("/options/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List user&#39;s positions of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of List&lt;OptionsPosition&gt;</returns>
        public async Task<List<OptionsPosition>> ListOptionsPositionsAsync (string underlying = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsPosition>> localVarResponse = await ListOptionsPositionsAsyncWithHttpInfo(underlying);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List user&#39;s positions of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsPosition&gt;)</returns>
        public async Task<ApiResponse<List<OptionsPosition>>> ListOptionsPositionsAsyncWithHttpInfo (string underlying = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsPosition>>("/options/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified contract position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>OptionsPosition</returns>
        public OptionsPosition GetOptionsPosition (string contract)
        {
             ApiResponse<OptionsPosition> localVarResponse = GetOptionsPositionWithHttpInfo(contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified contract position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>ApiResponse of OptionsPosition</returns>
        public ApiResponse<OptionsPosition> GetOptionsPositionWithHttpInfo (string contract)
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->GetOptionsPosition");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionsPosition>("/options/positions/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified contract position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of OptionsPosition</returns>
        public async Task<OptionsPosition> GetOptionsPositionAsync (string contract)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsPosition> localVarResponse = await GetOptionsPositionAsyncWithHttpInfo(contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specified contract position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract"></param>
        /// <returns>Task of ApiResponse (OptionsPosition)</returns>
        public async Task<ApiResponse<OptionsPosition>> GetOptionsPositionAsyncWithHttpInfo (string contract)
        {
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling OptionsApi->GetOptionsPosition");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionsPosition>("/options/positions/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List user&#39;s liquidation history of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>List&lt;OptionsPositionClose&gt;</returns>
        public List<OptionsPositionClose> ListOptionsPositionClose (string underlying, string contract = default(string))
        {
             ApiResponse<List<OptionsPositionClose>> localVarResponse = ListOptionsPositionCloseWithHttpInfo(underlying, contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List user&#39;s liquidation history of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsPositionClose&gt;</returns>
        public ApiResponse<List<OptionsPositionClose>> ListOptionsPositionCloseWithHttpInfo (string underlying, string contract = default(string))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsPositionClose");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsPositionClose>>("/options/position_close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsPositionClose", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List user&#39;s liquidation history of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>Task of List&lt;OptionsPositionClose&gt;</returns>
        public async Task<List<OptionsPositionClose>> ListOptionsPositionCloseAsync (string underlying, string contract = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsPositionClose>> localVarResponse = await ListOptionsPositionCloseAsyncWithHttpInfo(underlying, contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List user&#39;s liquidation history of specified underlying 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsPositionClose&gt;)</returns>
        public async Task<ApiResponse<List<OptionsPositionClose>>> ListOptionsPositionCloseAsyncWithHttpInfo (string underlying, string contract = default(string))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListOptionsPositionClose");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsPositionClose>>("/options/position_close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsPositionClose", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List options orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsOrder&gt;</returns>
        public List<OptionsOrder> ListOptionsOrders (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<OptionsOrder>> localVarResponse = ListOptionsOrdersWithHttpInfo(status, contract, underlying, limit, offset, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List options orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsOrder&gt;</returns>
        public ApiResponse<List<OptionsOrder>> ListOptionsOrdersWithHttpInfo (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling OptionsApi->ListOptionsOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsOrder>>("/options/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List options orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsOrder&gt;</returns>
        public async Task<List<OptionsOrder>> ListOptionsOrdersAsync (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsOrder>> localVarResponse = await ListOptionsOrdersAsyncWithHttpInfo(status, contract, underlying, limit, offset, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List options orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsOrder&gt;)</returns>
        public async Task<ApiResponse<List<OptionsOrder>>> ListOptionsOrdersAsyncWithHttpInfo (string status, string contract = default(string), string underlying = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling OptionsApi->ListOptionsOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsOrder>>("/options/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOptionsOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an options order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>OptionsOrder</returns>
        public OptionsOrder CreateOptionsOrder (OptionsOrder optionsOrder)
        {
             ApiResponse<OptionsOrder> localVarResponse = CreateOptionsOrderWithHttpInfo(optionsOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an options order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>ApiResponse of OptionsOrder</returns>
        public ApiResponse<OptionsOrder> CreateOptionsOrderWithHttpInfo (OptionsOrder optionsOrder)
        {
            // verify the required parameter 'optionsOrder' is set
            if (optionsOrder == null)
                throw new ApiException(400, "Missing required parameter 'optionsOrder' when calling OptionsApi->CreateOptionsOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = optionsOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<OptionsOrder>("/options/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOptionsOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an options order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>Task of OptionsOrder</returns>
        public async Task<OptionsOrder> CreateOptionsOrderAsync (OptionsOrder optionsOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsOrder> localVarResponse = await CreateOptionsOrderAsyncWithHttpInfo(optionsOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an options order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsOrder"></param>
        /// <returns>Task of ApiResponse (OptionsOrder)</returns>
        public async Task<ApiResponse<OptionsOrder>> CreateOptionsOrderAsyncWithHttpInfo (OptionsOrder optionsOrder)
        {
            // verify the required parameter 'optionsOrder' is set
            if (optionsOrder == null)
                throw new ApiException(400, "Missing required parameter 'optionsOrder' when calling OptionsApi->CreateOptionsOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = optionsOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionsOrder>("/options/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOptionsOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>List&lt;OptionsOrder&gt;</returns>
        public List<OptionsOrder> CancelOptionsOrders (string contract = default(string), string underlying = default(string), string side = default(string))
        {
             ApiResponse<List<OptionsOrder>> localVarResponse = CancelOptionsOrdersWithHttpInfo(contract, underlying, side);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsOrder&gt;</returns>
        public ApiResponse<List<OptionsOrder>> CancelOptionsOrdersWithHttpInfo (string contract = default(string), string underlying = default(string), string side = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<OptionsOrder>>("/options/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptionsOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of List&lt;OptionsOrder&gt;</returns>
        public async Task<List<OptionsOrder>> CancelOptionsOrdersAsync (string contract = default(string), string underlying = default(string), string side = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsOrder>> localVarResponse = await CancelOptionsOrdersAsyncWithHttpInfo(contract, underlying, side);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="underlying">Underlying (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsOrder&gt;)</returns>
        public async Task<ApiResponse<List<OptionsOrder>>> CancelOptionsOrdersAsyncWithHttpInfo (string contract = default(string), string underlying = default(string), string side = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<OptionsOrder>>("/options/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptionsOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>OptionsOrder</returns>
        public OptionsOrder GetOptionsOrder (long orderId)
        {
             ApiResponse<OptionsOrder> localVarResponse = GetOptionsOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of OptionsOrder</returns>
        public ApiResponse<OptionsOrder> GetOptionsOrderWithHttpInfo (long orderId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionsOrder>("/options/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of OptionsOrder</returns>
        public async Task<OptionsOrder> GetOptionsOrderAsync (long orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsOrder> localVarResponse = await GetOptionsOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (OptionsOrder)</returns>
        public async Task<ApiResponse<OptionsOrder>> GetOptionsOrderAsyncWithHttpInfo (long orderId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionsOrder>("/options/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>OptionsOrder</returns>
        public OptionsOrder CancelOptionsOrder (long orderId)
        {
             ApiResponse<OptionsOrder> localVarResponse = CancelOptionsOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of OptionsOrder</returns>
        public ApiResponse<OptionsOrder> CancelOptionsOrderWithHttpInfo (long orderId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<OptionsOrder>("/options/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptionsOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of OptionsOrder</returns>
        public async Task<OptionsOrder> CancelOptionsOrderAsync (long orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsOrder> localVarResponse = await CancelOptionsOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (OptionsOrder)</returns>
        public async Task<ApiResponse<OptionsOrder>> CancelOptionsOrderAsyncWithHttpInfo (long orderId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<OptionsOrder>("/options/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptionsOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Countdown cancel orders Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>TriggerTime</returns>
        public TriggerTime CountdownCancelAllOptions (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask)
        {
             ApiResponse<TriggerTime> localVarResponse = CountdownCancelAllOptionsWithHttpInfo(countdownCancelAllOptionsTask);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Countdown cancel orders Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>ApiResponse of TriggerTime</returns>
        public ApiResponse<TriggerTime> CountdownCancelAllOptionsWithHttpInfo (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask)
        {
            // verify the required parameter 'countdownCancelAllOptionsTask' is set
            if (countdownCancelAllOptionsTask == null)
                throw new ApiException(400, "Missing required parameter 'countdownCancelAllOptionsTask' when calling OptionsApi->CountdownCancelAllOptions");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countdownCancelAllOptionsTask;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TriggerTime>("/options/countdown_cancel_all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountdownCancelAllOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Countdown cancel orders Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>Task of TriggerTime</returns>
        public async Task<TriggerTime> CountdownCancelAllOptionsAsync (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask)
        {
             Io.Gate.GateApi.Client.ApiResponse<TriggerTime> localVarResponse = await CountdownCancelAllOptionsAsyncWithHttpInfo(countdownCancelAllOptionsTask);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Countdown cancel orders Option order heartbeat detection, when the &#x60;timeout&#x60; time set by the user is reached, if the existing countdown is not canceled or a new countdown is set, the related &#x60;option pending order&#x60; will be automatically canceled.  This interface can be called repeatedly to set a new countdown or cancel the countdown.  Usage example: Repeat this interface at intervals of 30 seconds, with each countdown &#x60;timeout&#x60; set to 30 (seconds).  If this interface is not called again within 30 seconds, all pending orders on the &#x60;underlying&#x60; &#x60;contract&#x60; you specified will be automatically cancelled. If &#x60;underlying&#x60; &#x60;contract&#x60; is not specified, all pending orders of the user will be automatically cancelled  If &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will expire and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllOptionsTask"></param>
        /// <returns>Task of ApiResponse (TriggerTime)</returns>
        public async Task<ApiResponse<TriggerTime>> CountdownCancelAllOptionsAsyncWithHttpInfo (CountdownCancelAllOptionsTask countdownCancelAllOptionsTask)
        {
            // verify the required parameter 'countdownCancelAllOptionsTask' is set
            if (countdownCancelAllOptionsTask == null)
                throw new ApiException(400, "Missing required parameter 'countdownCancelAllOptionsTask' when calling OptionsApi->CountdownCancelAllOptions");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = countdownCancelAllOptionsTask;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TriggerTime>("/options/countdown_cancel_all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountdownCancelAllOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;OptionsMyTrade&gt;</returns>
        public List<OptionsMyTrade> ListMyOptionsTrades (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<OptionsMyTrade>> localVarResponse = ListMyOptionsTradesWithHttpInfo(underlying, contract, limit, offset, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsMyTrade&gt;</returns>
        public ApiResponse<List<OptionsMyTrade>> ListMyOptionsTradesWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListMyOptionsTrades");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsMyTrade>>("/options/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyOptionsTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;OptionsMyTrade&gt;</returns>
        public async Task<List<OptionsMyTrade>> ListMyOptionsTradesAsync (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsMyTrade>> localVarResponse = await ListMyOptionsTradesAsyncWithHttpInfo(underlying, contract, limit, offset, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (Obtained by listing underlying endpoint)</param>
        /// <param name="contract">Options contract name (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsMyTrade&gt;)</returns>
        public async Task<ApiResponse<List<OptionsMyTrade>>> ListMyOptionsTradesAsyncWithHttpInfo (string underlying, string contract = default(string), int? limit = default(int?), int? offset = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'underlying' is set
            if (underlying == null)
                throw new ApiException(400, "Missing required parameter 'underlying' when calling OptionsApi->ListMyOptionsTrades");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsMyTrade>>("/options/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyOptionsTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMP Query 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>List&lt;OptionsMMP&gt;</returns>
        public List<OptionsMMP> GetOptionsMMP (string underlying = default(string))
        {
             ApiResponse<List<OptionsMMP>> localVarResponse = GetOptionsMMPWithHttpInfo(underlying);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MMP Query 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>ApiResponse of List&lt;OptionsMMP&gt;</returns>
        public ApiResponse<List<OptionsMMP>> GetOptionsMMPWithHttpInfo (string underlying = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OptionsMMP>>("/options/mmp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsMMP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMP Query 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of List&lt;OptionsMMP&gt;</returns>
        public async Task<List<OptionsMMP>> GetOptionsMMPAsync (string underlying = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OptionsMMP>> localVarResponse = await GetOptionsMMPAsyncWithHttpInfo(underlying);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MMP Query 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlying">Underlying (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OptionsMMP&gt;)</returns>
        public async Task<ApiResponse<List<OptionsMMP>>> GetOptionsMMPAsyncWithHttpInfo (string underlying = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (underlying != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "underlying", underlying));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OptionsMMP>>("/options/mmp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsMMP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMP Settings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>OptionsMMP</returns>
        public OptionsMMP SetOptionsMMP (OptionsMMP optionsMMP)
        {
             ApiResponse<OptionsMMP> localVarResponse = SetOptionsMMPWithHttpInfo(optionsMMP);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MMP Settings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>ApiResponse of OptionsMMP</returns>
        public ApiResponse<OptionsMMP> SetOptionsMMPWithHttpInfo (OptionsMMP optionsMMP)
        {
            // verify the required parameter 'optionsMMP' is set
            if (optionsMMP == null)
                throw new ApiException(400, "Missing required parameter 'optionsMMP' when calling OptionsApi->SetOptionsMMP");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = optionsMMP;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<OptionsMMP>("/options/mmp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOptionsMMP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMP Settings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>Task of OptionsMMP</returns>
        public async Task<OptionsMMP> SetOptionsMMPAsync (OptionsMMP optionsMMP)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsMMP> localVarResponse = await SetOptionsMMPAsyncWithHttpInfo(optionsMMP);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MMP Settings 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMP"></param>
        /// <returns>Task of ApiResponse (OptionsMMP)</returns>
        public async Task<ApiResponse<OptionsMMP>> SetOptionsMMPAsyncWithHttpInfo (OptionsMMP optionsMMP)
        {
            // verify the required parameter 'optionsMMP' is set
            if (optionsMMP == null)
                throw new ApiException(400, "Missing required parameter 'optionsMMP' when calling OptionsApi->SetOptionsMMP");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = optionsMMP;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionsMMP>("/options/mmp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOptionsMMP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMP Reset 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>OptionsMMP</returns>
        public OptionsMMP ResetOptionsMMP (OptionsMMPReset optionsMMPReset)
        {
             ApiResponse<OptionsMMP> localVarResponse = ResetOptionsMMPWithHttpInfo(optionsMMPReset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// MMP Reset 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>ApiResponse of OptionsMMP</returns>
        public ApiResponse<OptionsMMP> ResetOptionsMMPWithHttpInfo (OptionsMMPReset optionsMMPReset)
        {
            // verify the required parameter 'optionsMMPReset' is set
            if (optionsMMPReset == null)
                throw new ApiException(400, "Missing required parameter 'optionsMMPReset' when calling OptionsApi->ResetOptionsMMP");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = optionsMMPReset;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<OptionsMMP>("/options/mmp/reset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetOptionsMMP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMP Reset 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>Task of OptionsMMP</returns>
        public async Task<OptionsMMP> ResetOptionsMMPAsync (OptionsMMPReset optionsMMPReset)
        {
             Io.Gate.GateApi.Client.ApiResponse<OptionsMMP> localVarResponse = await ResetOptionsMMPAsyncWithHttpInfo(optionsMMPReset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MMP Reset 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsMMPReset"></param>
        /// <returns>Task of ApiResponse (OptionsMMP)</returns>
        public async Task<ApiResponse<OptionsMMP>> ResetOptionsMMPAsyncWithHttpInfo (OptionsMMPReset optionsMMPReset)
        {
            // verify the required parameter 'optionsMMPReset' is set
            if (optionsMMPReset == null)
                throw new ApiException(400, "Missing required parameter 'optionsMMPReset' when calling OptionsApi->ResetOptionsMMP");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = optionsMMPReset;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionsMMP>("/options/mmp/reset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetOptionsMMP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
