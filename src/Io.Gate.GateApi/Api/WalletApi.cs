/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List chains supported for specified currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>List&lt;CurrencyChain&gt;</returns>
        List<CurrencyChain> ListCurrencyChains (string currency);

        /// <summary>
        /// List chains supported for specified currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of List&lt;CurrencyChain&gt;</returns>
        ApiResponse<List<CurrencyChain>> ListCurrencyChainsWithHttpInfo (string currency);
        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>DepositAddress</returns>
        DepositAddress GetDepositAddress (string currency);

        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of DepositAddress</returns>
        ApiResponse<DepositAddress> GetDepositAddressWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;WithdrawalRecord&gt;</returns>
        List<WithdrawalRecord> ListWithdrawals (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WithdrawalRecord&gt;</returns>
        ApiResponse<List<WithdrawalRecord>> ListWithdrawalsWithHttpInfo (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;DepositRecord&gt;</returns>
        List<DepositRecord> ListDeposits (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;DepositRecord&gt;</returns>
        ApiResponse<List<DepositRecord>> ListDepositsWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>TransactionID</returns>
        TransactionID Transfer (Transfer transfer);

        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>ApiResponse of TransactionID</returns>
        ApiResponse<TransactionID> TransferWithHttpInfo (Transfer transfer);
        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;SubAccountTransfer&gt;</returns>
        List<SubAccountTransfer> ListSubAccountTransfers (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;SubAccountTransfer&gt;</returns>
        ApiResponse<List<SubAccountTransfer>> ListSubAccountTransfersWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>TransactionID</returns>
        TransactionID TransferWithSubAccount (SubAccountTransfer subAccountTransfer);

        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>ApiResponse of TransactionID</returns>
        ApiResponse<TransactionID> TransferWithSubAccountWithHttpInfo (SubAccountTransfer subAccountTransfer);
        /// <summary>
        /// Sub-account transfers to sub-account
        /// </summary>
        /// <remarks>
        /// It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>TransactionID</returns>
        TransactionID SubAccountToSubAccount (SubAccountToSubAccount subAccountToSubAccount);

        /// <summary>
        /// Sub-account transfers to sub-account
        /// </summary>
        /// <remarks>
        /// It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>ApiResponse of TransactionID</returns>
        ApiResponse<TransactionID> SubAccountToSubAccountWithHttpInfo (SubAccountToSubAccount subAccountToSubAccount);
        /// <summary>
        /// Transfer status query
        /// </summary>
        /// <remarks>
        /// Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>TransferOrderStatus</returns>
        TransferOrderStatus GetTransferOrderStatus (string clientOrderId = default(string), string txId = default(string));

        /// <summary>
        /// Transfer status query
        /// </summary>
        /// <remarks>
        /// Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>ApiResponse of TransferOrderStatus</returns>
        ApiResponse<TransferOrderStatus> GetTransferOrderStatusWithHttpInfo (string clientOrderId = default(string), string txId = default(string));
        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;WithdrawStatus&gt;</returns>
        List<WithdrawStatus> ListWithdrawStatus (string currency = default(string));

        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;WithdrawStatus&gt;</returns>
        ApiResponse<List<WithdrawStatus>> ListWithdrawStatusWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>List&lt;SubAccountBalance&gt;</returns>
        List<SubAccountBalance> ListSubAccountBalances (string subUid = default(string));

        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountBalance&gt;</returns>
        ApiResponse<List<SubAccountBalance>> ListSubAccountBalancesWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Query sub accounts&#39; margin balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>List&lt;SubAccountMarginBalance&gt;</returns>
        List<SubAccountMarginBalance> ListSubAccountMarginBalances (string subUid = default(string));

        /// <summary>
        /// Query sub accounts&#39; margin balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountMarginBalance&gt;</returns>
        ApiResponse<List<SubAccountMarginBalance>> ListSubAccountMarginBalancesWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Query sub accounts&#39; futures account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>List&lt;SubAccountFuturesBalance&gt;</returns>
        List<SubAccountFuturesBalance> ListSubAccountFuturesBalances (string subUid = default(string), string settle = default(string));

        /// <summary>
        /// Query sub accounts&#39; futures account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountFuturesBalance&gt;</returns>
        ApiResponse<List<SubAccountFuturesBalance>> ListSubAccountFuturesBalancesWithHttpInfo (string subUid = default(string), string settle = default(string));
        /// <summary>
        /// Query subaccount&#39;s cross_margin account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>List&lt;SubAccountCrossMarginBalance&gt;</returns>
        List<SubAccountCrossMarginBalance> ListSubAccountCrossMarginBalances (string subUid = default(string));

        /// <summary>
        /// Query subaccount&#39;s cross_margin account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountCrossMarginBalance&gt;</returns>
        ApiResponse<List<SubAccountCrossMarginBalance>> ListSubAccountCrossMarginBalancesWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Query saved address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;SavedAddress&gt;</returns>
        List<SavedAddress> ListSavedAddress (string currency, string chain = default(string), string limit = default(string), int? page = default(int?));

        /// <summary>
        /// Query saved address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;SavedAddress&gt;</returns>
        ApiResponse<List<SavedAddress>> ListSavedAddressWithHttpInfo (string currency, string chain = default(string), string limit = default(string), int? page = default(int?));
        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>TradeFee</returns>
        TradeFee GetTradeFee (string currencyPair = default(string), string settle = default(string));

        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>ApiResponse of TradeFee</returns>
        ApiResponse<TradeFee> GetTradeFeeWithHttpInfo (string currencyPair = default(string), string settle = default(string));
        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>TotalBalance</returns>
        TotalBalance GetTotalBalance (string currency = default(string));

        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>ApiResponse of TotalBalance</returns>
        ApiResponse<TotalBalance> GetTotalBalanceWithHttpInfo (string currency = default(string));
        /// <summary>
        /// List small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SmallBalance&gt;</returns>
        List<SmallBalance> ListSmallBalance ();

        /// <summary>
        /// List small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SmallBalance&gt;</returns>
        ApiResponse<List<SmallBalance>> ListSmallBalanceWithHttpInfo ();
        /// <summary>
        /// Convert small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns></returns>
        void ConvertSmallBalance (ConvertSmallBalance convertSmallBalance);

        /// <summary>
        /// Convert small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConvertSmallBalanceWithHttpInfo (ConvertSmallBalance convertSmallBalance);
        /// <summary>
        /// List small balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;SmallBalanceHistory&gt;</returns>
        List<SmallBalanceHistory> ListSmallBalanceHistory (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List small balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;SmallBalanceHistory&gt;</returns>
        ApiResponse<List<SmallBalanceHistory>> ListSmallBalanceHistoryWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Retrieve the UID transfer history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>List&lt;UidPushOrder&gt;</returns>
        List<UidPushOrder> ListPushOrders (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string));

        /// <summary>
        /// Retrieve the UID transfer history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>ApiResponse of List&lt;UidPushOrder&gt;</returns>
        ApiResponse<List<UidPushOrder>> ListPushOrdersWithHttpInfo (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List chains supported for specified currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of List&lt;CurrencyChain&gt;</returns>
        Task<List<CurrencyChain>> ListCurrencyChainsAsync (string currency);

        /// <summary>
        /// List chains supported for specified currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyChain&gt;)</returns>
        Task<ApiResponse<List<CurrencyChain>>> ListCurrencyChainsAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of DepositAddress</returns>
        Task<DepositAddress> GetDepositAddressAsync (string currency);

        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (DepositAddress)</returns>
        Task<ApiResponse<DepositAddress>> GetDepositAddressAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;WithdrawalRecord&gt;</returns>
        Task<List<WithdrawalRecord>> ListWithdrawalsAsync (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;WithdrawalRecord&gt;)</returns>
        Task<ApiResponse<List<WithdrawalRecord>>> ListWithdrawalsAsyncWithHttpInfo (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;DepositRecord&gt;</returns>
        Task<List<DepositRecord>> ListDepositsAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;DepositRecord&gt;)</returns>
        Task<ApiResponse<List<DepositRecord>>> ListDepositsAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of TransactionID</returns>
        Task<TransactionID> TransferAsync (Transfer transfer);

        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        Task<ApiResponse<TransactionID>> TransferAsyncWithHttpInfo (Transfer transfer);
        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;SubAccountTransfer&gt;</returns>
        Task<List<SubAccountTransfer>> ListSubAccountTransfersAsync (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountTransfer&gt;)</returns>
        Task<ApiResponse<List<SubAccountTransfer>>> ListSubAccountTransfersAsyncWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of TransactionID</returns>
        Task<TransactionID> TransferWithSubAccountAsync (SubAccountTransfer subAccountTransfer);

        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        Task<ApiResponse<TransactionID>> TransferWithSubAccountAsyncWithHttpInfo (SubAccountTransfer subAccountTransfer);
        /// <summary>
        /// Sub-account transfers to sub-account
        /// </summary>
        /// <remarks>
        /// It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>Task of TransactionID</returns>
        Task<TransactionID> SubAccountToSubAccountAsync (SubAccountToSubAccount subAccountToSubAccount);

        /// <summary>
        /// Sub-account transfers to sub-account
        /// </summary>
        /// <remarks>
        /// It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        Task<ApiResponse<TransactionID>> SubAccountToSubAccountAsyncWithHttpInfo (SubAccountToSubAccount subAccountToSubAccount);
        /// <summary>
        /// Transfer status query
        /// </summary>
        /// <remarks>
        /// Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>Task of TransferOrderStatus</returns>
        Task<TransferOrderStatus> GetTransferOrderStatusAsync (string clientOrderId = default(string), string txId = default(string));

        /// <summary>
        /// Transfer status query
        /// </summary>
        /// <remarks>
        /// Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>Task of ApiResponse (TransferOrderStatus)</returns>
        Task<ApiResponse<TransferOrderStatus>> GetTransferOrderStatusAsyncWithHttpInfo (string clientOrderId = default(string), string txId = default(string));
        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;WithdrawStatus&gt;</returns>
        Task<List<WithdrawStatus>> ListWithdrawStatusAsync (string currency = default(string));

        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WithdrawStatus&gt;)</returns>
        Task<ApiResponse<List<WithdrawStatus>>> ListWithdrawStatusAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of List&lt;SubAccountBalance&gt;</returns>
        Task<List<SubAccountBalance>> ListSubAccountBalancesAsync (string subUid = default(string));

        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountBalance&gt;)</returns>
        Task<ApiResponse<List<SubAccountBalance>>> ListSubAccountBalancesAsyncWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Query sub accounts&#39; margin balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of List&lt;SubAccountMarginBalance&gt;</returns>
        Task<List<SubAccountMarginBalance>> ListSubAccountMarginBalancesAsync (string subUid = default(string));

        /// <summary>
        /// Query sub accounts&#39; margin balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountMarginBalance&gt;)</returns>
        Task<ApiResponse<List<SubAccountMarginBalance>>> ListSubAccountMarginBalancesAsyncWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Query sub accounts&#39; futures account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>Task of List&lt;SubAccountFuturesBalance&gt;</returns>
        Task<List<SubAccountFuturesBalance>> ListSubAccountFuturesBalancesAsync (string subUid = default(string), string settle = default(string));

        /// <summary>
        /// Query sub accounts&#39; futures account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountFuturesBalance&gt;)</returns>
        Task<ApiResponse<List<SubAccountFuturesBalance>>> ListSubAccountFuturesBalancesAsyncWithHttpInfo (string subUid = default(string), string settle = default(string));
        /// <summary>
        /// Query subaccount&#39;s cross_margin account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of List&lt;SubAccountCrossMarginBalance&gt;</returns>
        Task<List<SubAccountCrossMarginBalance>> ListSubAccountCrossMarginBalancesAsync (string subUid = default(string));

        /// <summary>
        /// Query subaccount&#39;s cross_margin account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountCrossMarginBalance&gt;)</returns>
        Task<ApiResponse<List<SubAccountCrossMarginBalance>>> ListSubAccountCrossMarginBalancesAsyncWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Query saved address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;SavedAddress&gt;</returns>
        Task<List<SavedAddress>> ListSavedAddressAsync (string currency, string chain = default(string), string limit = default(string), int? page = default(int?));

        /// <summary>
        /// Query saved address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;SavedAddress&gt;)</returns>
        Task<ApiResponse<List<SavedAddress>>> ListSavedAddressAsyncWithHttpInfo (string currency, string chain = default(string), string limit = default(string), int? page = default(int?));
        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>Task of TradeFee</returns>
        Task<TradeFee> GetTradeFeeAsync (string currencyPair = default(string), string settle = default(string));

        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>Task of ApiResponse (TradeFee)</returns>
        Task<ApiResponse<TradeFee>> GetTradeFeeAsyncWithHttpInfo (string currencyPair = default(string), string settle = default(string));
        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of TotalBalance</returns>
        Task<TotalBalance> GetTotalBalanceAsync (string currency = default(string));

        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of ApiResponse (TotalBalance)</returns>
        Task<ApiResponse<TotalBalance>> GetTotalBalanceAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// List small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SmallBalance&gt;</returns>
        Task<List<SmallBalance>> ListSmallBalanceAsync ();

        /// <summary>
        /// List small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SmallBalance&gt;)</returns>
        Task<ApiResponse<List<SmallBalance>>> ListSmallBalanceAsyncWithHttpInfo ();
        /// <summary>
        /// Convert small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns>Task of void</returns>
        Task ConvertSmallBalanceAsync (ConvertSmallBalance convertSmallBalance);

        /// <summary>
        /// Convert small balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> ConvertSmallBalanceAsyncWithHttpInfo (ConvertSmallBalance convertSmallBalance);
        /// <summary>
        /// List small balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;SmallBalanceHistory&gt;</returns>
        Task<List<SmallBalanceHistory>> ListSmallBalanceHistoryAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List small balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;SmallBalanceHistory&gt;)</returns>
        Task<ApiResponse<List<SmallBalanceHistory>>> ListSmallBalanceHistoryAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Retrieve the UID transfer history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>Task of List&lt;UidPushOrder&gt;</returns>
        Task<List<UidPushOrder>> ListPushOrdersAsync (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string));

        /// <summary>
        /// Retrieve the UID transfer history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;UidPushOrder&gt;)</returns>
        Task<ApiResponse<List<UidPushOrder>>> ListPushOrdersAsyncWithHttpInfo (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IWalletApiSync, IWalletApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WalletApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List chains supported for specified currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>List&lt;CurrencyChain&gt;</returns>
        public List<CurrencyChain> ListCurrencyChains (string currency)
        {
             ApiResponse<List<CurrencyChain>> localVarResponse = ListCurrencyChainsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List chains supported for specified currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of List&lt;CurrencyChain&gt;</returns>
        public ApiResponse<List<CurrencyChain>> ListCurrencyChainsWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->ListCurrencyChains");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CurrencyChain>>("/wallet/currency_chains", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyChains", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List chains supported for specified currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of List&lt;CurrencyChain&gt;</returns>
        public async Task<List<CurrencyChain>> ListCurrencyChainsAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CurrencyChain>> localVarResponse = await ListCurrencyChainsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List chains supported for specified currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyChain&gt;)</returns>
        public async Task<ApiResponse<List<CurrencyChain>>> ListCurrencyChainsAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->ListCurrencyChains");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CurrencyChain>>("/wallet/currency_chains", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyChains", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>DepositAddress</returns>
        public DepositAddress GetDepositAddress (string currency)
        {
             ApiResponse<DepositAddress> localVarResponse = GetDepositAddressWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of DepositAddress</returns>
        public ApiResponse<DepositAddress> GetDepositAddressWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetDepositAddress");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<DepositAddress>("/wallet/deposit_address", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDepositAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of DepositAddress</returns>
        public async Task<DepositAddress> GetDepositAddressAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<DepositAddress> localVarResponse = await GetDepositAddressAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (DepositAddress)</returns>
        public async Task<ApiResponse<DepositAddress>> GetDepositAddressAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetDepositAddress");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DepositAddress>("/wallet/deposit_address", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDepositAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;WithdrawalRecord&gt;</returns>
        public List<WithdrawalRecord> ListWithdrawals (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<WithdrawalRecord>> localVarResponse = ListWithdrawalsWithHttpInfo(currency, withdrawId, assetClass, withdrawOrderId, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WithdrawalRecord&gt;</returns>
        public ApiResponse<List<WithdrawalRecord>> ListWithdrawalsWithHttpInfo (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (withdrawId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "withdraw_id", withdrawId));
            }
            if (assetClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "asset_class", assetClass));
            }
            if (withdrawOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "withdraw_order_id", withdrawOrderId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WithdrawalRecord>>("/wallet/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;WithdrawalRecord&gt;</returns>
        public async Task<List<WithdrawalRecord>> ListWithdrawalsAsync (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<WithdrawalRecord>> localVarResponse = await ListWithdrawalsAsyncWithHttpInfo(currency, withdrawId, assetClass, withdrawOrderId, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="withdrawId">The withdrawal record id starts with w, such as: w1879219868. When withdraw_id is not empty, the value querys this withdrawal record and no longer querys according to time (optional)</param>
        /// <param name="assetClass">The currency type of withdrawal record is empty by default. It supports users to query the withdrawal records in the main and innovation areas on demand. Value range: SPOT, PILOT  SPOT: Main Zone  PILOT: Innovation Zone (optional)</param>
        /// <param name="withdrawOrderId">User-defined order number when withdrawing. Default is empty. When not empty, the specified user-defined order number record will be queried (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;WithdrawalRecord&gt;)</returns>
        public async Task<ApiResponse<List<WithdrawalRecord>>> ListWithdrawalsAsyncWithHttpInfo (string currency = default(string), string withdrawId = default(string), string assetClass = default(string), string withdrawOrderId = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (withdrawId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "withdraw_id", withdrawId));
            }
            if (assetClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "asset_class", assetClass));
            }
            if (withdrawOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "withdraw_order_id", withdrawOrderId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WithdrawalRecord>>("/wallet/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;DepositRecord&gt;</returns>
        public List<DepositRecord> ListDeposits (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<DepositRecord>> localVarResponse = ListDepositsWithHttpInfo(currency, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;DepositRecord&gt;</returns>
        public ApiResponse<List<DepositRecord>> ListDepositsWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DepositRecord>>("/wallet/deposits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeposits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;DepositRecord&gt;</returns>
        public async Task<List<DepositRecord>> ListDepositsAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DepositRecord>> localVarResponse = await ListDepositsAsyncWithHttpInfo(currency, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">The maximum number of entries returned in the list is limited to 500 transactions. (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;DepositRecord&gt;)</returns>
        public async Task<ApiResponse<List<DepositRecord>>> ListDepositsAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DepositRecord>>("/wallet/deposits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeposits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>TransactionID</returns>
        public TransactionID Transfer (Transfer transfer)
        {
             ApiResponse<TransactionID> localVarResponse = TransferWithHttpInfo(transfer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>ApiResponse of TransactionID</returns>
        public ApiResponse<TransactionID> TransferWithHttpInfo (Transfer transfer)
        {
            // verify the required parameter 'transfer' is set
            if (transfer == null)
                throw new ApiException(400, "Missing required parameter 'transfer' when calling WalletApi->Transfer");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionID>("/wallet/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of TransactionID</returns>
        public async Task<TransactionID> TransferAsync (Transfer transfer)
        {
             Io.Gate.GateApi.Client.ApiResponse<TransactionID> localVarResponse = await TransferAsyncWithHttpInfo(transfer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - options
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        public async Task<ApiResponse<TransactionID>> TransferAsyncWithHttpInfo (Transfer transfer)
        {
            // verify the required parameter 'transfer' is set
            if (transfer == null)
                throw new ApiException(400, "Missing required parameter 'transfer' when calling WalletApi->Transfer");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = transfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionID>("/wallet/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;SubAccountTransfer&gt;</returns>
        public List<SubAccountTransfer> ListSubAccountTransfers (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<SubAccountTransfer>> localVarResponse = ListSubAccountTransfersWithHttpInfo(subUid, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;SubAccountTransfer&gt;</returns>
        public ApiResponse<List<SubAccountTransfer>> ListSubAccountTransfersWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountTransfer>>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;SubAccountTransfer&gt;</returns>
        public async Task<List<SubAccountTransfer>> ListSubAccountTransfersAsync (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountTransfer>> localVarResponse = await ListSubAccountTransfersAsyncWithHttpInfo(subUid, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountTransfer&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountTransfer>>> ListSubAccountTransfersAsyncWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountTransfer>>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>TransactionID</returns>
        public TransactionID TransferWithSubAccount (SubAccountTransfer subAccountTransfer)
        {
             ApiResponse<TransactionID> localVarResponse = TransferWithSubAccountWithHttpInfo(subAccountTransfer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>ApiResponse of TransactionID</returns>
        public ApiResponse<TransactionID> TransferWithSubAccountWithHttpInfo (SubAccountTransfer subAccountTransfer)
        {
            // verify the required parameter 'subAccountTransfer' is set
            if (subAccountTransfer == null)
                throw new ApiException(400, "Missing required parameter 'subAccountTransfer' when calling WalletApi->TransferWithSubAccount");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subAccountTransfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionID>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferWithSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of TransactionID</returns>
        public async Task<TransactionID> TransferWithSubAccountAsync (SubAccountTransfer subAccountTransfer)
        {
             Io.Gate.GateApi.Client.ApiResponse<TransactionID> localVarResponse = await TransferWithSubAccountAsyncWithHttpInfo(subAccountTransfer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        public async Task<ApiResponse<TransactionID>> TransferWithSubAccountAsyncWithHttpInfo (SubAccountTransfer subAccountTransfer)
        {
            // verify the required parameter 'subAccountTransfer' is set
            if (subAccountTransfer == null)
                throw new ApiException(400, "Missing required parameter 'subAccountTransfer' when calling WalletApi->TransferWithSubAccount");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = subAccountTransfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionID>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferWithSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sub-account transfers to sub-account It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>TransactionID</returns>
        public TransactionID SubAccountToSubAccount (SubAccountToSubAccount subAccountToSubAccount)
        {
             ApiResponse<TransactionID> localVarResponse = SubAccountToSubAccountWithHttpInfo(subAccountToSubAccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sub-account transfers to sub-account It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>ApiResponse of TransactionID</returns>
        public ApiResponse<TransactionID> SubAccountToSubAccountWithHttpInfo (SubAccountToSubAccount subAccountToSubAccount)
        {
            // verify the required parameter 'subAccountToSubAccount' is set
            if (subAccountToSubAccount == null)
                throw new ApiException(400, "Missing required parameter 'subAccountToSubAccount' when calling WalletApi->SubAccountToSubAccount");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subAccountToSubAccount;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionID>("/wallet/sub_account_to_sub_account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubAccountToSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sub-account transfers to sub-account It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>Task of TransactionID</returns>
        public async Task<TransactionID> SubAccountToSubAccountAsync (SubAccountToSubAccount subAccountToSubAccount)
        {
             Io.Gate.GateApi.Client.ApiResponse<TransactionID> localVarResponse = await SubAccountToSubAccountAsyncWithHttpInfo(subAccountToSubAccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sub-account transfers to sub-account It is possible to perform balance transfers between two sub-accounts under the same main account. You can use either the API Key of the main account or the API Key of the sub-account to initiate the transfer.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountToSubAccount"></param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        public async Task<ApiResponse<TransactionID>> SubAccountToSubAccountAsyncWithHttpInfo (SubAccountToSubAccount subAccountToSubAccount)
        {
            // verify the required parameter 'subAccountToSubAccount' is set
            if (subAccountToSubAccount == null)
                throw new ApiException(400, "Missing required parameter 'subAccountToSubAccount' when calling WalletApi->SubAccountToSubAccount");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = subAccountToSubAccount;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionID>("/wallet/sub_account_to_sub_account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubAccountToSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer status query Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>TransferOrderStatus</returns>
        public TransferOrderStatus GetTransferOrderStatus (string clientOrderId = default(string), string txId = default(string))
        {
             ApiResponse<TransferOrderStatus> localVarResponse = GetTransferOrderStatusWithHttpInfo(clientOrderId, txId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer status query Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>ApiResponse of TransferOrderStatus</returns>
        public ApiResponse<TransferOrderStatus> GetTransferOrderStatusWithHttpInfo (string clientOrderId = default(string), string txId = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "client_order_id", clientOrderId));
            }
            if (txId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "tx_id", txId));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransferOrderStatus>("/wallet/order_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransferOrderStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer status query Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>Task of TransferOrderStatus</returns>
        public async Task<TransferOrderStatus> GetTransferOrderStatusAsync (string clientOrderId = default(string), string txId = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<TransferOrderStatus> localVarResponse = await GetTransferOrderStatusAsyncWithHttpInfo(clientOrderId, txId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer status query Support querying transfer status based on user-defined client_order_id or tx_id returned by the transfer interface
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens &#39;-&#39;, and underscores &#39;_&#39;, with a length ranging from 1 to 64 characters. (optional)</param>
        /// <param name="txId">The transfer operation number and client_order_id cannot be empty at the same time (optional)</param>
        /// <returns>Task of ApiResponse (TransferOrderStatus)</returns>
        public async Task<ApiResponse<TransferOrderStatus>> GetTransferOrderStatusAsyncWithHttpInfo (string clientOrderId = default(string), string txId = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (clientOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "client_order_id", clientOrderId));
            }
            if (txId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "tx_id", txId));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransferOrderStatus>("/wallet/order_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransferOrderStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;WithdrawStatus&gt;</returns>
        public List<WithdrawStatus> ListWithdrawStatus (string currency = default(string))
        {
             ApiResponse<List<WithdrawStatus>> localVarResponse = ListWithdrawStatusWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;WithdrawStatus&gt;</returns>
        public ApiResponse<List<WithdrawStatus>> ListWithdrawStatusWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WithdrawStatus>>("/wallet/withdraw_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;WithdrawStatus&gt;</returns>
        public async Task<List<WithdrawStatus>> ListWithdrawStatusAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<WithdrawStatus>> localVarResponse = await ListWithdrawStatusAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WithdrawStatus&gt;)</returns>
        public async Task<ApiResponse<List<WithdrawStatus>>> ListWithdrawStatusAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WithdrawStatus>>("/wallet/withdraw_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>List&lt;SubAccountBalance&gt;</returns>
        public List<SubAccountBalance> ListSubAccountBalances (string subUid = default(string))
        {
             ApiResponse<List<SubAccountBalance>> localVarResponse = ListSubAccountBalancesWithHttpInfo(subUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountBalance&gt;</returns>
        public ApiResponse<List<SubAccountBalance>> ListSubAccountBalancesWithHttpInfo (string subUid = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountBalance>>("/wallet/sub_account_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of List&lt;SubAccountBalance&gt;</returns>
        public async Task<List<SubAccountBalance>> ListSubAccountBalancesAsync (string subUid = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountBalance>> localVarResponse = await ListSubAccountBalancesAsyncWithHttpInfo(subUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountBalance&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountBalance>>> ListSubAccountBalancesAsyncWithHttpInfo (string subUid = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountBalance>>("/wallet/sub_account_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query sub accounts&#39; margin balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>List&lt;SubAccountMarginBalance&gt;</returns>
        public List<SubAccountMarginBalance> ListSubAccountMarginBalances (string subUid = default(string))
        {
             ApiResponse<List<SubAccountMarginBalance>> localVarResponse = ListSubAccountMarginBalancesWithHttpInfo(subUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query sub accounts&#39; margin balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountMarginBalance&gt;</returns>
        public ApiResponse<List<SubAccountMarginBalance>> ListSubAccountMarginBalancesWithHttpInfo (string subUid = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountMarginBalance>>("/wallet/sub_account_margin_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountMarginBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query sub accounts&#39; margin balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of List&lt;SubAccountMarginBalance&gt;</returns>
        public async Task<List<SubAccountMarginBalance>> ListSubAccountMarginBalancesAsync (string subUid = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountMarginBalance>> localVarResponse = await ListSubAccountMarginBalancesAsyncWithHttpInfo(subUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query sub accounts&#39; margin balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountMarginBalance&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountMarginBalance>>> ListSubAccountMarginBalancesAsyncWithHttpInfo (string subUid = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountMarginBalance>>("/wallet/sub_account_margin_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountMarginBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query sub accounts&#39; futures account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>List&lt;SubAccountFuturesBalance&gt;</returns>
        public List<SubAccountFuturesBalance> ListSubAccountFuturesBalances (string subUid = default(string), string settle = default(string))
        {
             ApiResponse<List<SubAccountFuturesBalance>> localVarResponse = ListSubAccountFuturesBalancesWithHttpInfo(subUid, settle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query sub accounts&#39; futures account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountFuturesBalance&gt;</returns>
        public ApiResponse<List<SubAccountFuturesBalance>> ListSubAccountFuturesBalancesWithHttpInfo (string subUid = default(string), string settle = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }
            if (settle != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "settle", settle));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountFuturesBalance>>("/wallet/sub_account_futures_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountFuturesBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query sub accounts&#39; futures account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>Task of List&lt;SubAccountFuturesBalance&gt;</returns>
        public async Task<List<SubAccountFuturesBalance>> ListSubAccountFuturesBalancesAsync (string subUid = default(string), string settle = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountFuturesBalance>> localVarResponse = await ListSubAccountFuturesBalancesAsyncWithHttpInfo(subUid, settle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query sub accounts&#39; futures account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <param name="settle">Query only balances of specified settle currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountFuturesBalance&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountFuturesBalance>>> ListSubAccountFuturesBalancesAsyncWithHttpInfo (string subUid = default(string), string settle = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }
            if (settle != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "settle", settle));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountFuturesBalance>>("/wallet/sub_account_futures_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountFuturesBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query subaccount&#39;s cross_margin account info 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>List&lt;SubAccountCrossMarginBalance&gt;</returns>
        public List<SubAccountCrossMarginBalance> ListSubAccountCrossMarginBalances (string subUid = default(string))
        {
             ApiResponse<List<SubAccountCrossMarginBalance>> localVarResponse = ListSubAccountCrossMarginBalancesWithHttpInfo(subUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query subaccount&#39;s cross_margin account info 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountCrossMarginBalance&gt;</returns>
        public ApiResponse<List<SubAccountCrossMarginBalance>> ListSubAccountCrossMarginBalancesWithHttpInfo (string subUid = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountCrossMarginBalance>>("/wallet/sub_account_cross_margin_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountCrossMarginBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query subaccount&#39;s cross_margin account info 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of List&lt;SubAccountCrossMarginBalance&gt;</returns>
        public async Task<List<SubAccountCrossMarginBalance>> ListSubAccountCrossMarginBalancesAsync (string subUid = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountCrossMarginBalance>> localVarResponse = await ListSubAccountCrossMarginBalancesAsyncWithHttpInfo(subUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query subaccount&#39;s cross_margin account info 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">User ID of sub-account, you can query multiple records separated by &#x60;,&#x60;. If not specified, it will return the records of all sub accounts (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountCrossMarginBalance&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountCrossMarginBalance>>> ListSubAccountCrossMarginBalancesAsyncWithHttpInfo (string subUid = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountCrossMarginBalance>>("/wallet/sub_account_cross_margin_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountCrossMarginBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query saved address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;SavedAddress&gt;</returns>
        public List<SavedAddress> ListSavedAddress (string currency, string chain = default(string), string limit = default(string), int? page = default(int?))
        {
             ApiResponse<List<SavedAddress>> localVarResponse = ListSavedAddressWithHttpInfo(currency, chain, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query saved address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;SavedAddress&gt;</returns>
        public ApiResponse<List<SavedAddress>> ListSavedAddressWithHttpInfo (string currency, string chain = default(string), string limit = default(string), int? page = default(int?))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->ListSavedAddress");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SavedAddress>>("/wallet/saved_address", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSavedAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query saved address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;SavedAddress&gt;</returns>
        public async Task<List<SavedAddress>> ListSavedAddressAsync (string currency, string chain = default(string), string limit = default(string), int? page = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SavedAddress>> localVarResponse = await ListSavedAddressAsyncWithHttpInfo(currency, chain, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query saved address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="chain">Chain name (optional, default to &quot;&quot;)</param>
        /// <param name="limit">Maximum number returned, 100 at most (optional, default to &quot;50&quot;)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;SavedAddress&gt;)</returns>
        public async Task<ApiResponse<List<SavedAddress>>> ListSavedAddressAsyncWithHttpInfo (string currency, string chain = default(string), string limit = default(string), int? page = default(int?))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->ListSavedAddress");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SavedAddress>>("/wallet/saved_address", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSavedAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>TradeFee</returns>
        public TradeFee GetTradeFee (string currencyPair = default(string), string settle = default(string))
        {
             ApiResponse<TradeFee> localVarResponse = GetTradeFeeWithHttpInfo(currencyPair, settle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>ApiResponse of TradeFee</returns>
        public ApiResponse<TradeFee> GetTradeFeeWithHttpInfo (string currencyPair = default(string), string settle = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (settle != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "settle", settle));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<TradeFee>("/wallet/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTradeFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>Task of TradeFee</returns>
        public async Task<TradeFee> GetTradeFeeAsync (string currencyPair = default(string), string settle = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<TradeFee> localVarResponse = await GetTradeFeeAsyncWithHttpInfo(currencyPair, settle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <param name="settle">Specify the settlement currency of the contract to get more accurate rate settings  This field is optional. Generally, the rate settings for all settlement currencies are the same. (optional)</param>
        /// <returns>Task of ApiResponse (TradeFee)</returns>
        public async Task<ApiResponse<TradeFee>> GetTradeFeeAsyncWithHttpInfo (string currencyPair = default(string), string settle = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (settle != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "settle", settle));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradeFee>("/wallet/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTradeFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user&#39;s total balances This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>TotalBalance</returns>
        public TotalBalance GetTotalBalance (string currency = default(string))
        {
             ApiResponse<TotalBalance> localVarResponse = GetTotalBalanceWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user&#39;s total balances This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>ApiResponse of TotalBalance</returns>
        public ApiResponse<TotalBalance> GetTotalBalanceWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<TotalBalance>("/wallet/total_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotalBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user&#39;s total balances This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of TotalBalance</returns>
        public async Task<TotalBalance> GetTotalBalanceAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<TotalBalance> localVarResponse = await GetTotalBalanceAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user&#39;s total balances This endpoint returns an approximate sum of exchanged amount from all currencies to input currency for each account.The exchange rate and account balance could have been cached for at most 1 minute. It is not recommended to use its result for any trading calculation.  For trading calculation, use the corresponding account query endpoint for each account type. For example:   - &#x60;GET /spot/accounts&#x60; to query spot account balance - &#x60;GET /margin/accounts&#x60; to query margin account balance - &#x60;GET /futures/{settle}/accounts&#x60; to query futures account balance
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of ApiResponse (TotalBalance)</returns>
        public async Task<ApiResponse<TotalBalance>> GetTotalBalanceAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TotalBalance>("/wallet/total_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotalBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SmallBalance&gt;</returns>
        public List<SmallBalance> ListSmallBalance ()
        {
             ApiResponse<List<SmallBalance>> localVarResponse = ListSmallBalanceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SmallBalance&gt;</returns>
        public ApiResponse<List<SmallBalance>> ListSmallBalanceWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SmallBalance>>("/wallet/small_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmallBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SmallBalance&gt;</returns>
        public async Task<List<SmallBalance>> ListSmallBalanceAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SmallBalance>> localVarResponse = await ListSmallBalanceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SmallBalance&gt;)</returns>
        public async Task<ApiResponse<List<SmallBalance>>> ListSmallBalanceAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SmallBalance>>("/wallet/small_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmallBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns></returns>
        public void ConvertSmallBalance (ConvertSmallBalance convertSmallBalance)
        {
             ConvertSmallBalanceWithHttpInfo(convertSmallBalance);
        }

        /// <summary>
        /// Convert small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertSmallBalanceWithHttpInfo (ConvertSmallBalance convertSmallBalance)
        {
            // verify the required parameter 'convertSmallBalance' is set
            if (convertSmallBalance == null)
                throw new ApiException(400, "Missing required parameter 'convertSmallBalance' when calling WalletApi->ConvertSmallBalance");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = convertSmallBalance;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/wallet/small_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertSmallBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns>Task of void</returns>
        public async Task ConvertSmallBalanceAsync (ConvertSmallBalance convertSmallBalance)
        {
             await ConvertSmallBalanceAsyncWithHttpInfo(convertSmallBalance);

        }

        /// <summary>
        /// Convert small balance 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSmallBalance"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> ConvertSmallBalanceAsyncWithHttpInfo (ConvertSmallBalance convertSmallBalance)
        {
            // verify the required parameter 'convertSmallBalance' is set
            if (convertSmallBalance == null)
                throw new ApiException(400, "Missing required parameter 'convertSmallBalance' when calling WalletApi->ConvertSmallBalance");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = convertSmallBalance;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/wallet/small_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertSmallBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List small balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;SmallBalanceHistory&gt;</returns>
        public List<SmallBalanceHistory> ListSmallBalanceHistory (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<SmallBalanceHistory>> localVarResponse = ListSmallBalanceHistoryWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List small balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;SmallBalanceHistory&gt;</returns>
        public ApiResponse<List<SmallBalanceHistory>> ListSmallBalanceHistoryWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SmallBalanceHistory>>("/wallet/small_balance_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmallBalanceHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List small balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;SmallBalanceHistory&gt;</returns>
        public async Task<List<SmallBalanceHistory>> ListSmallBalanceHistoryAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SmallBalanceHistory>> localVarResponse = await ListSmallBalanceHistoryAsyncWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List small balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;SmallBalanceHistory&gt;)</returns>
        public async Task<ApiResponse<List<SmallBalanceHistory>>> ListSmallBalanceHistoryAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SmallBalanceHistory>>("/wallet/small_balance_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmallBalanceHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the UID transfer history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>List&lt;UidPushOrder&gt;</returns>
        public List<UidPushOrder> ListPushOrders (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string))
        {
             ApiResponse<List<UidPushOrder>> localVarResponse = ListPushOrdersWithHttpInfo(id, from, to, limit, offset, transactionType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the UID transfer history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>ApiResponse of List&lt;UidPushOrder&gt;</returns>
        public ApiResponse<List<UidPushOrder>> ListPushOrdersWithHttpInfo (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UidPushOrder>>("/wallet/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPushOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the UID transfer history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>Task of List&lt;UidPushOrder&gt;</returns>
        public async Task<List<UidPushOrder>> ListPushOrdersAsync (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UidPushOrder>> localVarResponse = await ListPushOrdersAsyncWithHttpInfo(id, from, to, limit, offset, transactionType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the UID transfer history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, it defaults to 7 days forward from the current time, in seconds Unix timestamp (optional)</param>
        /// <param name="to">The end time of the query record. If not specified, the default is the current time, which is a Unix timestamp in seconds. (optional)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 100 (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="transactionType">The list returns the order type &#x60;withdraw&#x60;, &#x60;deposit&#x60;, the default is &#x60;withdraw&#x60;. (optional, default to &quot;withdraw&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;UidPushOrder&gt;)</returns>
        public async Task<ApiResponse<List<UidPushOrder>>> ListPushOrdersAsyncWithHttpInfo (int? id = default(int?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), int? offset = default(int?), string transactionType = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UidPushOrder>>("/wallet/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPushOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
