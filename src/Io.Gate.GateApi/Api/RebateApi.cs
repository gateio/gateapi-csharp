/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRebateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// The agency obtains the transaction history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;AgencyTransactionHistory&gt;</returns>
        List<AgencyTransactionHistory> AgencyTransactionHistory (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// The agency obtains the transaction history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;AgencyTransactionHistory&gt;</returns>
        ApiResponse<List<AgencyTransactionHistory>> AgencyTransactionHistoryWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// The agency obtains the commission history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;AgencyCommissionHistory&gt;</returns>
        List<AgencyCommissionHistory> AgencyCommissionsHistory (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// The agency obtains the commission history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;AgencyCommissionHistory&gt;</returns>
        ApiResponse<List<AgencyCommissionHistory>> AgencyCommissionsHistoryWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Partner obtains transaction records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>PartnerTransactionHistory</returns>
        PartnerTransactionHistory PartnerTransactionHistory (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Partner obtains transaction records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerTransactionHistory</returns>
        ApiResponse<PartnerTransactionHistory> PartnerTransactionHistoryWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Partner obtains commission records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>PartnerCommissionHistory</returns>
        PartnerCommissionHistory PartnerCommissionsHistory (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Partner obtains commission records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerCommissionHistory</returns>
        ApiResponse<PartnerCommissionHistory> PartnerCommissionsHistoryWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Partner subordinate list
        /// </summary>
        /// <remarks>
        /// Including sub-agents, direct customers, indirect customers
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>PartnerSubList</returns>
        PartnerSubList PartnerSubList (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Partner subordinate list
        /// </summary>
        /// <remarks>
        /// Including sub-agents, direct customers, indirect customers
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerSubList</returns>
        ApiResponse<PartnerSubList> PartnerSubListWithHttpInfo (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;BrokerCommission&gt;</returns>
        List<BrokerCommission> RebateBrokerCommissionHistory (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;BrokerCommission&gt;</returns>
        ApiResponse<List<BrokerCommission>> RebateBrokerCommissionHistoryWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// The broker obtains the user&#39;s trading history
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;BrokerTransaction&gt;</returns>
        List<BrokerTransaction> RebateBrokerTransactionHistory (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// The broker obtains the user&#39;s trading history
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;BrokerTransaction&gt;</returns>
        ApiResponse<List<BrokerTransaction>> RebateBrokerTransactionHistoryWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// User retrieves rebate information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RebateUserInfo&gt;</returns>
        List<RebateUserInfo> RebateUserInfo ();

        /// <summary>
        /// User retrieves rebate information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RebateUserInfo&gt;</returns>
        ApiResponse<List<RebateUserInfo>> RebateUserInfoWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRebateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// The agency obtains the transaction history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;AgencyTransactionHistory&gt;</returns>
        Task<List<AgencyTransactionHistory>> AgencyTransactionHistoryAsync (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// The agency obtains the transaction history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;AgencyTransactionHistory&gt;)</returns>
        Task<ApiResponse<List<AgencyTransactionHistory>>> AgencyTransactionHistoryAsyncWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// The agency obtains the commission history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;AgencyCommissionHistory&gt;</returns>
        Task<List<AgencyCommissionHistory>> AgencyCommissionsHistoryAsync (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// The agency obtains the commission history of the recommended user
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;AgencyCommissionHistory&gt;)</returns>
        Task<ApiResponse<List<AgencyCommissionHistory>>> AgencyCommissionsHistoryAsyncWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Partner obtains transaction records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of PartnerTransactionHistory</returns>
        Task<PartnerTransactionHistory> PartnerTransactionHistoryAsync (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Partner obtains transaction records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerTransactionHistory)</returns>
        Task<ApiResponse<PartnerTransactionHistory>> PartnerTransactionHistoryAsyncWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Partner obtains commission records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of PartnerCommissionHistory</returns>
        Task<PartnerCommissionHistory> PartnerCommissionsHistoryAsync (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Partner obtains commission records of recommended users
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerCommissionHistory)</returns>
        Task<ApiResponse<PartnerCommissionHistory>> PartnerCommissionsHistoryAsyncWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Partner subordinate list
        /// </summary>
        /// <remarks>
        /// Including sub-agents, direct customers, indirect customers
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of PartnerSubList</returns>
        Task<PartnerSubList> PartnerSubListAsync (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Partner subordinate list
        /// </summary>
        /// <remarks>
        /// Including sub-agents, direct customers, indirect customers
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerSubList)</returns>
        Task<ApiResponse<PartnerSubList>> PartnerSubListAsyncWithHttpInfo (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;BrokerCommission&gt;</returns>
        Task<List<BrokerCommission>> RebateBrokerCommissionHistoryAsync (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BrokerCommission&gt;)</returns>
        Task<ApiResponse<List<BrokerCommission>>> RebateBrokerCommissionHistoryAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// The broker obtains the user&#39;s trading history
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;BrokerTransaction&gt;</returns>
        Task<List<BrokerTransaction>> RebateBrokerTransactionHistoryAsync (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// The broker obtains the user&#39;s trading history
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BrokerTransaction&gt;)</returns>
        Task<ApiResponse<List<BrokerTransaction>>> RebateBrokerTransactionHistoryAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// User retrieves rebate information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RebateUserInfo&gt;</returns>
        Task<List<RebateUserInfo>> RebateUserInfoAsync ();

        /// <summary>
        /// User retrieves rebate information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RebateUserInfo&gt;)</returns>
        Task<ApiResponse<List<RebateUserInfo>>> RebateUserInfoAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRebateApi : IRebateApiSync, IRebateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RebateApi : IRebateApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RebateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RebateApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RebateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RebateApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RebateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RebateApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RebateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RebateApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// The agency obtains the transaction history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;AgencyTransactionHistory&gt;</returns>
        public List<AgencyTransactionHistory> AgencyTransactionHistory (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<AgencyTransactionHistory>> localVarResponse = AgencyTransactionHistoryWithHttpInfo(currencyPair, userId, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The agency obtains the transaction history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;AgencyTransactionHistory&gt;</returns>
        public ApiResponse<List<AgencyTransactionHistory>> AgencyTransactionHistoryWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AgencyTransactionHistory>>("/rebate/agency/transaction_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgencyTransactionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The agency obtains the transaction history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;AgencyTransactionHistory&gt;</returns>
        public async Task<List<AgencyTransactionHistory>> AgencyTransactionHistoryAsync (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<AgencyTransactionHistory>> localVarResponse = await AgencyTransactionHistoryAsyncWithHttpInfo(currencyPair, userId, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The agency obtains the transaction history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;AgencyTransactionHistory&gt;)</returns>
        public async Task<ApiResponse<List<AgencyTransactionHistory>>> AgencyTransactionHistoryAsyncWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AgencyTransactionHistory>>("/rebate/agency/transaction_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgencyTransactionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The agency obtains the commission history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;AgencyCommissionHistory&gt;</returns>
        public List<AgencyCommissionHistory> AgencyCommissionsHistory (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<AgencyCommissionHistory>> localVarResponse = AgencyCommissionsHistoryWithHttpInfo(currency, userId, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The agency obtains the commission history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;AgencyCommissionHistory&gt;</returns>
        public ApiResponse<List<AgencyCommissionHistory>> AgencyCommissionsHistoryWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AgencyCommissionHistory>>("/rebate/agency/commission_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgencyCommissionsHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The agency obtains the commission history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;AgencyCommissionHistory&gt;</returns>
        public async Task<List<AgencyCommissionHistory>> AgencyCommissionsHistoryAsync (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<AgencyCommissionHistory>> localVarResponse = await AgencyCommissionsHistoryAsyncWithHttpInfo(currency, userId, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The agency obtains the commission history of the recommended user Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;AgencyCommissionHistory&gt;)</returns>
        public async Task<ApiResponse<List<AgencyCommissionHistory>>> AgencyCommissionsHistoryAsyncWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AgencyCommissionHistory>>("/rebate/agency/commission_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AgencyCommissionsHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner obtains transaction records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>PartnerTransactionHistory</returns>
        public PartnerTransactionHistory PartnerTransactionHistory (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<PartnerTransactionHistory> localVarResponse = PartnerTransactionHistoryWithHttpInfo(currencyPair, userId, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partner obtains transaction records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerTransactionHistory</returns>
        public ApiResponse<PartnerTransactionHistory> PartnerTransactionHistoryWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<PartnerTransactionHistory>("/rebate/partner/transaction_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartnerTransactionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner obtains transaction records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of PartnerTransactionHistory</returns>
        public async Task<PartnerTransactionHistory> PartnerTransactionHistoryAsync (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<PartnerTransactionHistory> localVarResponse = await PartnerTransactionHistoryAsyncWithHttpInfo(currencyPair, userId, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partner obtains transaction records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify the currency pair, if not specified, return all currency pairs (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerTransactionHistory)</returns>
        public async Task<ApiResponse<PartnerTransactionHistory>> PartnerTransactionHistoryAsyncWithHttpInfo (string currencyPair = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartnerTransactionHistory>("/rebate/partner/transaction_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartnerTransactionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner obtains commission records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>PartnerCommissionHistory</returns>
        public PartnerCommissionHistory PartnerCommissionsHistory (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<PartnerCommissionHistory> localVarResponse = PartnerCommissionsHistoryWithHttpInfo(currency, userId, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partner obtains commission records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerCommissionHistory</returns>
        public ApiResponse<PartnerCommissionHistory> PartnerCommissionsHistoryWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<PartnerCommissionHistory>("/rebate/partner/commission_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartnerCommissionsHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner obtains commission records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of PartnerCommissionHistory</returns>
        public async Task<PartnerCommissionHistory> PartnerCommissionsHistoryAsync (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<PartnerCommissionHistory> localVarResponse = await PartnerCommissionsHistoryAsyncWithHttpInfo(currency, userId, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partner obtains commission records of recommended users Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerCommissionHistory)</returns>
        public async Task<ApiResponse<PartnerCommissionHistory>> PartnerCommissionsHistoryAsyncWithHttpInfo (string currency = default(string), long? userId = default(long?), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartnerCommissionHistory>("/rebate/partner/commission_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartnerCommissionsHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner subordinate list Including sub-agents, direct customers, indirect customers
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>PartnerSubList</returns>
        public PartnerSubList PartnerSubList (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<PartnerSubList> localVarResponse = PartnerSubListWithHttpInfo(userId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partner subordinate list Including sub-agents, direct customers, indirect customers
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of PartnerSubList</returns>
        public ApiResponse<PartnerSubList> PartnerSubListWithHttpInfo (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<PartnerSubList>("/rebate/partner/sub_list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartnerSubList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner subordinate list Including sub-agents, direct customers, indirect customers
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of PartnerSubList</returns>
        public async Task<PartnerSubList> PartnerSubListAsync (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<PartnerSubList> localVarResponse = await PartnerSubListAsyncWithHttpInfo(userId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partner subordinate list Including sub-agents, direct customers, indirect customers
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PartnerSubList)</returns>
        public async Task<ApiResponse<PartnerSubList>> PartnerSubListAsyncWithHttpInfo (long? userId = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartnerSubList>("/rebate/partner/sub_list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartnerSubList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;BrokerCommission&gt;</returns>
        public List<BrokerCommission> RebateBrokerCommissionHistory (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<BrokerCommission>> localVarResponse = RebateBrokerCommissionHistoryWithHttpInfo(limit, offset, userId, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;BrokerCommission&gt;</returns>
        public ApiResponse<List<BrokerCommission>> RebateBrokerCommissionHistoryWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BrokerCommission>>("/rebate/broker/commission_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RebateBrokerCommissionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;BrokerCommission&gt;</returns>
        public async Task<List<BrokerCommission>> RebateBrokerCommissionHistoryAsync (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<BrokerCommission>> localVarResponse = await RebateBrokerCommissionHistoryAsyncWithHttpInfo(limit, offset, userId, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The broker obtains the user&#39;s commission rebate records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BrokerCommission&gt;)</returns>
        public async Task<ApiResponse<List<BrokerCommission>>> RebateBrokerCommissionHistoryAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BrokerCommission>>("/rebate/broker/commission_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RebateBrokerCommissionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The broker obtains the user&#39;s trading history Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;BrokerTransaction&gt;</returns>
        public List<BrokerTransaction> RebateBrokerTransactionHistory (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<BrokerTransaction>> localVarResponse = RebateBrokerTransactionHistoryWithHttpInfo(limit, offset, userId, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The broker obtains the user&#39;s trading history Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;BrokerTransaction&gt;</returns>
        public ApiResponse<List<BrokerTransaction>> RebateBrokerTransactionHistoryWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BrokerTransaction>>("/rebate/broker/transaction_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RebateBrokerTransactionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The broker obtains the user&#39;s trading history Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;BrokerTransaction&gt;</returns>
        public async Task<List<BrokerTransaction>> RebateBrokerTransactionHistoryAsync (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<BrokerTransaction>> localVarResponse = await RebateBrokerTransactionHistoryAsyncWithHttpInfo(limit, offset, userId, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The broker obtains the user&#39;s trading history Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="userId">User ID. If not specified, all user records will be returned (optional)</param>
        /// <param name="from">The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BrokerTransaction&gt;)</returns>
        public async Task<ApiResponse<List<BrokerTransaction>>> RebateBrokerTransactionHistoryAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), long? userId = default(long?), long? from = default(long?), long? to = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BrokerTransaction>>("/rebate/broker/transaction_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RebateBrokerTransactionHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User retrieves rebate information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RebateUserInfo&gt;</returns>
        public List<RebateUserInfo> RebateUserInfo ()
        {
             ApiResponse<List<RebateUserInfo>> localVarResponse = RebateUserInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// User retrieves rebate information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RebateUserInfo&gt;</returns>
        public ApiResponse<List<RebateUserInfo>> RebateUserInfoWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RebateUserInfo>>("/rebate/user/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RebateUserInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User retrieves rebate information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RebateUserInfo&gt;</returns>
        public async Task<List<RebateUserInfo>> RebateUserInfoAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<RebateUserInfo>> localVarResponse = await RebateUserInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// User retrieves rebate information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RebateUserInfo&gt;)</returns>
        public async Task<ApiResponse<List<RebateUserInfo>>> RebateUserInfoAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RebateUserInfo>>("/rebate/user/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RebateUserInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
