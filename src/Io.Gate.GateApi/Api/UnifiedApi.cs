/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUnifiedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>UnifiedAccount</returns>
        UnifiedAccount ListUnifiedAccounts (string currency = default(string), string subUid = default(string));

        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>ApiResponse of UnifiedAccount</returns>
        ApiResponse<UnifiedAccount> ListUnifiedAccountsWithHttpInfo (string currency = default(string), string subUid = default(string));
        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedBorrowable</returns>
        UnifiedBorrowable GetUnifiedBorrowable (string currency);

        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedBorrowable</returns>
        ApiResponse<UnifiedBorrowable> GetUnifiedBorrowableWithHttpInfo (string currency);
        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedTransferable</returns>
        UnifiedTransferable GetUnifiedTransferable (string currency);

        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedTransferable</returns>
        ApiResponse<UnifiedTransferable> GetUnifiedTransferableWithHttpInfo (string currency);
        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>List&lt;TransferablesResult&gt;</returns>
        List<TransferablesResult> GetUnifiedTransferables (string currencies);

        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>ApiResponse of List&lt;TransferablesResult&gt;</returns>
        ApiResponse<List<TransferablesResult>> GetUnifiedTransferablesWithHttpInfo (string currencies);
        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>List&lt;UnifiedBorrowable1&gt;</returns>
        List<UnifiedBorrowable1> GetUnifiedBorrowableList (List<string> currencies);

        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>ApiResponse of List&lt;UnifiedBorrowable1&gt;</returns>
        ApiResponse<List<UnifiedBorrowable1>> GetUnifiedBorrowableListWithHttpInfo (List<string> currencies);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        List<UniLoan> ListUnifiedLoans (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        ApiResponse<List<UniLoan>> ListUnifiedLoansWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>UnifiedLoanResult</returns>
        UnifiedLoanResult CreateUnifiedLoan (UnifiedLoan unifiedLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>ApiResponse of UnifiedLoanResult</returns>
        ApiResponse<UnifiedLoanResult> CreateUnifiedLoanWithHttpInfo (UnifiedLoan unifiedLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UnifiedLoanRecord&gt;</returns>
        List<UnifiedLoanRecord> ListUnifiedLoanRecords (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UnifiedLoanRecord&gt;</returns>
        ApiResponse<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        List<UniLoanInterestRecord> ListUnifiedLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        ApiResponse<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));
        /// <summary>
        /// Get user risk unit details
        /// </summary>
        /// <remarks>
        /// Retrieve user risk unit details, only valid in portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnifiedRiskUnits</returns>
        UnifiedRiskUnits GetUnifiedRiskUnits ();

        /// <summary>
        /// Get user risk unit details
        /// </summary>
        /// <remarks>
        /// Retrieve user risk unit details, only valid in portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnifiedRiskUnits</returns>
        ApiResponse<UnifiedRiskUnits> GetUnifiedRiskUnitsWithHttpInfo ();
        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnifiedModeSet</returns>
        UnifiedModeSet GetUnifiedMode ();

        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnifiedModeSet</returns>
        ApiResponse<UnifiedModeSet> GetUnifiedModeWithHttpInfo ();
        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns></returns>
        void SetUnifiedMode (UnifiedModeSet unifiedModeSet);

        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUnifiedModeWithHttpInfo (UnifiedModeSet unifiedModeSet);
        /// <summary>
        /// Get unified estimate rate
        /// </summary>
        /// <remarks>
        /// Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetUnifiedEstimateRate (List<string> currencies);

        /// <summary>
        /// Get unified estimate rate
        /// </summary>
        /// <remarks>
        /// Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetUnifiedEstimateRateWithHttpInfo (List<string> currencies);
        /// <summary>
        /// List currency discount tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UnifiedDiscount&gt;</returns>
        List<UnifiedDiscount> ListCurrencyDiscountTiers ();

        /// <summary>
        /// List currency discount tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UnifiedDiscount&gt;</returns>
        ApiResponse<List<UnifiedDiscount>> ListCurrencyDiscountTiersWithHttpInfo ();
        /// <summary>
        /// List loan margin tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UnifiedMarginTiers&gt;</returns>
        List<UnifiedMarginTiers> ListLoanMarginTiers ();

        /// <summary>
        /// List loan margin tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UnifiedMarginTiers&gt;</returns>
        ApiResponse<List<UnifiedMarginTiers>> ListLoanMarginTiersWithHttpInfo ();
        /// <summary>
        /// Portfolio margin calculator
        /// </summary>
        /// <remarks>
        /// Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>UnifiedPortfolioOutput</returns>
        UnifiedPortfolioOutput CalculatePortfolioMargin (UnifiedPortfolioInput unifiedPortfolioInput);

        /// <summary>
        /// Portfolio margin calculator
        /// </summary>
        /// <remarks>
        /// Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>ApiResponse of UnifiedPortfolioOutput</returns>
        ApiResponse<UnifiedPortfolioOutput> CalculatePortfolioMarginWithHttpInfo (UnifiedPortfolioInput unifiedPortfolioInput);
        /// <summary>
        /// Minimum currency leverage that can be set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>UnifiedLeverageConfig</returns>
        UnifiedLeverageConfig GetUserLeverageCurrencyConfig (string currency);

        /// <summary>
        /// Minimum currency leverage that can be set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>ApiResponse of UnifiedLeverageConfig</returns>
        ApiResponse<UnifiedLeverageConfig> GetUserLeverageCurrencyConfigWithHttpInfo (string currency);
        /// <summary>
        /// Get the leverage multiple of the user currency
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>UnifiedLeverageSetting</returns>
        UnifiedLeverageSetting GetUserLeverageCurrencySetting (string currency = default(string));

        /// <summary>
        /// Get the leverage multiple of the user currency
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>ApiResponse of UnifiedLeverageSetting</returns>
        ApiResponse<UnifiedLeverageSetting> GetUserLeverageCurrencySettingWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Set the loan currency leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns></returns>
        void SetUserLeverageCurrencySetting (UnifiedLeverageSetting unifiedLeverageSetting);

        /// <summary>
        /// Set the loan currency leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserLeverageCurrencySettingWithHttpInfo (UnifiedLeverageSetting unifiedLeverageSetting);
        /// <summary>
        /// List of loan currencies supported by unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>List&lt;UnifiedCurrency&gt;</returns>
        List<UnifiedCurrency> ListUnifiedCurrencies (string currency = default(string));

        /// <summary>
        /// List of loan currencies supported by unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>ApiResponse of List&lt;UnifiedCurrency&gt;</returns>
        ApiResponse<List<UnifiedCurrency>> ListUnifiedCurrenciesWithHttpInfo (string currency = default(string));
        /// <summary>
        /// get historical lending rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>UnifiedHistoryLoanRate</returns>
        UnifiedHistoryLoanRate GetHistoryLoanRate (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// get historical lending rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of UnifiedHistoryLoanRate</returns>
        ApiResponse<UnifiedHistoryLoanRate> GetHistoryLoanRateWithHttpInfo (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUnifiedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>Task of UnifiedAccount</returns>
        Task<UnifiedAccount> ListUnifiedAccountsAsync (string currency = default(string), string subUid = default(string));

        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>Task of ApiResponse (UnifiedAccount)</returns>
        Task<ApiResponse<UnifiedAccount>> ListUnifiedAccountsAsyncWithHttpInfo (string currency = default(string), string subUid = default(string));
        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedBorrowable</returns>
        Task<UnifiedBorrowable> GetUnifiedBorrowableAsync (string currency);

        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedBorrowable)</returns>
        Task<ApiResponse<UnifiedBorrowable>> GetUnifiedBorrowableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedTransferable</returns>
        Task<UnifiedTransferable> GetUnifiedTransferableAsync (string currency);

        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedTransferable)</returns>
        Task<ApiResponse<UnifiedTransferable>> GetUnifiedTransferableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>Task of List&lt;TransferablesResult&gt;</returns>
        Task<List<TransferablesResult>> GetUnifiedTransferablesAsync (string currencies);

        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>Task of ApiResponse (List&lt;TransferablesResult&gt;)</returns>
        Task<ApiResponse<List<TransferablesResult>>> GetUnifiedTransferablesAsyncWithHttpInfo (string currencies);
        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of List&lt;UnifiedBorrowable1&gt;</returns>
        Task<List<UnifiedBorrowable1>> GetUnifiedBorrowableListAsync (List<string> currencies);

        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedBorrowable1&gt;)</returns>
        Task<ApiResponse<List<UnifiedBorrowable1>>> GetUnifiedBorrowableListAsyncWithHttpInfo (List<string> currencies);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        Task<List<UniLoan>> ListUnifiedLoansAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        Task<ApiResponse<List<UniLoan>>> ListUnifiedLoansAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of UnifiedLoanResult</returns>
        Task<UnifiedLoanResult> CreateUnifiedLoanAsync (UnifiedLoan unifiedLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of ApiResponse (UnifiedLoanResult)</returns>
        Task<ApiResponse<UnifiedLoanResult>> CreateUnifiedLoanAsyncWithHttpInfo (UnifiedLoan unifiedLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UnifiedLoanRecord&gt;</returns>
        Task<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsAsync (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedLoanRecord&gt;)</returns>
        Task<ApiResponse<List<UnifiedLoanRecord>>> ListUnifiedLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        Task<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        Task<ApiResponse<List<UniLoanInterestRecord>>> ListUnifiedLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));
        /// <summary>
        /// Get user risk unit details
        /// </summary>
        /// <remarks>
        /// Retrieve user risk unit details, only valid in portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnifiedRiskUnits</returns>
        Task<UnifiedRiskUnits> GetUnifiedRiskUnitsAsync ();

        /// <summary>
        /// Get user risk unit details
        /// </summary>
        /// <remarks>
        /// Retrieve user risk unit details, only valid in portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnifiedRiskUnits)</returns>
        Task<ApiResponse<UnifiedRiskUnits>> GetUnifiedRiskUnitsAsyncWithHttpInfo ();
        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnifiedModeSet</returns>
        Task<UnifiedModeSet> GetUnifiedModeAsync ();

        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnifiedModeSet)</returns>
        Task<ApiResponse<UnifiedModeSet>> GetUnifiedModeAsyncWithHttpInfo ();
        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns>Task of void</returns>
        Task SetUnifiedModeAsync (UnifiedModeSet unifiedModeSet);

        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SetUnifiedModeAsyncWithHttpInfo (UnifiedModeSet unifiedModeSet);
        /// <summary>
        /// Get unified estimate rate
        /// </summary>
        /// <remarks>
        /// Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        Task<Dictionary<string, string>> GetUnifiedEstimateRateAsync (List<string> currencies);

        /// <summary>
        /// Get unified estimate rate
        /// </summary>
        /// <remarks>
        /// Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        Task<ApiResponse<Dictionary<string, string>>> GetUnifiedEstimateRateAsyncWithHttpInfo (List<string> currencies);
        /// <summary>
        /// List currency discount tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UnifiedDiscount&gt;</returns>
        Task<List<UnifiedDiscount>> ListCurrencyDiscountTiersAsync ();

        /// <summary>
        /// List currency discount tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UnifiedDiscount&gt;)</returns>
        Task<ApiResponse<List<UnifiedDiscount>>> ListCurrencyDiscountTiersAsyncWithHttpInfo ();
        /// <summary>
        /// List loan margin tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UnifiedMarginTiers&gt;</returns>
        Task<List<UnifiedMarginTiers>> ListLoanMarginTiersAsync ();

        /// <summary>
        /// List loan margin tiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UnifiedMarginTiers&gt;)</returns>
        Task<ApiResponse<List<UnifiedMarginTiers>>> ListLoanMarginTiersAsyncWithHttpInfo ();
        /// <summary>
        /// Portfolio margin calculator
        /// </summary>
        /// <remarks>
        /// Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>Task of UnifiedPortfolioOutput</returns>
        Task<UnifiedPortfolioOutput> CalculatePortfolioMarginAsync (UnifiedPortfolioInput unifiedPortfolioInput);

        /// <summary>
        /// Portfolio margin calculator
        /// </summary>
        /// <remarks>
        /// Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>Task of ApiResponse (UnifiedPortfolioOutput)</returns>
        Task<ApiResponse<UnifiedPortfolioOutput>> CalculatePortfolioMarginAsyncWithHttpInfo (UnifiedPortfolioInput unifiedPortfolioInput);
        /// <summary>
        /// Minimum currency leverage that can be set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>Task of UnifiedLeverageConfig</returns>
        Task<UnifiedLeverageConfig> GetUserLeverageCurrencyConfigAsync (string currency);

        /// <summary>
        /// Minimum currency leverage that can be set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>Task of ApiResponse (UnifiedLeverageConfig)</returns>
        Task<ApiResponse<UnifiedLeverageConfig>> GetUserLeverageCurrencyConfigAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Get the leverage multiple of the user currency
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of UnifiedLeverageSetting</returns>
        Task<UnifiedLeverageSetting> GetUserLeverageCurrencySettingAsync (string currency = default(string));

        /// <summary>
        /// Get the leverage multiple of the user currency
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of ApiResponse (UnifiedLeverageSetting)</returns>
        Task<ApiResponse<UnifiedLeverageSetting>> GetUserLeverageCurrencySettingAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Set the loan currency leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns>Task of void</returns>
        Task SetUserLeverageCurrencySettingAsync (UnifiedLeverageSetting unifiedLeverageSetting);

        /// <summary>
        /// Set the loan currency leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SetUserLeverageCurrencySettingAsyncWithHttpInfo (UnifiedLeverageSetting unifiedLeverageSetting);
        /// <summary>
        /// List of loan currencies supported by unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of List&lt;UnifiedCurrency&gt;</returns>
        Task<List<UnifiedCurrency>> ListUnifiedCurrenciesAsync (string currency = default(string));

        /// <summary>
        /// List of loan currencies supported by unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedCurrency&gt;)</returns>
        Task<ApiResponse<List<UnifiedCurrency>>> ListUnifiedCurrenciesAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// get historical lending rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of UnifiedHistoryLoanRate</returns>
        Task<UnifiedHistoryLoanRate> GetHistoryLoanRateAsync (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// get historical lending rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (UnifiedHistoryLoanRate)</returns>
        Task<ApiResponse<UnifiedHistoryLoanRate>> GetHistoryLoanRateAsyncWithHttpInfo (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUnifiedApi : IUnifiedApiSync, IUnifiedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UnifiedApi : IUnifiedApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UnifiedApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UnifiedApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UnifiedApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UnifiedApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>UnifiedAccount</returns>
        public UnifiedAccount ListUnifiedAccounts (string currency = default(string), string subUid = default(string))
        {
             ApiResponse<UnifiedAccount> localVarResponse = ListUnifiedAccountsWithHttpInfo(currency, subUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>ApiResponse of UnifiedAccount</returns>
        public ApiResponse<UnifiedAccount> ListUnifiedAccountsWithHttpInfo (string currency = default(string), string subUid = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedAccount>("/unified/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>Task of UnifiedAccount</returns>
        public async Task<UnifiedAccount> ListUnifiedAccountsAsync (string currency = default(string), string subUid = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedAccount> localVarResponse = await ListUnifiedAccountsAsyncWithHttpInfo(currency, subUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="subUid">Sub account user ID (optional)</param>
        /// <returns>Task of ApiResponse (UnifiedAccount)</returns>
        public async Task<ApiResponse<UnifiedAccount>> ListUnifiedAccountsAsyncWithHttpInfo (string currency = default(string), string subUid = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedAccount>("/unified/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedBorrowable</returns>
        public UnifiedBorrowable GetUnifiedBorrowable (string currency)
        {
             ApiResponse<UnifiedBorrowable> localVarResponse = GetUnifiedBorrowableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedBorrowable</returns>
        public ApiResponse<UnifiedBorrowable> GetUnifiedBorrowableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedBorrowable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedBorrowable>("/unified/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedBorrowable</returns>
        public async Task<UnifiedBorrowable> GetUnifiedBorrowableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedBorrowable> localVarResponse = await GetUnifiedBorrowableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedBorrowable)</returns>
        public async Task<ApiResponse<UnifiedBorrowable>> GetUnifiedBorrowableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedBorrowable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedBorrowable>("/unified/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedTransferable</returns>
        public UnifiedTransferable GetUnifiedTransferable (string currency)
        {
             ApiResponse<UnifiedTransferable> localVarResponse = GetUnifiedTransferableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedTransferable</returns>
        public ApiResponse<UnifiedTransferable> GetUnifiedTransferableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedTransferable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedTransferable>("/unified/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedTransferable</returns>
        public async Task<UnifiedTransferable> GetUnifiedTransferableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedTransferable> localVarResponse = await GetUnifiedTransferableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedTransferable)</returns>
        public async Task<ApiResponse<UnifiedTransferable>> GetUnifiedTransferableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedTransferable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedTransferable>("/unified/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>List&lt;TransferablesResult&gt;</returns>
        public List<TransferablesResult> GetUnifiedTransferables (string currencies)
        {
             ApiResponse<List<TransferablesResult>> localVarResponse = GetUnifiedTransferablesWithHttpInfo(currencies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>ApiResponse of List&lt;TransferablesResult&gt;</returns>
        public ApiResponse<List<TransferablesResult>> GetUnifiedTransferablesWithHttpInfo (string currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling UnifiedApi->GetUnifiedTransferables");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TransferablesResult>>("/unified/transferables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedTransferables", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>Task of List&lt;TransferablesResult&gt;</returns>
        public async Task<List<TransferablesResult>> GetUnifiedTransferablesAsync (string currencies)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<TransferablesResult>> localVarResponse = await GetUnifiedTransferablesAsyncWithHttpInfo(currencies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query in batches, and support up to 100 pass parameters at a time.</param>
        /// <returns>Task of ApiResponse (List&lt;TransferablesResult&gt;)</returns>
        public async Task<ApiResponse<List<TransferablesResult>>> GetUnifiedTransferablesAsyncWithHttpInfo (string currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling UnifiedApi->GetUnifiedTransferables");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TransferablesResult>>("/unified/transferables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedTransferables", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>List&lt;UnifiedBorrowable1&gt;</returns>
        public List<UnifiedBorrowable1> GetUnifiedBorrowableList (List<string> currencies)
        {
             ApiResponse<List<UnifiedBorrowable1>> localVarResponse = GetUnifiedBorrowableListWithHttpInfo(currencies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>ApiResponse of List&lt;UnifiedBorrowable1&gt;</returns>
        public ApiResponse<List<UnifiedBorrowable1>> GetUnifiedBorrowableListWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling UnifiedApi->GetUnifiedBorrowableList");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UnifiedBorrowable1>>("/unified/batch_borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedBorrowableList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of List&lt;UnifiedBorrowable1&gt;</returns>
        public async Task<List<UnifiedBorrowable1>> GetUnifiedBorrowableListAsync (List<string> currencies)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UnifiedBorrowable1>> localVarResponse = await GetUnifiedBorrowableListAsyncWithHttpInfo(currencies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch query unified account can be borrowed up to a maximum 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedBorrowable1&gt;)</returns>
        public async Task<ApiResponse<List<UnifiedBorrowable1>>> GetUnifiedBorrowableListAsyncWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling UnifiedApi->GetUnifiedBorrowableList");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnifiedBorrowable1>>("/unified/batch_borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedBorrowableList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        public List<UniLoan> ListUnifiedLoans (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {
             ApiResponse<List<UniLoan>> localVarResponse = ListUnifiedLoansWithHttpInfo(currency, page, limit, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        public ApiResponse<List<UniLoan>> ListUnifiedLoansWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoan>>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        public async Task<List<UniLoan>> ListUnifiedLoansAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoan>> localVarResponse = await ListUnifiedLoansAsyncWithHttpInfo(currency, page, limit, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="type">Loan type, platform - platform, margin - margin (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        public async Task<ApiResponse<List<UniLoan>>> ListUnifiedLoansAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoan>>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>UnifiedLoanResult</returns>
        public UnifiedLoanResult CreateUnifiedLoan (UnifiedLoan unifiedLoan)
        {
             ApiResponse<UnifiedLoanResult> localVarResponse = CreateUnifiedLoanWithHttpInfo(unifiedLoan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>ApiResponse of UnifiedLoanResult</returns>
        public ApiResponse<UnifiedLoanResult> CreateUnifiedLoanWithHttpInfo (UnifiedLoan unifiedLoan)
        {
            // verify the required parameter 'unifiedLoan' is set
            if (unifiedLoan == null)
                throw new ApiException(400, "Missing required parameter 'unifiedLoan' when calling UnifiedApi->CreateUnifiedLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unifiedLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<UnifiedLoanResult>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUnifiedLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of UnifiedLoanResult</returns>
        public async Task<UnifiedLoanResult> CreateUnifiedLoanAsync (UnifiedLoan unifiedLoan)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedLoanResult> localVarResponse = await CreateUnifiedLoanAsyncWithHttpInfo(unifiedLoan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of ApiResponse (UnifiedLoanResult)</returns>
        public async Task<ApiResponse<UnifiedLoanResult>> CreateUnifiedLoanAsyncWithHttpInfo (UnifiedLoan unifiedLoan)
        {
            // verify the required parameter 'unifiedLoan' is set
            if (unifiedLoan == null)
                throw new ApiException(400, "Missing required parameter 'unifiedLoan' when calling UnifiedApi->CreateUnifiedLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = unifiedLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UnifiedLoanResult>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUnifiedLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UnifiedLoanRecord&gt;</returns>
        public List<UnifiedLoanRecord> ListUnifiedLoanRecords (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UnifiedLoanRecord>> localVarResponse = ListUnifiedLoanRecordsWithHttpInfo(type, currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UnifiedLoanRecord&gt;</returns>
        public ApiResponse<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UnifiedLoanRecord>>("/unified/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UnifiedLoanRecord&gt;</returns>
        public async Task<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsAsync (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UnifiedLoanRecord>> localVarResponse = await ListUnifiedLoanRecordsAsyncWithHttpInfo(type, currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedLoanRecord&gt;)</returns>
        public async Task<ApiResponse<List<UnifiedLoanRecord>>> ListUnifiedLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnifiedLoanRecord>>("/unified/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        public List<UniLoanInterestRecord> ListUnifiedLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
             ApiResponse<List<UniLoanInterestRecord>> localVarResponse = ListUnifiedLoanInterestRecordsWithHttpInfo(currency, page, limit, from, to, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        public ApiResponse<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoanInterestRecord>>("/unified/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        public async Task<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoanInterestRecord>> localVarResponse = await ListUnifiedLoanInterestRecordsAsyncWithHttpInfo(currency, page, limit, from, to, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="type">Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        public async Task<ApiResponse<List<UniLoanInterestRecord>>> ListUnifiedLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoanInterestRecord>>("/unified/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user risk unit details Retrieve user risk unit details, only valid in portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnifiedRiskUnits</returns>
        public UnifiedRiskUnits GetUnifiedRiskUnits ()
        {
             ApiResponse<UnifiedRiskUnits> localVarResponse = GetUnifiedRiskUnitsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user risk unit details Retrieve user risk unit details, only valid in portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnifiedRiskUnits</returns>
        public ApiResponse<UnifiedRiskUnits> GetUnifiedRiskUnitsWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedRiskUnits>("/unified/risk_units", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedRiskUnits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user risk unit details Retrieve user risk unit details, only valid in portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnifiedRiskUnits</returns>
        public async Task<UnifiedRiskUnits> GetUnifiedRiskUnitsAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedRiskUnits> localVarResponse = await GetUnifiedRiskUnitsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user risk unit details Retrieve user risk unit details, only valid in portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnifiedRiskUnits)</returns>
        public async Task<ApiResponse<UnifiedRiskUnits>> GetUnifiedRiskUnitsAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedRiskUnits>("/unified/risk_units", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedRiskUnits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query mode of the unified account Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnifiedModeSet</returns>
        public UnifiedModeSet GetUnifiedMode ()
        {
             ApiResponse<UnifiedModeSet> localVarResponse = GetUnifiedModeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query mode of the unified account Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnifiedModeSet</returns>
        public ApiResponse<UnifiedModeSet> GetUnifiedModeWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedModeSet>("/unified/unified_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query mode of the unified account Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnifiedModeSet</returns>
        public async Task<UnifiedModeSet> GetUnifiedModeAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedModeSet> localVarResponse = await GetUnifiedModeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query mode of the unified account Unified account mode: - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Cross-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode - &#x60;single_currency&#x60;: Single-currency margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnifiedModeSet)</returns>
        public async Task<ApiResponse<UnifiedModeSet>> GetUnifiedModeAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedModeSet>("/unified/unified_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set mode of the unified account Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns></returns>
        public void SetUnifiedMode (UnifiedModeSet unifiedModeSet)
        {
             SetUnifiedModeWithHttpInfo(unifiedModeSet);
        }

        /// <summary>
        /// Set mode of the unified account Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetUnifiedModeWithHttpInfo (UnifiedModeSet unifiedModeSet)
        {
            // verify the required parameter 'unifiedModeSet' is set
            if (unifiedModeSet == null)
                throw new ApiException(400, "Missing required parameter 'unifiedModeSet' when calling UnifiedApi->SetUnifiedMode");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unifiedModeSet;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/unified/unified_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUnifiedMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set mode of the unified account Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns>Task of void</returns>
        public async Task SetUnifiedModeAsync (UnifiedModeSet unifiedModeSet)
        {
             await SetUnifiedModeAsyncWithHttpInfo(unifiedModeSet);

        }

        /// <summary>
        /// Set mode of the unified account Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode&#x3D;classic &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;classic\&quot;  } &#x60;&#x60;&#x60; - Open the cross-currency margin mode, mode&#x3D;multi_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;multi_currency\&quot;,  \&quot;settings\&quot;: {  \&quot;usdt_futures\&quot;: true  }  } &#x60;&#x60;&#x60; - When the portfolio margin mode is enabled, mode&#x3D;portfolio &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;portfolio\&quot;,  \&quot;settings\&quot;: {  \&quot;spot_hedge\&quot;: true  }  } &#x60;&#x60;&#x60; - When opening a single currency margin mode, mode&#x3D;single_currency &#x60;&#x60;&#x60;  PUT /unified/unified_mode  {  \&quot;mode\&quot;: \&quot;single_currency\&quot;  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedModeSet"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SetUnifiedModeAsyncWithHttpInfo (UnifiedModeSet unifiedModeSet)
        {
            // verify the required parameter 'unifiedModeSet' is set
            if (unifiedModeSet == null)
                throw new ApiException(400, "Missing required parameter 'unifiedModeSet' when calling UnifiedApi->SetUnifiedMode");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = unifiedModeSet;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/unified/unified_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUnifiedMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unified estimate rate Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetUnifiedEstimateRate (List<string> currencies)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetUnifiedEstimateRateWithHttpInfo(currencies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unified estimate rate Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse<Dictionary<string, string>> GetUnifiedEstimateRateWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling UnifiedApi->GetUnifiedEstimateRate");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, string>>("/unified/estimate_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedEstimateRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unified estimate rate Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async Task<Dictionary<string, string>> GetUnifiedEstimateRateAsync (List<string> currencies)
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetUnifiedEstimateRateAsyncWithHttpInfo(currencies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unified estimate rate Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, string>>> GetUnifiedEstimateRateAsyncWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling UnifiedApi->GetUnifiedEstimateRate");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/unified/estimate_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedEstimateRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List currency discount tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UnifiedDiscount&gt;</returns>
        public List<UnifiedDiscount> ListCurrencyDiscountTiers ()
        {
             ApiResponse<List<UnifiedDiscount>> localVarResponse = ListCurrencyDiscountTiersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List currency discount tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UnifiedDiscount&gt;</returns>
        public ApiResponse<List<UnifiedDiscount>> ListCurrencyDiscountTiersWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UnifiedDiscount>>("/unified/currency_discount_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyDiscountTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List currency discount tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UnifiedDiscount&gt;</returns>
        public async Task<List<UnifiedDiscount>> ListCurrencyDiscountTiersAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UnifiedDiscount>> localVarResponse = await ListCurrencyDiscountTiersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List currency discount tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UnifiedDiscount&gt;)</returns>
        public async Task<ApiResponse<List<UnifiedDiscount>>> ListCurrencyDiscountTiersAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnifiedDiscount>>("/unified/currency_discount_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyDiscountTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loan margin tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UnifiedMarginTiers&gt;</returns>
        public List<UnifiedMarginTiers> ListLoanMarginTiers ()
        {
             ApiResponse<List<UnifiedMarginTiers>> localVarResponse = ListLoanMarginTiersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loan margin tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UnifiedMarginTiers&gt;</returns>
        public ApiResponse<List<UnifiedMarginTiers>> ListLoanMarginTiersWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UnifiedMarginTiers>>("/unified/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoanMarginTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loan margin tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UnifiedMarginTiers&gt;</returns>
        public async Task<List<UnifiedMarginTiers>> ListLoanMarginTiersAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UnifiedMarginTiers>> localVarResponse = await ListLoanMarginTiersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loan margin tiers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UnifiedMarginTiers&gt;)</returns>
        public async Task<ApiResponse<List<UnifiedMarginTiers>>> ListLoanMarginTiersAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnifiedMarginTiers>>("/unified/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoanMarginTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Portfolio margin calculator Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>UnifiedPortfolioOutput</returns>
        public UnifiedPortfolioOutput CalculatePortfolioMargin (UnifiedPortfolioInput unifiedPortfolioInput)
        {
             ApiResponse<UnifiedPortfolioOutput> localVarResponse = CalculatePortfolioMarginWithHttpInfo(unifiedPortfolioInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Portfolio margin calculator Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>ApiResponse of UnifiedPortfolioOutput</returns>
        public ApiResponse<UnifiedPortfolioOutput> CalculatePortfolioMarginWithHttpInfo (UnifiedPortfolioInput unifiedPortfolioInput)
        {
            // verify the required parameter 'unifiedPortfolioInput' is set
            if (unifiedPortfolioInput == null)
                throw new ApiException(400, "Missing required parameter 'unifiedPortfolioInput' when calling UnifiedApi->CalculatePortfolioMargin");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unifiedPortfolioInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UnifiedPortfolioOutput>("/unified/portfolio_calculator", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculatePortfolioMargin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Portfolio margin calculator Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>Task of UnifiedPortfolioOutput</returns>
        public async Task<UnifiedPortfolioOutput> CalculatePortfolioMarginAsync (UnifiedPortfolioInput unifiedPortfolioInput)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedPortfolioOutput> localVarResponse = await CalculatePortfolioMarginAsyncWithHttpInfo(unifiedPortfolioInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Portfolio margin calculator Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedPortfolioInput"></param>
        /// <returns>Task of ApiResponse (UnifiedPortfolioOutput)</returns>
        public async Task<ApiResponse<UnifiedPortfolioOutput>> CalculatePortfolioMarginAsyncWithHttpInfo (UnifiedPortfolioInput unifiedPortfolioInput)
        {
            // verify the required parameter 'unifiedPortfolioInput' is set
            if (unifiedPortfolioInput == null)
                throw new ApiException(400, "Missing required parameter 'unifiedPortfolioInput' when calling UnifiedApi->CalculatePortfolioMargin");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = unifiedPortfolioInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UnifiedPortfolioOutput>("/unified/portfolio_calculator", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculatePortfolioMargin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Minimum currency leverage that can be set 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>UnifiedLeverageConfig</returns>
        public UnifiedLeverageConfig GetUserLeverageCurrencyConfig (string currency)
        {
             ApiResponse<UnifiedLeverageConfig> localVarResponse = GetUserLeverageCurrencyConfigWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Minimum currency leverage that can be set 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>ApiResponse of UnifiedLeverageConfig</returns>
        public ApiResponse<UnifiedLeverageConfig> GetUserLeverageCurrencyConfigWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUserLeverageCurrencyConfig");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedLeverageConfig>("/unified/leverage/user_currency_config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLeverageCurrencyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Minimum currency leverage that can be set 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>Task of UnifiedLeverageConfig</returns>
        public async Task<UnifiedLeverageConfig> GetUserLeverageCurrencyConfigAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedLeverageConfig> localVarResponse = await GetUserLeverageCurrencyConfigAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Minimum currency leverage that can be set 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <returns>Task of ApiResponse (UnifiedLeverageConfig)</returns>
        public async Task<ApiResponse<UnifiedLeverageConfig>> GetUserLeverageCurrencyConfigAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUserLeverageCurrencyConfig");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedLeverageConfig>("/unified/leverage/user_currency_config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLeverageCurrencyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the leverage multiple of the user currency Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>UnifiedLeverageSetting</returns>
        public UnifiedLeverageSetting GetUserLeverageCurrencySetting (string currency = default(string))
        {
             ApiResponse<UnifiedLeverageSetting> localVarResponse = GetUserLeverageCurrencySettingWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the leverage multiple of the user currency Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>ApiResponse of UnifiedLeverageSetting</returns>
        public ApiResponse<UnifiedLeverageSetting> GetUserLeverageCurrencySettingWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedLeverageSetting>("/unified/leverage/user_currency_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLeverageCurrencySetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the leverage multiple of the user currency Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of UnifiedLeverageSetting</returns>
        public async Task<UnifiedLeverageSetting> GetUserLeverageCurrencySettingAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedLeverageSetting> localVarResponse = await GetUserLeverageCurrencySettingAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the leverage multiple of the user currency Get the user&#39;s currency leverage. If currency is not passed, query all currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of ApiResponse (UnifiedLeverageSetting)</returns>
        public async Task<ApiResponse<UnifiedLeverageSetting>> GetUserLeverageCurrencySettingAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedLeverageSetting>("/unified/leverage/user_currency_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLeverageCurrencySetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the loan currency leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns></returns>
        public void SetUserLeverageCurrencySetting (UnifiedLeverageSetting unifiedLeverageSetting)
        {
             SetUserLeverageCurrencySettingWithHttpInfo(unifiedLeverageSetting);
        }

        /// <summary>
        /// Set the loan currency leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetUserLeverageCurrencySettingWithHttpInfo (UnifiedLeverageSetting unifiedLeverageSetting)
        {
            // verify the required parameter 'unifiedLeverageSetting' is set
            if (unifiedLeverageSetting == null)
                throw new ApiException(400, "Missing required parameter 'unifiedLeverageSetting' when calling UnifiedApi->SetUserLeverageCurrencySetting");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unifiedLeverageSetting;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/unified/leverage/user_currency_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserLeverageCurrencySetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the loan currency leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns>Task of void</returns>
        public async Task SetUserLeverageCurrencySettingAsync (UnifiedLeverageSetting unifiedLeverageSetting)
        {
             await SetUserLeverageCurrencySettingAsyncWithHttpInfo(unifiedLeverageSetting);

        }

        /// <summary>
        /// Set the loan currency leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLeverageSetting"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SetUserLeverageCurrencySettingAsyncWithHttpInfo (UnifiedLeverageSetting unifiedLeverageSetting)
        {
            // verify the required parameter 'unifiedLeverageSetting' is set
            if (unifiedLeverageSetting == null)
                throw new ApiException(400, "Missing required parameter 'unifiedLeverageSetting' when calling UnifiedApi->SetUserLeverageCurrencySetting");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = unifiedLeverageSetting;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/unified/leverage/user_currency_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserLeverageCurrencySetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of loan currencies supported by unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>List&lt;UnifiedCurrency&gt;</returns>
        public List<UnifiedCurrency> ListUnifiedCurrencies (string currency = default(string))
        {
             ApiResponse<List<UnifiedCurrency>> localVarResponse = ListUnifiedCurrenciesWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of loan currencies supported by unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>ApiResponse of List&lt;UnifiedCurrency&gt;</returns>
        public ApiResponse<List<UnifiedCurrency>> ListUnifiedCurrenciesWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UnifiedCurrency>>("/unified/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of loan currencies supported by unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of List&lt;UnifiedCurrency&gt;</returns>
        public async Task<List<UnifiedCurrency>> ListUnifiedCurrenciesAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UnifiedCurrency>> localVarResponse = await ListUnifiedCurrenciesAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of loan currencies supported by unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedCurrency&gt;)</returns>
        public async Task<ApiResponse<List<UnifiedCurrency>>> ListUnifiedCurrenciesAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnifiedCurrency>>("/unified/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get historical lending rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>UnifiedHistoryLoanRate</returns>
        public UnifiedHistoryLoanRate GetHistoryLoanRate (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<UnifiedHistoryLoanRate> localVarResponse = GetHistoryLoanRateWithHttpInfo(currency, tier, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get historical lending rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of UnifiedHistoryLoanRate</returns>
        public ApiResponse<UnifiedHistoryLoanRate> GetHistoryLoanRateWithHttpInfo (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetHistoryLoanRate");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "tier", tier));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedHistoryLoanRate>("/unified/history_loan_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoryLoanRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get historical lending rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of UnifiedHistoryLoanRate</returns>
        public async Task<UnifiedHistoryLoanRate> GetHistoryLoanRateAsync (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedHistoryLoanRate> localVarResponse = await GetHistoryLoanRateAsyncWithHttpInfo(currency, tier, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get historical lending rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency</param>
        /// <param name="tier">The VIP level of the floating rate that needs to be queried (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (UnifiedHistoryLoanRate)</returns>
        public async Task<ApiResponse<UnifiedHistoryLoanRate>> GetHistoryLoanRateAsyncWithHttpInfo (string currency, string tier = default(string), int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetHistoryLoanRate");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (tier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "tier", tier));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedHistoryLoanRate>("/unified/history_loan_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoryLoanRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
