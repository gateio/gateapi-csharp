/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUnifiedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>UnifiedAccount</returns>
        UnifiedAccount ListUnifiedAccounts (string currency = default(string));

        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of UnifiedAccount</returns>
        ApiResponse<UnifiedAccount> ListUnifiedAccountsWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin, usdt_futures - usdt futures
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        Dictionary<string, bool> ListUnifiedAccountMode ();

        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin, usdt_futures - usdt futures
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        ApiResponse<Dictionary<string, bool>> ListUnifiedAccountModeWithHttpInfo ();
        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        Dictionary<string, bool> SetUnifiedAccountMode (UnifiedMode unifiedMode);

        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        ApiResponse<Dictionary<string, bool>> SetUnifiedAccountModeWithHttpInfo (UnifiedMode unifiedMode);
        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedBorrowable</returns>
        UnifiedBorrowable GetUnifiedBorrowable (string currency);

        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedBorrowable</returns>
        ApiResponse<UnifiedBorrowable> GetUnifiedBorrowableWithHttpInfo (string currency);
        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedTransferable</returns>
        UnifiedTransferable GetUnifiedTransferable (string currency);

        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedTransferable</returns>
        ApiResponse<UnifiedTransferable> GetUnifiedTransferableWithHttpInfo (string currency);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        List<UniLoan> ListUnifiedLoans (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        ApiResponse<List<UniLoan>> ListUnifiedLoansWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns></returns>
        void CreateUnifiedLoan (UnifiedLoan unifiedLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUnifiedLoanWithHttpInfo (UnifiedLoan unifiedLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UnifiedLoanRecord&gt;</returns>
        List<UnifiedLoanRecord> ListUnifiedLoanRecords (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UnifiedLoanRecord&gt;</returns>
        ApiResponse<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        List<UniLoanInterestRecord> ListUnifiedLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        ApiResponse<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUnifiedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of UnifiedAccount</returns>
        Task<UnifiedAccount> ListUnifiedAccountsAsync (string currency = default(string));

        /// <summary>
        /// Get unified account information
        /// </summary>
        /// <remarks>
        /// The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (UnifiedAccount)</returns>
        Task<ApiResponse<UnifiedAccount>> ListUnifiedAccountsAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin, usdt_futures - usdt futures
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        Task<Dictionary<string, bool>> ListUnifiedAccountModeAsync ();

        /// <summary>
        /// Query mode of the unified account
        /// </summary>
        /// <remarks>
        /// cross_margin - cross margin, usdt_futures - usdt futures
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        Task<ApiResponse<Dictionary<string, bool>>> ListUnifiedAccountModeAsyncWithHttpInfo ();
        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        Task<Dictionary<string, bool>> SetUnifiedAccountModeAsync (UnifiedMode unifiedMode);

        /// <summary>
        /// Set mode of the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        Task<ApiResponse<Dictionary<string, bool>>> SetUnifiedAccountModeAsyncWithHttpInfo (UnifiedMode unifiedMode);
        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedBorrowable</returns>
        Task<UnifiedBorrowable> GetUnifiedBorrowableAsync (string currency);

        /// <summary>
        /// Query about the maximum borrowing for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedBorrowable)</returns>
        Task<ApiResponse<UnifiedBorrowable>> GetUnifiedBorrowableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedTransferable</returns>
        Task<UnifiedTransferable> GetUnifiedTransferableAsync (string currency);

        /// <summary>
        /// Query about the maximum transferable for the unified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedTransferable)</returns>
        Task<ApiResponse<UnifiedTransferable>> GetUnifiedTransferableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        Task<List<UniLoan>> ListUnifiedLoansAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        Task<ApiResponse<List<UniLoan>>> ListUnifiedLoansAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of void</returns>
        Task CreateUnifiedLoanAsync (UnifiedLoan unifiedLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> CreateUnifiedLoanAsyncWithHttpInfo (UnifiedLoan unifiedLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UnifiedLoanRecord&gt;</returns>
        Task<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsAsync (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedLoanRecord&gt;)</returns>
        Task<ApiResponse<List<UnifiedLoanRecord>>> ListUnifiedLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        Task<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        Task<ApiResponse<List<UniLoanInterestRecord>>> ListUnifiedLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUnifiedApi : IUnifiedApiSync, IUnifiedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UnifiedApi : IUnifiedApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UnifiedApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UnifiedApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UnifiedApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnifiedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UnifiedApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>UnifiedAccount</returns>
        public UnifiedAccount ListUnifiedAccounts (string currency = default(string))
        {
             ApiResponse<UnifiedAccount> localVarResponse = ListUnifiedAccountsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of UnifiedAccount</returns>
        public ApiResponse<UnifiedAccount> ListUnifiedAccountsWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedAccount>("/unified/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of UnifiedAccount</returns>
        public async Task<UnifiedAccount> ListUnifiedAccountsAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedAccount> localVarResponse = await ListUnifiedAccountsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unified account information The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (UnifiedAccount)</returns>
        public async Task<ApiResponse<UnifiedAccount>> ListUnifiedAccountsAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedAccount>("/unified/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query mode of the unified account cross_margin - cross margin, usdt_futures - usdt futures
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        public Dictionary<string, bool> ListUnifiedAccountMode ()
        {
             ApiResponse<Dictionary<string, bool>> localVarResponse = ListUnifiedAccountModeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query mode of the unified account cross_margin - cross margin, usdt_futures - usdt futures
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        public ApiResponse<Dictionary<string, bool>> ListUnifiedAccountModeWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, bool>>("/unified/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedAccountMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query mode of the unified account cross_margin - cross margin, usdt_futures - usdt futures
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        public async Task<Dictionary<string, bool>> ListUnifiedAccountModeAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, bool>> localVarResponse = await ListUnifiedAccountModeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query mode of the unified account cross_margin - cross margin, usdt_futures - usdt futures
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, bool>>> ListUnifiedAccountModeAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, bool>>("/unified/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedAccountMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set mode of the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>Dictionary&lt;string, bool&gt;</returns>
        public Dictionary<string, bool> SetUnifiedAccountMode (UnifiedMode unifiedMode)
        {
             ApiResponse<Dictionary<string, bool>> localVarResponse = SetUnifiedAccountModeWithHttpInfo(unifiedMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set mode of the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, bool&gt;</returns>
        public ApiResponse<Dictionary<string, bool>> SetUnifiedAccountModeWithHttpInfo (UnifiedMode unifiedMode)
        {
            // verify the required parameter 'unifiedMode' is set
            if (unifiedMode == null)
                throw new ApiException(400, "Missing required parameter 'unifiedMode' when calling UnifiedApi->SetUnifiedAccountMode");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unifiedMode;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, bool>>("/unified/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUnifiedAccountMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set mode of the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>Task of Dictionary&lt;string, bool&gt;</returns>
        public async Task<Dictionary<string, bool>> SetUnifiedAccountModeAsync (UnifiedMode unifiedMode)
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, bool>> localVarResponse = await SetUnifiedAccountModeAsyncWithHttpInfo(unifiedMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set mode of the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedMode"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, bool&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, bool>>> SetUnifiedAccountModeAsyncWithHttpInfo (UnifiedMode unifiedMode)
        {
            // verify the required parameter 'unifiedMode' is set
            if (unifiedMode == null)
                throw new ApiException(400, "Missing required parameter 'unifiedMode' when calling UnifiedApi->SetUnifiedAccountMode");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = unifiedMode;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, bool>>("/unified/account_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUnifiedAccountMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedBorrowable</returns>
        public UnifiedBorrowable GetUnifiedBorrowable (string currency)
        {
             ApiResponse<UnifiedBorrowable> localVarResponse = GetUnifiedBorrowableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedBorrowable</returns>
        public ApiResponse<UnifiedBorrowable> GetUnifiedBorrowableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedBorrowable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedBorrowable>("/unified/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedBorrowable</returns>
        public async Task<UnifiedBorrowable> GetUnifiedBorrowableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedBorrowable> localVarResponse = await GetUnifiedBorrowableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query about the maximum borrowing for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedBorrowable)</returns>
        public async Task<ApiResponse<UnifiedBorrowable>> GetUnifiedBorrowableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedBorrowable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedBorrowable>("/unified/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedTransferable</returns>
        public UnifiedTransferable GetUnifiedTransferable (string currency)
        {
             ApiResponse<UnifiedTransferable> localVarResponse = GetUnifiedTransferableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedTransferable</returns>
        public ApiResponse<UnifiedTransferable> GetUnifiedTransferableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedTransferable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedTransferable>("/unified/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedTransferable</returns>
        public async Task<UnifiedTransferable> GetUnifiedTransferableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedTransferable> localVarResponse = await GetUnifiedTransferableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query about the maximum transferable for the unified account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedTransferable)</returns>
        public async Task<ApiResponse<UnifiedTransferable>> GetUnifiedTransferableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling UnifiedApi->GetUnifiedTransferable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedTransferable>("/unified/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnifiedTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        public List<UniLoan> ListUnifiedLoans (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UniLoan>> localVarResponse = ListUnifiedLoansWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        public ApiResponse<List<UniLoan>> ListUnifiedLoansWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoan>>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        public async Task<List<UniLoan>> ListUnifiedLoansAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoan>> localVarResponse = await ListUnifiedLoansAsyncWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        public async Task<ApiResponse<List<UniLoan>>> ListUnifiedLoansAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoan>>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns></returns>
        public void CreateUnifiedLoan (UnifiedLoan unifiedLoan)
        {
             CreateUnifiedLoanWithHttpInfo(unifiedLoan);
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateUnifiedLoanWithHttpInfo (UnifiedLoan unifiedLoan)
        {
            // verify the required parameter 'unifiedLoan' is set
            if (unifiedLoan == null)
                throw new ApiException(400, "Missing required parameter 'unifiedLoan' when calling UnifiedApi->CreateUnifiedLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unifiedLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUnifiedLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of void</returns>
        public async Task CreateUnifiedLoanAsync (UnifiedLoan unifiedLoan)
        {
             await CreateUnifiedLoanAsyncWithHttpInfo(unifiedLoan);

        }

        /// <summary>
        /// Borrow or repay When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user&#39;s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter &#x60;repaid_all&#x3D;true&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedLoan"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> CreateUnifiedLoanAsyncWithHttpInfo (UnifiedLoan unifiedLoan)
        {
            // verify the required parameter 'unifiedLoan' is set
            if (unifiedLoan == null)
                throw new ApiException(400, "Missing required parameter 'unifiedLoan' when calling UnifiedApi->CreateUnifiedLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = unifiedLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/unified/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUnifiedLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UnifiedLoanRecord&gt;</returns>
        public List<UnifiedLoanRecord> ListUnifiedLoanRecords (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UnifiedLoanRecord>> localVarResponse = ListUnifiedLoanRecordsWithHttpInfo(type, currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UnifiedLoanRecord&gt;</returns>
        public ApiResponse<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UnifiedLoanRecord>>("/unified/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UnifiedLoanRecord&gt;</returns>
        public async Task<List<UnifiedLoanRecord>> ListUnifiedLoanRecordsAsync (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UnifiedLoanRecord>> localVarResponse = await ListUnifiedLoanRecordsAsyncWithHttpInfo(type, currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UnifiedLoanRecord&gt;)</returns>
        public async Task<ApiResponse<List<UnifiedLoanRecord>>> ListUnifiedLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnifiedLoanRecord>>("/unified/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        public List<UniLoanInterestRecord> ListUnifiedLoanInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UniLoanInterestRecord>> localVarResponse = ListUnifiedLoanInterestRecordsWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        public ApiResponse<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoanInterestRecord>>("/unified/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        public async Task<List<UniLoanInterestRecord>> ListUnifiedLoanInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoanInterestRecord>> localVarResponse = await ListUnifiedLoanInterestRecordsAsyncWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        public async Task<ApiResponse<List<UniLoanInterestRecord>>> ListUnifiedLoanInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoanInterestRecord>>("/unified/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
