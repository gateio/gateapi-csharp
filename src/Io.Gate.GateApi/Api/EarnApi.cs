/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEarnApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ETH2 swap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns></returns>
        void SwapETH2 (Eth2Swap eth2Swap);

        /// <summary>
        /// ETH2 swap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SwapETH2WithHttpInfo (Eth2Swap eth2Swap);
        /// <summary>
        /// ETH2 historical rate of return query
        /// </summary>
        /// <remarks>
        /// Check the ETH earnings rate record for the last 31 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Eth2RateList&gt;</returns>
        List<Eth2RateList> RateListETH2 ();

        /// <summary>
        /// ETH2 historical rate of return query
        /// </summary>
        /// <remarks>
        /// Check the ETH earnings rate record for the last 31 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Eth2RateList&gt;</returns>
        ApiResponse<List<Eth2RateList>> RateListETH2WithHttpInfo ();
        /// <summary>
        /// Dual Investment product list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>List&lt;DualGetPlans&gt;</returns>
        List<DualGetPlans> ListDualInvestmentPlans (long? planId = default(long?));

        /// <summary>
        /// Dual Investment product list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>ApiResponse of List&lt;DualGetPlans&gt;</returns>
        ApiResponse<List<DualGetPlans>> ListDualInvestmentPlansWithHttpInfo (long? planId = default(long?));
        /// <summary>
        /// Dual Investment order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;DualGetOrders&gt;</returns>
        List<DualGetOrders> ListDualOrders (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Dual Investment order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;DualGetOrders&gt;</returns>
        ApiResponse<List<DualGetOrders>> ListDualOrdersWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Place Dual Investment order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns></returns>
        void PlaceDualOrder (PlaceDualInvestmentOrder placeDualInvestmentOrder);

        /// <summary>
        /// Place Dual Investment order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlaceDualOrderWithHttpInfo (PlaceDualInvestmentOrder placeDualInvestmentOrder);
        /// <summary>
        /// Structured Product List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;StructuredGetProjectList&gt;</returns>
        List<StructuredGetProjectList> ListStructuredProducts (string status, string type = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Structured Product List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;StructuredGetProjectList&gt;</returns>
        ApiResponse<List<StructuredGetProjectList>> ListStructuredProductsWithHttpInfo (string status, string type = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Structured Product Order List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;StructuredOrderList&gt;</returns>
        List<StructuredOrderList> ListStructuredOrders (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Structured Product Order List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;StructuredOrderList&gt;</returns>
        ApiResponse<List<StructuredOrderList>> ListStructuredOrdersWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Place Structured Product Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns></returns>
        void PlaceStructuredOrder (StructuredBuy structuredBuy);

        /// <summary>
        /// Place Structured Product Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlaceStructuredOrderWithHttpInfo (StructuredBuy structuredBuy);
        /// <summary>
        /// Staking Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> FindCoin (FindCoin findCoin);

        /// <summary>
        /// Staking Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> FindCoinWithHttpInfo (FindCoin findCoin);
        /// <summary>
        /// On-chain Token Swap for Earned Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>SwapCoinStruct</returns>
        SwapCoinStruct SwapStakingCoin (SwapCoin swapCoin);

        /// <summary>
        /// On-chain Token Swap for Earned Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>ApiResponse of SwapCoinStruct</returns>
        ApiResponse<SwapCoinStruct> SwapStakingCoinWithHttpInfo (SwapCoin swapCoin);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEarnApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ETH2 swap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns>Task of void</returns>
        Task SwapETH2Async (Eth2Swap eth2Swap);

        /// <summary>
        /// ETH2 swap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SwapETH2AsyncWithHttpInfo (Eth2Swap eth2Swap);
        /// <summary>
        /// ETH2 historical rate of return query
        /// </summary>
        /// <remarks>
        /// Check the ETH earnings rate record for the last 31 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Eth2RateList&gt;</returns>
        Task<List<Eth2RateList>> RateListETH2Async ();

        /// <summary>
        /// ETH2 historical rate of return query
        /// </summary>
        /// <remarks>
        /// Check the ETH earnings rate record for the last 31 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Eth2RateList&gt;)</returns>
        Task<ApiResponse<List<Eth2RateList>>> RateListETH2AsyncWithHttpInfo ();
        /// <summary>
        /// Dual Investment product list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>Task of List&lt;DualGetPlans&gt;</returns>
        Task<List<DualGetPlans>> ListDualInvestmentPlansAsync (long? planId = default(long?));

        /// <summary>
        /// Dual Investment product list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DualGetPlans&gt;)</returns>
        Task<ApiResponse<List<DualGetPlans>>> ListDualInvestmentPlansAsyncWithHttpInfo (long? planId = default(long?));
        /// <summary>
        /// Dual Investment order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;DualGetOrders&gt;</returns>
        Task<List<DualGetOrders>> ListDualOrdersAsync (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Dual Investment order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;DualGetOrders&gt;)</returns>
        Task<ApiResponse<List<DualGetOrders>>> ListDualOrdersAsyncWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Place Dual Investment order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns>Task of void</returns>
        Task PlaceDualOrderAsync (PlaceDualInvestmentOrder placeDualInvestmentOrder);

        /// <summary>
        /// Place Dual Investment order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PlaceDualOrderAsyncWithHttpInfo (PlaceDualInvestmentOrder placeDualInvestmentOrder);
        /// <summary>
        /// Structured Product List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;StructuredGetProjectList&gt;</returns>
        Task<List<StructuredGetProjectList>> ListStructuredProductsAsync (string status, string type = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Structured Product List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;StructuredGetProjectList&gt;)</returns>
        Task<ApiResponse<List<StructuredGetProjectList>>> ListStructuredProductsAsyncWithHttpInfo (string status, string type = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Structured Product Order List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;StructuredOrderList&gt;</returns>
        Task<List<StructuredOrderList>> ListStructuredOrdersAsync (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Structured Product Order List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;StructuredOrderList&gt;)</returns>
        Task<ApiResponse<List<StructuredOrderList>>> ListStructuredOrdersAsyncWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Place Structured Product Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns>Task of void</returns>
        Task PlaceStructuredOrderAsync (StructuredBuy structuredBuy);

        /// <summary>
        /// Place Structured Product Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PlaceStructuredOrderAsyncWithHttpInfo (StructuredBuy structuredBuy);
        /// <summary>
        /// Staking Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>Task of List&lt;string&gt;</returns>
        Task<List<string>> FindCoinAsync (FindCoin findCoin);

        /// <summary>
        /// Staking Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        Task<ApiResponse<List<string>>> FindCoinAsyncWithHttpInfo (FindCoin findCoin);
        /// <summary>
        /// On-chain Token Swap for Earned Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>Task of SwapCoinStruct</returns>
        Task<SwapCoinStruct> SwapStakingCoinAsync (SwapCoin swapCoin);

        /// <summary>
        /// On-chain Token Swap for Earned Coins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>Task of ApiResponse (SwapCoinStruct)</returns>
        Task<ApiResponse<SwapCoinStruct>> SwapStakingCoinAsyncWithHttpInfo (SwapCoin swapCoin);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEarnApi : IEarnApiSync, IEarnApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EarnApi : IEarnApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EarnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EarnApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EarnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EarnApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EarnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EarnApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EarnApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EarnApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ETH2 swap 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns></returns>
        public void SwapETH2 (Eth2Swap eth2Swap)
        {
             SwapETH2WithHttpInfo(eth2Swap);
        }

        /// <summary>
        /// ETH2 swap 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SwapETH2WithHttpInfo (Eth2Swap eth2Swap)
        {
            // verify the required parameter 'eth2Swap' is set
            if (eth2Swap == null)
                throw new ApiException(400, "Missing required parameter 'eth2Swap' when calling EarnApi->SwapETH2");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = eth2Swap;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/earn/staking/eth2/swap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SwapETH2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ETH2 swap 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns>Task of void</returns>
        public async Task SwapETH2Async (Eth2Swap eth2Swap)
        {
             await SwapETH2AsyncWithHttpInfo(eth2Swap);

        }

        /// <summary>
        /// ETH2 swap 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth2Swap"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SwapETH2AsyncWithHttpInfo (Eth2Swap eth2Swap)
        {
            // verify the required parameter 'eth2Swap' is set
            if (eth2Swap == null)
                throw new ApiException(400, "Missing required parameter 'eth2Swap' when calling EarnApi->SwapETH2");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = eth2Swap;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/earn/staking/eth2/swap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SwapETH2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ETH2 historical rate of return query Check the ETH earnings rate record for the last 31 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Eth2RateList&gt;</returns>
        public List<Eth2RateList> RateListETH2 ()
        {
             ApiResponse<List<Eth2RateList>> localVarResponse = RateListETH2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// ETH2 historical rate of return query Check the ETH earnings rate record for the last 31 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Eth2RateList&gt;</returns>
        public ApiResponse<List<Eth2RateList>> RateListETH2WithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Eth2RateList>>("/earn/staking/eth2/rate_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RateListETH2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ETH2 historical rate of return query Check the ETH earnings rate record for the last 31 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Eth2RateList&gt;</returns>
        public async Task<List<Eth2RateList>> RateListETH2Async ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Eth2RateList>> localVarResponse = await RateListETH2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// ETH2 historical rate of return query Check the ETH earnings rate record for the last 31 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Eth2RateList&gt;)</returns>
        public async Task<ApiResponse<List<Eth2RateList>>> RateListETH2AsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Eth2RateList>>("/earn/staking/eth2/rate_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RateListETH2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dual Investment product list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>List&lt;DualGetPlans&gt;</returns>
        public List<DualGetPlans> ListDualInvestmentPlans (long? planId = default(long?))
        {
             ApiResponse<List<DualGetPlans>> localVarResponse = ListDualInvestmentPlansWithHttpInfo(planId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dual Investment product list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>ApiResponse of List&lt;DualGetPlans&gt;</returns>
        public ApiResponse<List<DualGetPlans>> ListDualInvestmentPlansWithHttpInfo (long? planId = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (planId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "plan_id", planId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DualGetPlans>>("/earn/dual/investment_plan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDualInvestmentPlans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dual Investment product list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>Task of List&lt;DualGetPlans&gt;</returns>
        public async Task<List<DualGetPlans>> ListDualInvestmentPlansAsync (long? planId = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DualGetPlans>> localVarResponse = await ListDualInvestmentPlansAsyncWithHttpInfo(planId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dual Investment product list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Financial project id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DualGetPlans&gt;)</returns>
        public async Task<ApiResponse<List<DualGetPlans>>> ListDualInvestmentPlansAsyncWithHttpInfo (long? planId = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (planId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "plan_id", planId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DualGetPlans>>("/earn/dual/investment_plan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDualInvestmentPlans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dual Investment order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;DualGetOrders&gt;</returns>
        public List<DualGetOrders> ListDualOrders (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<DualGetOrders>> localVarResponse = ListDualOrdersWithHttpInfo(from, to, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dual Investment order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;DualGetOrders&gt;</returns>
        public ApiResponse<List<DualGetOrders>> ListDualOrdersWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DualGetOrders>>("/earn/dual/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDualOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dual Investment order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;DualGetOrders&gt;</returns>
        public async Task<List<DualGetOrders>> ListDualOrdersAsync (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DualGetOrders>> localVarResponse = await ListDualOrdersAsyncWithHttpInfo(from, to, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dual Investment order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start checkout time (optional)</param>
        /// <param name="to">End settlement time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;DualGetOrders&gt;)</returns>
        public async Task<ApiResponse<List<DualGetOrders>>> ListDualOrdersAsyncWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DualGetOrders>>("/earn/dual/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDualOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place Dual Investment order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns></returns>
        public void PlaceDualOrder (PlaceDualInvestmentOrder placeDualInvestmentOrder)
        {
             PlaceDualOrderWithHttpInfo(placeDualInvestmentOrder);
        }

        /// <summary>
        /// Place Dual Investment order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlaceDualOrderWithHttpInfo (PlaceDualInvestmentOrder placeDualInvestmentOrder)
        {
            // verify the required parameter 'placeDualInvestmentOrder' is set
            if (placeDualInvestmentOrder == null)
                throw new ApiException(400, "Missing required parameter 'placeDualInvestmentOrder' when calling EarnApi->PlaceDualOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = placeDualInvestmentOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/earn/dual/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlaceDualOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place Dual Investment order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns>Task of void</returns>
        public async Task PlaceDualOrderAsync (PlaceDualInvestmentOrder placeDualInvestmentOrder)
        {
             await PlaceDualOrderAsyncWithHttpInfo(placeDualInvestmentOrder);

        }

        /// <summary>
        /// Place Dual Investment order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeDualInvestmentOrder"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> PlaceDualOrderAsyncWithHttpInfo (PlaceDualInvestmentOrder placeDualInvestmentOrder)
        {
            // verify the required parameter 'placeDualInvestmentOrder' is set
            if (placeDualInvestmentOrder == null)
                throw new ApiException(400, "Missing required parameter 'placeDualInvestmentOrder' when calling EarnApi->PlaceDualOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = placeDualInvestmentOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/earn/dual/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlaceDualOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Structured Product List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;StructuredGetProjectList&gt;</returns>
        public List<StructuredGetProjectList> ListStructuredProducts (string status, string type = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<StructuredGetProjectList>> localVarResponse = ListStructuredProductsWithHttpInfo(status, type, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Structured Product List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;StructuredGetProjectList&gt;</returns>
        public ApiResponse<List<StructuredGetProjectList>> ListStructuredProductsWithHttpInfo (string status, string type = default(string), int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling EarnApi->ListStructuredProducts");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StructuredGetProjectList>>("/earn/structured/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStructuredProducts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Structured Product List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;StructuredGetProjectList&gt;</returns>
        public async Task<List<StructuredGetProjectList>> ListStructuredProductsAsync (string status, string type = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<StructuredGetProjectList>> localVarResponse = await ListStructuredProductsAsyncWithHttpInfo(status, type, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Structured Product List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (Default empty to query all)  &#x60;in_process&#x60;-In progress &#x60;will_begin&#x60;-Not started &#x60;wait_settlement&#x60;-Pending settlement &#x60;done&#x60;-Completed </param>
        /// <param name="type">Product Type (Default empty to query all)  &#x60;SharkFin2.0&#x60;-Shark Fin &#x60;BullishSharkFin&#x60;-Bullish Treasure &#x60;BearishSharkFin&#x60;-Bearish Treasure &#x60;DoubleNoTouch&#x60;-Volatility Treasure &#x60;RangeAccrual&#x60;-Range Smart Yield &#x60;SnowBall&#x60;-Snowball  (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;StructuredGetProjectList&gt;)</returns>
        public async Task<ApiResponse<List<StructuredGetProjectList>>> ListStructuredProductsAsyncWithHttpInfo (string status, string type = default(string), int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling EarnApi->ListStructuredProducts");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StructuredGetProjectList>>("/earn/structured/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStructuredProducts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Structured Product Order List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;StructuredOrderList&gt;</returns>
        public List<StructuredOrderList> ListStructuredOrders (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<StructuredOrderList>> localVarResponse = ListStructuredOrdersWithHttpInfo(from, to, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Structured Product Order List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;StructuredOrderList&gt;</returns>
        public ApiResponse<List<StructuredOrderList>> ListStructuredOrdersWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StructuredOrderList>>("/earn/structured/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStructuredOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Structured Product Order List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;StructuredOrderList&gt;</returns>
        public async Task<List<StructuredOrderList>> ListStructuredOrdersAsync (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<StructuredOrderList>> localVarResponse = await ListStructuredOrdersAsyncWithHttpInfo(from, to, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Structured Product Order List 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;StructuredOrderList&gt;)</returns>
        public async Task<ApiResponse<List<StructuredOrderList>>> ListStructuredOrdersAsyncWithHttpInfo (long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StructuredOrderList>>("/earn/structured/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStructuredOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place Structured Product Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns></returns>
        public void PlaceStructuredOrder (StructuredBuy structuredBuy)
        {
             PlaceStructuredOrderWithHttpInfo(structuredBuy);
        }

        /// <summary>
        /// Place Structured Product Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlaceStructuredOrderWithHttpInfo (StructuredBuy structuredBuy)
        {
            // verify the required parameter 'structuredBuy' is set
            if (structuredBuy == null)
                throw new ApiException(400, "Missing required parameter 'structuredBuy' when calling EarnApi->PlaceStructuredOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = structuredBuy;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/earn/structured/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlaceStructuredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place Structured Product Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns>Task of void</returns>
        public async Task PlaceStructuredOrderAsync (StructuredBuy structuredBuy)
        {
             await PlaceStructuredOrderAsyncWithHttpInfo(structuredBuy);

        }

        /// <summary>
        /// Place Structured Product Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredBuy"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> PlaceStructuredOrderAsyncWithHttpInfo (StructuredBuy structuredBuy)
        {
            // verify the required parameter 'structuredBuy' is set
            if (structuredBuy == null)
                throw new ApiException(400, "Missing required parameter 'structuredBuy' when calling EarnApi->PlaceStructuredOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = structuredBuy;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/earn/structured/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlaceStructuredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Staking Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> FindCoin (FindCoin findCoin)
        {
             ApiResponse<List<string>> localVarResponse = FindCoinWithHttpInfo(findCoin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Staking Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> FindCoinWithHttpInfo (FindCoin findCoin)
        {
            // verify the required parameter 'findCoin' is set
            if (findCoin == null)
                throw new ApiException(400, "Missing required parameter 'findCoin' when calling EarnApi->FindCoin");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = findCoin;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/earn/staking/coins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCoin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Staking Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async Task<List<string>> FindCoinAsync (FindCoin findCoin)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<string>> localVarResponse = await FindCoinAsyncWithHttpInfo(findCoin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Staking Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findCoin"></param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async Task<ApiResponse<List<string>>> FindCoinAsyncWithHttpInfo (FindCoin findCoin)
        {
            // verify the required parameter 'findCoin' is set
            if (findCoin == null)
                throw new ApiException(400, "Missing required parameter 'findCoin' when calling EarnApi->FindCoin");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = findCoin;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/earn/staking/coins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCoin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// On-chain Token Swap for Earned Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>SwapCoinStruct</returns>
        public SwapCoinStruct SwapStakingCoin (SwapCoin swapCoin)
        {
             ApiResponse<SwapCoinStruct> localVarResponse = SwapStakingCoinWithHttpInfo(swapCoin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// On-chain Token Swap for Earned Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>ApiResponse of SwapCoinStruct</returns>
        public ApiResponse<SwapCoinStruct> SwapStakingCoinWithHttpInfo (SwapCoin swapCoin)
        {
            // verify the required parameter 'swapCoin' is set
            if (swapCoin == null)
                throw new ApiException(400, "Missing required parameter 'swapCoin' when calling EarnApi->SwapStakingCoin");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = swapCoin;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<SwapCoinStruct>("/earn/staking/swap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SwapStakingCoin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// On-chain Token Swap for Earned Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>Task of SwapCoinStruct</returns>
        public async Task<SwapCoinStruct> SwapStakingCoinAsync (SwapCoin swapCoin)
        {
             Io.Gate.GateApi.Client.ApiResponse<SwapCoinStruct> localVarResponse = await SwapStakingCoinAsyncWithHttpInfo(swapCoin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// On-chain Token Swap for Earned Coins 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="swapCoin"></param>
        /// <returns>Task of ApiResponse (SwapCoinStruct)</returns>
        public async Task<ApiResponse<SwapCoinStruct>> SwapStakingCoinAsyncWithHttpInfo (SwapCoin swapCoin)
        {
            // verify the required parameter 'swapCoin' is set
            if (swapCoin == null)
                throw new ApiException(400, "Missing required parameter 'swapCoin' when calling EarnApi->SwapStakingCoin");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = swapCoin;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SwapCoinStruct>("/earn/staking/swap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SwapStakingCoin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
