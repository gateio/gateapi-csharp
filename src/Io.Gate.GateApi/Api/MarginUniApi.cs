/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginUniApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List lending markets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UniCurrencyPair&gt;</returns>
        List<UniCurrencyPair> ListUniCurrencyPairs ();

        /// <summary>
        /// List lending markets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UniCurrencyPair&gt;</returns>
        ApiResponse<List<UniCurrencyPair>> ListUniCurrencyPairsWithHttpInfo ();
        /// <summary>
        /// Get detail of lending market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>UniCurrencyPair</returns>
        UniCurrencyPair GetUniCurrencyPair (string currencyPair);

        /// <summary>
        /// Get detail of lending market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of UniCurrencyPair</returns>
        ApiResponse<UniCurrencyPair> GetUniCurrencyPairWithHttpInfo (string currencyPair);
        /// <summary>
        /// Estimate interest Rate
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetMarginUniEstimateRate (List<string> currencies);

        /// <summary>
        /// Estimate interest Rate
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetMarginUniEstimateRateWithHttpInfo (List<string> currencies);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        List<UniLoan> ListUniLoans (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        ApiResponse<List<UniLoan>> ListUniLoansWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns></returns>
        void CreateUniLoan (CreateUniLoan createUniLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUniLoanWithHttpInfo (CreateUniLoan createUniLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoanRecord&gt;</returns>
        List<UniLoanRecord> ListUniLoanRecords (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoanRecord&gt;</returns>
        ApiResponse<List<UniLoanRecord>> ListUniLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        List<UniLoanInterestRecord> ListUniLoanInterestRecords (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        ApiResponse<List<UniLoanInterestRecord>> ListUniLoanInterestRecordsWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get maximum borrowable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>MaxUniBorrowable</returns>
        MaxUniBorrowable GetUniBorrowable (string currency, string currencyPair);

        /// <summary>
        /// Get maximum borrowable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of MaxUniBorrowable</returns>
        ApiResponse<MaxUniBorrowable> GetUniBorrowableWithHttpInfo (string currency, string currencyPair);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginUniApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List lending markets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UniCurrencyPair&gt;</returns>
        Task<List<UniCurrencyPair>> ListUniCurrencyPairsAsync ();

        /// <summary>
        /// List lending markets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UniCurrencyPair&gt;)</returns>
        Task<ApiResponse<List<UniCurrencyPair>>> ListUniCurrencyPairsAsyncWithHttpInfo ();
        /// <summary>
        /// Get detail of lending market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of UniCurrencyPair</returns>
        Task<UniCurrencyPair> GetUniCurrencyPairAsync (string currencyPair);

        /// <summary>
        /// Get detail of lending market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (UniCurrencyPair)</returns>
        Task<ApiResponse<UniCurrencyPair>> GetUniCurrencyPairAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Estimate interest Rate
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        Task<Dictionary<string, string>> GetMarginUniEstimateRateAsync (List<string> currencies);

        /// <summary>
        /// Estimate interest Rate
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        Task<ApiResponse<Dictionary<string, string>>> GetMarginUniEstimateRateAsyncWithHttpInfo (List<string> currencies);
        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        Task<List<UniLoan>> ListUniLoansAsync (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List loans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        Task<ApiResponse<List<UniLoan>>> ListUniLoansAsyncWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns>Task of void</returns>
        Task CreateUniLoanAsync (CreateUniLoan createUniLoan);

        /// <summary>
        /// Borrow or repay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> CreateUniLoanAsyncWithHttpInfo (CreateUniLoan createUniLoan);
        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoanRecord&gt;</returns>
        Task<List<UniLoanRecord>> ListUniLoanRecordsAsync (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get load records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanRecord&gt;)</returns>
        Task<ApiResponse<List<UniLoanRecord>>> ListUniLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        Task<List<UniLoanInterestRecord>> ListUniLoanInterestRecordsAsync (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List interest records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        Task<ApiResponse<List<UniLoanInterestRecord>>> ListUniLoanInterestRecordsAsyncWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get maximum borrowable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of MaxUniBorrowable</returns>
        Task<MaxUniBorrowable> GetUniBorrowableAsync (string currency, string currencyPair);

        /// <summary>
        /// Get maximum borrowable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (MaxUniBorrowable)</returns>
        Task<ApiResponse<MaxUniBorrowable>> GetUniBorrowableAsyncWithHttpInfo (string currency, string currencyPair);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginUniApi : IMarginUniApiSync, IMarginUniApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarginUniApi : IMarginUniApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginUniApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarginUniApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginUniApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarginUniApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginUniApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarginUniApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginUniApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarginUniApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List lending markets 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UniCurrencyPair&gt;</returns>
        public List<UniCurrencyPair> ListUniCurrencyPairs ()
        {
             ApiResponse<List<UniCurrencyPair>> localVarResponse = ListUniCurrencyPairsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List lending markets 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UniCurrencyPair&gt;</returns>
        public ApiResponse<List<UniCurrencyPair>> ListUniCurrencyPairsWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniCurrencyPair>>("/margin/uni/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniCurrencyPairs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List lending markets 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UniCurrencyPair&gt;</returns>
        public async Task<List<UniCurrencyPair>> ListUniCurrencyPairsAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniCurrencyPair>> localVarResponse = await ListUniCurrencyPairsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List lending markets 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UniCurrencyPair&gt;)</returns>
        public async Task<ApiResponse<List<UniCurrencyPair>>> ListUniCurrencyPairsAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniCurrencyPair>>("/margin/uni/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniCurrencyPairs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detail of lending market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>UniCurrencyPair</returns>
        public UniCurrencyPair GetUniCurrencyPair (string currencyPair)
        {
             ApiResponse<UniCurrencyPair> localVarResponse = GetUniCurrencyPairWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detail of lending market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of UniCurrencyPair</returns>
        public ApiResponse<UniCurrencyPair> GetUniCurrencyPairWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginUniApi->GetUniCurrencyPair");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currency_pair", ClientUtils.ParameterToString(currencyPair)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UniCurrencyPair>("/margin/uni/currency_pairs/{currency_pair}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detail of lending market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of UniCurrencyPair</returns>
        public async Task<UniCurrencyPair> GetUniCurrencyPairAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<UniCurrencyPair> localVarResponse = await GetUniCurrencyPairAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detail of lending market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (UniCurrencyPair)</returns>
        public async Task<ApiResponse<UniCurrencyPair>> GetUniCurrencyPairAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginUniApi->GetUniCurrencyPair");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("currency_pair", ClientUtils.ParameterToString(currencyPair)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UniCurrencyPair>("/margin/uni/currency_pairs/{currency_pair}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate interest Rate Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetMarginUniEstimateRate (List<string> currencies)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetMarginUniEstimateRateWithHttpInfo(currencies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate interest Rate Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse<Dictionary<string, string>> GetMarginUniEstimateRateWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling MarginUniApi->GetMarginUniEstimateRate");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, string>>("/margin/uni/estimate_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarginUniEstimateRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate interest Rate Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async Task<Dictionary<string, string>> GetMarginUniEstimateRateAsync (List<string> currencies)
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetMarginUniEstimateRateAsyncWithHttpInfo(currencies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimate interest Rate Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, string>>> GetMarginUniEstimateRateAsyncWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling MarginUniApi->GetMarginUniEstimateRate");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/margin/uni/estimate_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarginUniEstimateRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoan&gt;</returns>
        public List<UniLoan> ListUniLoans (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UniLoan>> localVarResponse = ListUniLoansWithHttpInfo(currencyPair, currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoan&gt;</returns>
        public ApiResponse<List<UniLoan>> ListUniLoansWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoan>>("/margin/uni/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoan&gt;</returns>
        public async Task<List<UniLoan>> ListUniLoansAsync (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoan>> localVarResponse = await ListUniLoansAsyncWithHttpInfo(currencyPair, currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loans 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoan&gt;)</returns>
        public async Task<ApiResponse<List<UniLoan>>> ListUniLoansAsyncWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoan>>("/margin/uni/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns></returns>
        public void CreateUniLoan (CreateUniLoan createUniLoan)
        {
             CreateUniLoanWithHttpInfo(createUniLoan);
        }

        /// <summary>
        /// Borrow or repay 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateUniLoanWithHttpInfo (CreateUniLoan createUniLoan)
        {
            // verify the required parameter 'createUniLoan' is set
            if (createUniLoan == null)
                throw new ApiException(400, "Missing required parameter 'createUniLoan' when calling MarginUniApi->CreateUniLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createUniLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/margin/uni/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUniLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Borrow or repay 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns>Task of void</returns>
        public async Task CreateUniLoanAsync (CreateUniLoan createUniLoan)
        {
             await CreateUniLoanAsyncWithHttpInfo(createUniLoan);

        }

        /// <summary>
        /// Borrow or repay 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUniLoan"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> CreateUniLoanAsyncWithHttpInfo (CreateUniLoan createUniLoan)
        {
            // verify the required parameter 'createUniLoan' is set
            if (createUniLoan == null)
                throw new ApiException(400, "Missing required parameter 'createUniLoan' when calling MarginUniApi->CreateUniLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = createUniLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/margin/uni/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUniLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>List&lt;UniLoanRecord&gt;</returns>
        public List<UniLoanRecord> ListUniLoanRecords (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<UniLoanRecord>> localVarResponse = ListUniLoanRecordsWithHttpInfo(type, currency, currencyPair, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;UniLoanRecord&gt;</returns>
        public ApiResponse<List<UniLoanRecord>> ListUniLoanRecordsWithHttpInfo (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoanRecord>>("/margin/uni/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of List&lt;UniLoanRecord&gt;</returns>
        public async Task<List<UniLoanRecord>> ListUniLoanRecordsAsync (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoanRecord>> localVarResponse = await ListUniLoanRecordsAsyncWithHttpInfo(type, currency, currencyPair, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get load records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">type: borrow - borrow, repay - repay (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanRecord&gt;)</returns>
        public async Task<ApiResponse<List<UniLoanRecord>>> ListUniLoanRecordsAsyncWithHttpInfo (string type = default(string), string currency = default(string), string currencyPair = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoanRecord>>("/margin/uni/loan_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniLoanRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        public List<UniLoanInterestRecord> ListUniLoanInterestRecords (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<UniLoanInterestRecord>> localVarResponse = ListUniLoanInterestRecordsWithHttpInfo(currencyPair, currency, page, limit, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        public ApiResponse<List<UniLoanInterestRecord>> ListUniLoanInterestRecordsWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoanInterestRecord>>("/margin/uni/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        public async Task<List<UniLoanInterestRecord>> ListUniLoanInterestRecordsAsync (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoanInterestRecord>> localVarResponse = await ListUniLoanInterestRecordsAsyncWithHttpInfo(currencyPair, currency, page, limit, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List interest records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        public async Task<ApiResponse<List<UniLoanInterestRecord>>> ListUniLoanInterestRecordsAsyncWithHttpInfo (string currencyPair = default(string), string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoanInterestRecord>>("/margin/uni/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUniLoanInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get maximum borrowable 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>MaxUniBorrowable</returns>
        public MaxUniBorrowable GetUniBorrowable (string currency, string currencyPair)
        {
             ApiResponse<MaxUniBorrowable> localVarResponse = GetUniBorrowableWithHttpInfo(currency, currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get maximum borrowable 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of MaxUniBorrowable</returns>
        public ApiResponse<MaxUniBorrowable> GetUniBorrowableWithHttpInfo (string currency, string currencyPair)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginUniApi->GetUniBorrowable");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginUniApi->GetUniBorrowable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<MaxUniBorrowable>("/margin/uni/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get maximum borrowable 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of MaxUniBorrowable</returns>
        public async Task<MaxUniBorrowable> GetUniBorrowableAsync (string currency, string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<MaxUniBorrowable> localVarResponse = await GetUniBorrowableAsyncWithHttpInfo(currency, currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get maximum borrowable 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (MaxUniBorrowable)</returns>
        public async Task<ApiResponse<MaxUniBorrowable>> GetUniBorrowableAsyncWithHttpInfo (string currency, string currencyPair)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginUniApi->GetUniBorrowable");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginUniApi->GetUniBorrowable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MaxUniBorrowable>("/margin/uni/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
