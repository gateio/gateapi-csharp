/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollateralLoanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>List&lt;CollateralOrder&gt;</returns>
        List<CollateralOrder> ListCollateralLoanOrders (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string));

        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>ApiResponse of List&lt;CollateralOrder&gt;</returns>
        ApiResponse<List<CollateralOrder>> ListCollateralLoanOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string));
        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>OrderResp</returns>
        OrderResp CreateCollateralLoan (CreateCollateralOrder createCollateralOrder);

        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>ApiResponse of OrderResp</returns>
        ApiResponse<OrderResp> CreateCollateralLoanWithHttpInfo (CreateCollateralOrder createCollateralOrder);
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>CollateralOrder</returns>
        CollateralOrder GetCollateralLoanOrderDetail (long orderId);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of CollateralOrder</returns>
        ApiResponse<CollateralOrder> GetCollateralLoanOrderDetailWithHttpInfo (long orderId);
        /// <summary>
        /// Repayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>RepayResp</returns>
        RepayResp RepayCollateralLoan (RepayLoan repayLoan);

        /// <summary>
        /// Repayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>ApiResponse of RepayResp</returns>
        ApiResponse<RepayResp> RepayCollateralLoanWithHttpInfo (RepayLoan repayLoan);
        /// <summary>
        /// Repayment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;RepayRecord&gt;</returns>
        List<RepayRecord> ListRepayRecords (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Repayment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;RepayRecord&gt;</returns>
        ApiResponse<List<RepayRecord>> ListRepayRecordsWithHttpInfo (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>List&lt;CollateralRecord&gt;</returns>
        List<CollateralRecord> ListCollateralRecords (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string));

        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>ApiResponse of List&lt;CollateralRecord&gt;</returns>
        ApiResponse<List<CollateralRecord>> ListCollateralRecordsWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string));
        /// <summary>
        /// Increase or redeem collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns></returns>
        void OperateCollateral (CollateralAlign collateralAlign);

        /// <summary>
        /// Increase or redeem collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OperateCollateralWithHttpInfo (CollateralAlign collateralAlign);
        /// <summary>
        /// Query the total borrowing and collateral amount for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserTotalAmount</returns>
        UserTotalAmount GetUserTotalAmount ();

        /// <summary>
        /// Query the total borrowing and collateral amount for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserTotalAmount</returns>
        ApiResponse<UserTotalAmount> GetUserTotalAmountWithHttpInfo ();
        /// <summary>
        /// Query user&#39;s collateralization ratio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>UserLtvInfo</returns>
        UserLtvInfo GetUserLtvInfo (string collateralCurrency, string borrowCurrency);

        /// <summary>
        /// Query user&#39;s collateralization ratio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>ApiResponse of UserLtvInfo</returns>
        ApiResponse<UserLtvInfo> GetUserLtvInfoWithHttpInfo (string collateralCurrency, string borrowCurrency);
        /// <summary>
        /// Query supported borrowing and collateral currencies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>List&lt;CollateralLoanCurrency&gt;</returns>
        List<CollateralLoanCurrency> ListCollateralCurrencies (string loanCurrency = default(string));

        /// <summary>
        /// Query supported borrowing and collateral currencies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>ApiResponse of List&lt;CollateralLoanCurrency&gt;</returns>
        ApiResponse<List<CollateralLoanCurrency>> ListCollateralCurrenciesWithHttpInfo (string loanCurrency = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollateralLoanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>Task of List&lt;CollateralOrder&gt;</returns>
        Task<List<CollateralOrder>> ListCollateralLoanOrdersAsync (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string));

        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralOrder&gt;)</returns>
        Task<ApiResponse<List<CollateralOrder>>> ListCollateralLoanOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string));
        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>Task of OrderResp</returns>
        Task<OrderResp> CreateCollateralLoanAsync (CreateCollateralOrder createCollateralOrder);

        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>Task of ApiResponse (OrderResp)</returns>
        Task<ApiResponse<OrderResp>> CreateCollateralLoanAsyncWithHttpInfo (CreateCollateralOrder createCollateralOrder);
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of CollateralOrder</returns>
        Task<CollateralOrder> GetCollateralLoanOrderDetailAsync (long orderId);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (CollateralOrder)</returns>
        Task<ApiResponse<CollateralOrder>> GetCollateralLoanOrderDetailAsyncWithHttpInfo (long orderId);
        /// <summary>
        /// Repayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>Task of RepayResp</returns>
        Task<RepayResp> RepayCollateralLoanAsync (RepayLoan repayLoan);

        /// <summary>
        /// Repayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>Task of ApiResponse (RepayResp)</returns>
        Task<ApiResponse<RepayResp>> RepayCollateralLoanAsyncWithHttpInfo (RepayLoan repayLoan);
        /// <summary>
        /// Repayment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;RepayRecord&gt;</returns>
        Task<List<RepayRecord>> ListRepayRecordsAsync (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Repayment history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepayRecord&gt;)</returns>
        Task<ApiResponse<List<RepayRecord>>> ListRepayRecordsAsyncWithHttpInfo (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of List&lt;CollateralRecord&gt;</returns>
        Task<List<CollateralRecord>> ListCollateralRecordsAsync (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string));

        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralRecord&gt;)</returns>
        Task<ApiResponse<List<CollateralRecord>>> ListCollateralRecordsAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string));
        /// <summary>
        /// Increase or redeem collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns>Task of void</returns>
        Task OperateCollateralAsync (CollateralAlign collateralAlign);

        /// <summary>
        /// Increase or redeem collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> OperateCollateralAsyncWithHttpInfo (CollateralAlign collateralAlign);
        /// <summary>
        /// Query the total borrowing and collateral amount for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserTotalAmount</returns>
        Task<UserTotalAmount> GetUserTotalAmountAsync ();

        /// <summary>
        /// Query the total borrowing and collateral amount for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserTotalAmount)</returns>
        Task<ApiResponse<UserTotalAmount>> GetUserTotalAmountAsyncWithHttpInfo ();
        /// <summary>
        /// Query user&#39;s collateralization ratio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>Task of UserLtvInfo</returns>
        Task<UserLtvInfo> GetUserLtvInfoAsync (string collateralCurrency, string borrowCurrency);

        /// <summary>
        /// Query user&#39;s collateralization ratio
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>Task of ApiResponse (UserLtvInfo)</returns>
        Task<ApiResponse<UserLtvInfo>> GetUserLtvInfoAsyncWithHttpInfo (string collateralCurrency, string borrowCurrency);
        /// <summary>
        /// Query supported borrowing and collateral currencies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>Task of List&lt;CollateralLoanCurrency&gt;</returns>
        Task<List<CollateralLoanCurrency>> ListCollateralCurrenciesAsync (string loanCurrency = default(string));

        /// <summary>
        /// Query supported borrowing and collateral currencies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralLoanCurrency&gt;)</returns>
        Task<ApiResponse<List<CollateralLoanCurrency>>> ListCollateralCurrenciesAsyncWithHttpInfo (string loanCurrency = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollateralLoanApi : ICollateralLoanApiSync, ICollateralLoanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollateralLoanApi : ICollateralLoanApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralLoanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollateralLoanApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralLoanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollateralLoanApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralLoanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollateralLoanApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralLoanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CollateralLoanApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>List&lt;CollateralOrder&gt;</returns>
        public List<CollateralOrder> ListCollateralLoanOrders (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string))
        {
             ApiResponse<List<CollateralOrder>> localVarResponse = ListCollateralLoanOrdersWithHttpInfo(page, limit, collateralCurrency, borrowCurrency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>ApiResponse of List&lt;CollateralOrder&gt;</returns>
        public ApiResponse<List<CollateralOrder>> ListCollateralLoanOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CollateralOrder>>("/loan/collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollateralLoanOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>Task of List&lt;CollateralOrder&gt;</returns>
        public async Task<List<CollateralOrder>> ListCollateralLoanOrdersAsync (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CollateralOrder>> localVarResponse = await ListCollateralLoanOrdersAsyncWithHttpInfo(page, limit, collateralCurrency, borrowCurrency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralOrder&gt;)</returns>
        public async Task<ApiResponse<List<CollateralOrder>>> ListCollateralLoanOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), string collateralCurrency = default(string), string borrowCurrency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CollateralOrder>>("/loan/collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollateralLoanOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>OrderResp</returns>
        public OrderResp CreateCollateralLoan (CreateCollateralOrder createCollateralOrder)
        {
             ApiResponse<OrderResp> localVarResponse = CreateCollateralLoanWithHttpInfo(createCollateralOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>ApiResponse of OrderResp</returns>
        public ApiResponse<OrderResp> CreateCollateralLoanWithHttpInfo (CreateCollateralOrder createCollateralOrder)
        {
            // verify the required parameter 'createCollateralOrder' is set
            if (createCollateralOrder == null)
                throw new ApiException(400, "Missing required parameter 'createCollateralOrder' when calling CollateralLoanApi->CreateCollateralLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createCollateralOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderResp>("/loan/collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollateralLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>Task of OrderResp</returns>
        public async Task<OrderResp> CreateCollateralLoanAsync (CreateCollateralOrder createCollateralOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<OrderResp> localVarResponse = await CreateCollateralLoanAsyncWithHttpInfo(createCollateralOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollateralOrder"></param>
        /// <returns>Task of ApiResponse (OrderResp)</returns>
        public async Task<ApiResponse<OrderResp>> CreateCollateralLoanAsyncWithHttpInfo (CreateCollateralOrder createCollateralOrder)
        {
            // verify the required parameter 'createCollateralOrder' is set
            if (createCollateralOrder == null)
                throw new ApiException(400, "Missing required parameter 'createCollateralOrder' when calling CollateralLoanApi->CreateCollateralLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = createCollateralOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderResp>("/loan/collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollateralLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>CollateralOrder</returns>
        public CollateralOrder GetCollateralLoanOrderDetail (long orderId)
        {
             ApiResponse<CollateralOrder> localVarResponse = GetCollateralLoanOrderDetailWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of CollateralOrder</returns>
        public ApiResponse<CollateralOrder> GetCollateralLoanOrderDetailWithHttpInfo (long orderId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollateralOrder>("/loan/collateral/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollateralLoanOrderDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of CollateralOrder</returns>
        public async Task<CollateralOrder> GetCollateralLoanOrderDetailAsync (long orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<CollateralOrder> localVarResponse = await GetCollateralLoanOrderDetailAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (CollateralOrder)</returns>
        public async Task<ApiResponse<CollateralOrder>> GetCollateralLoanOrderDetailAsyncWithHttpInfo (long orderId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollateralOrder>("/loan/collateral/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollateralLoanOrderDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repayment 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>RepayResp</returns>
        public RepayResp RepayCollateralLoan (RepayLoan repayLoan)
        {
             ApiResponse<RepayResp> localVarResponse = RepayCollateralLoanWithHttpInfo(repayLoan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Repayment 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>ApiResponse of RepayResp</returns>
        public ApiResponse<RepayResp> RepayCollateralLoanWithHttpInfo (RepayLoan repayLoan)
        {
            // verify the required parameter 'repayLoan' is set
            if (repayLoan == null)
                throw new ApiException(400, "Missing required parameter 'repayLoan' when calling CollateralLoanApi->RepayCollateralLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = repayLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<RepayResp>("/loan/collateral/repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepayCollateralLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repayment 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>Task of RepayResp</returns>
        public async Task<RepayResp> RepayCollateralLoanAsync (RepayLoan repayLoan)
        {
             Io.Gate.GateApi.Client.ApiResponse<RepayResp> localVarResponse = await RepayCollateralLoanAsyncWithHttpInfo(repayLoan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Repayment 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayLoan"></param>
        /// <returns>Task of ApiResponse (RepayResp)</returns>
        public async Task<ApiResponse<RepayResp>> RepayCollateralLoanAsyncWithHttpInfo (RepayLoan repayLoan)
        {
            // verify the required parameter 'repayLoan' is set
            if (repayLoan == null)
                throw new ApiException(400, "Missing required parameter 'repayLoan' when calling CollateralLoanApi->RepayCollateralLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = repayLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RepayResp>("/loan/collateral/repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepayCollateralLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repayment history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;RepayRecord&gt;</returns>
        public List<RepayRecord> ListRepayRecords (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<RepayRecord>> localVarResponse = ListRepayRecordsWithHttpInfo(source, borrowCurrency, collateralCurrency, page, limit, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Repayment history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;RepayRecord&gt;</returns>
        public ApiResponse<List<RepayRecord>> ListRepayRecordsWithHttpInfo (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling CollateralLoanApi->ListRepayRecords");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "source", source));
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RepayRecord>>("/loan/collateral/repay_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRepayRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repayment history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;RepayRecord&gt;</returns>
        public async Task<List<RepayRecord>> ListRepayRecordsAsync (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<RepayRecord>> localVarResponse = await ListRepayRecordsAsyncWithHttpInfo(source, borrowCurrency, collateralCurrency, page, limit, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Repayment history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RepayRecord&gt;)</returns>
        public async Task<ApiResponse<List<RepayRecord>>> ListRepayRecordsAsyncWithHttpInfo (string source, string borrowCurrency = default(string), string collateralCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling CollateralLoanApi->ListRepayRecords");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "source", source));
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RepayRecord>>("/loan/collateral/repay_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRepayRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>List&lt;CollateralRecord&gt;</returns>
        public List<CollateralRecord> ListCollateralRecords (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string))
        {
             ApiResponse<List<CollateralRecord>> localVarResponse = ListCollateralRecordsWithHttpInfo(page, limit, from, to, borrowCurrency, collateralCurrency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>ApiResponse of List&lt;CollateralRecord&gt;</returns>
        public ApiResponse<List<CollateralRecord>> ListCollateralRecordsWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CollateralRecord>>("/loan/collateral/collaterals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollateralRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of List&lt;CollateralRecord&gt;</returns>
        public async Task<List<CollateralRecord>> ListCollateralRecordsAsync (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CollateralRecord>> localVarResponse = await ListCollateralRecordsAsyncWithHttpInfo(page, limit, from, to, borrowCurrency, collateralCurrency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralRecord&gt;)</returns>
        public async Task<ApiResponse<List<CollateralRecord>>> ListCollateralRecordsAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string borrowCurrency = default(string), string collateralCurrency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CollateralRecord>>("/loan/collateral/collaterals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollateralRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Increase or redeem collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns></returns>
        public void OperateCollateral (CollateralAlign collateralAlign)
        {
             OperateCollateralWithHttpInfo(collateralAlign);
        }

        /// <summary>
        /// Increase or redeem collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OperateCollateralWithHttpInfo (CollateralAlign collateralAlign)
        {
            // verify the required parameter 'collateralAlign' is set
            if (collateralAlign == null)
                throw new ApiException(400, "Missing required parameter 'collateralAlign' when calling CollateralLoanApi->OperateCollateral");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collateralAlign;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/loan/collateral/collaterals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OperateCollateral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Increase or redeem collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns>Task of void</returns>
        public async Task OperateCollateralAsync (CollateralAlign collateralAlign)
        {
             await OperateCollateralAsyncWithHttpInfo(collateralAlign);

        }

        /// <summary>
        /// Increase or redeem collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAlign"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> OperateCollateralAsyncWithHttpInfo (CollateralAlign collateralAlign)
        {
            // verify the required parameter 'collateralAlign' is set
            if (collateralAlign == null)
                throw new ApiException(400, "Missing required parameter 'collateralAlign' when calling CollateralLoanApi->OperateCollateral");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = collateralAlign;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/loan/collateral/collaterals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OperateCollateral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the total borrowing and collateral amount for the user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserTotalAmount</returns>
        public UserTotalAmount GetUserTotalAmount ()
        {
             ApiResponse<UserTotalAmount> localVarResponse = GetUserTotalAmountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the total borrowing and collateral amount for the user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserTotalAmount</returns>
        public ApiResponse<UserTotalAmount> GetUserTotalAmountWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserTotalAmount>("/loan/collateral/total_amount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTotalAmount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the total borrowing and collateral amount for the user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserTotalAmount</returns>
        public async Task<UserTotalAmount> GetUserTotalAmountAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<UserTotalAmount> localVarResponse = await GetUserTotalAmountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the total borrowing and collateral amount for the user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserTotalAmount)</returns>
        public async Task<ApiResponse<UserTotalAmount>> GetUserTotalAmountAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserTotalAmount>("/loan/collateral/total_amount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTotalAmount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query user&#39;s collateralization ratio 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>UserLtvInfo</returns>
        public UserLtvInfo GetUserLtvInfo (string collateralCurrency, string borrowCurrency)
        {
             ApiResponse<UserLtvInfo> localVarResponse = GetUserLtvInfoWithHttpInfo(collateralCurrency, borrowCurrency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query user&#39;s collateralization ratio 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>ApiResponse of UserLtvInfo</returns>
        public ApiResponse<UserLtvInfo> GetUserLtvInfoWithHttpInfo (string collateralCurrency, string borrowCurrency)
        {
            // verify the required parameter 'collateralCurrency' is set
            if (collateralCurrency == null)
                throw new ApiException(400, "Missing required parameter 'collateralCurrency' when calling CollateralLoanApi->GetUserLtvInfo");

            // verify the required parameter 'borrowCurrency' is set
            if (borrowCurrency == null)
                throw new ApiException(400, "Missing required parameter 'borrowCurrency' when calling CollateralLoanApi->GetUserLtvInfo");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserLtvInfo>("/loan/collateral/ltv", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLtvInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query user&#39;s collateralization ratio 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>Task of UserLtvInfo</returns>
        public async Task<UserLtvInfo> GetUserLtvInfoAsync (string collateralCurrency, string borrowCurrency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UserLtvInfo> localVarResponse = await GetUserLtvInfoAsyncWithHttpInfo(collateralCurrency, borrowCurrency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query user&#39;s collateralization ratio 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralCurrency">Collateral</param>
        /// <param name="borrowCurrency">Borrowed currency</param>
        /// <returns>Task of ApiResponse (UserLtvInfo)</returns>
        public async Task<ApiResponse<UserLtvInfo>> GetUserLtvInfoAsyncWithHttpInfo (string collateralCurrency, string borrowCurrency)
        {
            // verify the required parameter 'collateralCurrency' is set
            if (collateralCurrency == null)
                throw new ApiException(400, "Missing required parameter 'collateralCurrency' when calling CollateralLoanApi->GetUserLtvInfo");

            // verify the required parameter 'borrowCurrency' is set
            if (borrowCurrency == null)
                throw new ApiException(400, "Missing required parameter 'borrowCurrency' when calling CollateralLoanApi->GetUserLtvInfo");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserLtvInfo>("/loan/collateral/ltv", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLtvInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query supported borrowing and collateral currencies 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>List&lt;CollateralLoanCurrency&gt;</returns>
        public List<CollateralLoanCurrency> ListCollateralCurrencies (string loanCurrency = default(string))
        {
             ApiResponse<List<CollateralLoanCurrency>> localVarResponse = ListCollateralCurrenciesWithHttpInfo(loanCurrency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query supported borrowing and collateral currencies 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>ApiResponse of List&lt;CollateralLoanCurrency&gt;</returns>
        public ApiResponse<List<CollateralLoanCurrency>> ListCollateralCurrenciesWithHttpInfo (string loanCurrency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (loanCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "loan_currency", loanCurrency));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CollateralLoanCurrency>>("/loan/collateral/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollateralCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query supported borrowing and collateral currencies 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>Task of List&lt;CollateralLoanCurrency&gt;</returns>
        public async Task<List<CollateralLoanCurrency>> ListCollateralCurrenciesAsync (string loanCurrency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CollateralLoanCurrency>> localVarResponse = await ListCollateralCurrenciesAsyncWithHttpInfo(loanCurrency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query supported borrowing and collateral currencies 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanCurrency">The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies. If loan_currency is provided, the API will return an array of collateral currencies supported for the specified borrowing currency. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralLoanCurrency&gt;)</returns>
        public async Task<ApiResponse<List<CollateralLoanCurrency>>> ListCollateralCurrenciesAsyncWithHttpInfo (string loanCurrency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (loanCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "loan_currency", loanCurrency));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CollateralLoanCurrency>>("/loan/collateral/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollateralCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
