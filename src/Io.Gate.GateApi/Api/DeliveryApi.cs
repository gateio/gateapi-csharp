/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all futures contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>List&lt;DeliveryContract&gt;</returns>
        List<DeliveryContract> ListDeliveryContracts (string settle);

        /// <summary>
        /// List all futures contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>ApiResponse of List&lt;DeliveryContract&gt;</returns>
        ApiResponse<List<DeliveryContract>> ListDeliveryContractsWithHttpInfo (string settle);
        /// <summary>
        /// Get a single contract
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>DeliveryContract</returns>
        DeliveryContract GetDeliveryContract (string settle, string contract);

        /// <summary>
        /// Get a single contract
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>ApiResponse of DeliveryContract</returns>
        ApiResponse<DeliveryContract> GetDeliveryContractWithHttpInfo (string settle, string contract);
        /// <summary>
        /// Futures order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>FuturesOrderBook</returns>
        FuturesOrderBook ListDeliveryOrderBook (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Futures order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>ApiResponse of FuturesOrderBook</returns>
        ApiResponse<FuturesOrderBook> ListDeliveryOrderBookWithHttpInfo (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// Futures trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>List&lt;FuturesTrade&gt;</returns>
        List<FuturesTrade> ListDeliveryTrades (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Futures trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesTrade&gt;</returns>
        ApiResponse<List<FuturesTrade>> ListDeliveryTradesWithHttpInfo (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get futures candlesticks
        /// </summary>
        /// <remarks>
        /// Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>List&lt;DeliveryCandlestick&gt;</returns>
        List<DeliveryCandlestick> ListDeliveryCandlesticks (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string));

        /// <summary>
        /// Get futures candlesticks
        /// </summary>
        /// <remarks>
        /// Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>ApiResponse of List&lt;DeliveryCandlestick&gt;</returns>
        ApiResponse<List<DeliveryCandlestick>> ListDeliveryCandlesticksWithHttpInfo (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string));
        /// <summary>
        /// List futures tickers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>List&lt;DeliveryTicker&gt;</returns>
        List<DeliveryTicker> ListDeliveryTickers (string settle, string contract = default(string));

        /// <summary>
        /// List futures tickers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>ApiResponse of List&lt;DeliveryTicker&gt;</returns>
        ApiResponse<List<DeliveryTicker>> ListDeliveryTickersWithHttpInfo (string settle, string contract = default(string));
        /// <summary>
        /// Futures insurance balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;InsuranceRecord&gt;</returns>
        List<InsuranceRecord> ListDeliveryInsuranceLedger (string settle, int? limit = default(int?));

        /// <summary>
        /// Futures insurance balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;InsuranceRecord&gt;</returns>
        ApiResponse<List<InsuranceRecord>> ListDeliveryInsuranceLedgerWithHttpInfo (string settle, int? limit = default(int?));
        /// <summary>
        /// Query futures account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>FuturesAccount</returns>
        FuturesAccount ListDeliveryAccounts (string settle);

        /// <summary>
        /// Query futures account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>ApiResponse of FuturesAccount</returns>
        ApiResponse<FuturesAccount> ListDeliveryAccountsWithHttpInfo (string settle);
        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>List&lt;FuturesAccountBook&gt;</returns>
        List<FuturesAccountBook> ListDeliveryAccountBook (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));

        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesAccountBook&gt;</returns>
        ApiResponse<List<FuturesAccountBook>> ListDeliveryAccountBookWithHttpInfo (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));
        /// <summary>
        /// List all positions of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>List&lt;Position&gt;</returns>
        List<Position> ListDeliveryPositions (string settle);

        /// <summary>
        /// List all positions of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        ApiResponse<List<Position>> ListDeliveryPositionsWithHttpInfo (string settle);
        /// <summary>
        /// Get single position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Position</returns>
        Position GetDeliveryPosition (string settle, string contract);

        /// <summary>
        /// Get single position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> GetDeliveryPositionWithHttpInfo (string settle, string contract);
        /// <summary>
        /// Update position margin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>Position</returns>
        Position UpdateDeliveryPositionMargin (string settle, string contract, string change);

        /// <summary>
        /// Update position margin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> UpdateDeliveryPositionMarginWithHttpInfo (string settle, string contract, string change);
        /// <summary>
        /// Update position leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>Position</returns>
        Position UpdateDeliveryPositionLeverage (string settle, string contract, string leverage);

        /// <summary>
        /// Update position leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> UpdateDeliveryPositionLeverageWithHttpInfo (string settle, string contract, string leverage);
        /// <summary>
        /// Update position risk limit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>Position</returns>
        Position UpdateDeliveryPositionRiskLimit (string settle, string contract, string riskLimit);

        /// <summary>
        /// Update position risk limit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> UpdateDeliveryPositionRiskLimitWithHttpInfo (string settle, string contract, string riskLimit);
        /// <summary>
        /// List futures orders
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>List&lt;FuturesOrder&gt;</returns>
        List<FuturesOrder> ListDeliveryOrders (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));

        /// <summary>
        /// List futures orders
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesOrder&gt;</returns>
        ApiResponse<List<FuturesOrder>> ListDeliveryOrdersWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));
        /// <summary>
        /// Create a futures order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>FuturesOrder</returns>
        FuturesOrder CreateDeliveryOrder (string settle, FuturesOrder futuresOrder);

        /// <summary>
        /// Create a futures order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>ApiResponse of FuturesOrder</returns>
        ApiResponse<FuturesOrder> CreateDeliveryOrderWithHttpInfo (string settle, FuturesOrder futuresOrder);
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>List&lt;FuturesOrder&gt;</returns>
        List<FuturesOrder> CancelDeliveryOrders (string settle, string contract, string side = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesOrder&gt;</returns>
        ApiResponse<List<FuturesOrder>> CancelDeliveryOrdersWithHttpInfo (string settle, string contract, string side = default(string));
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesOrder</returns>
        FuturesOrder GetDeliveryOrder (string settle, string orderId);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesOrder</returns>
        ApiResponse<FuturesOrder> GetDeliveryOrderWithHttpInfo (string settle, string orderId);
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesOrder</returns>
        FuturesOrder CancelDeliveryOrder (string settle, string orderId);

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesOrder</returns>
        ApiResponse<FuturesOrder> CancelDeliveryOrderWithHttpInfo (string settle, string orderId);
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>List&lt;MyFuturesTrade&gt;</returns>
        List<MyFuturesTrade> GetMyDeliveryTrades (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;MyFuturesTrade&gt;</returns>
        ApiResponse<List<MyFuturesTrade>> GetMyDeliveryTradesWithHttpInfo (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));
        /// <summary>
        /// List position close history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;PositionClose&gt;</returns>
        List<PositionClose> ListDeliveryPositionClose (string settle, string contract = default(string), int? limit = default(int?));

        /// <summary>
        /// List position close history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;PositionClose&gt;</returns>
        ApiResponse<List<PositionClose>> ListDeliveryPositionCloseWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?));
        /// <summary>
        /// List liquidation history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>List&lt;FuturesLiquidate&gt;</returns>
        List<FuturesLiquidate> ListDeliveryLiquidates (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));

        /// <summary>
        /// List liquidation history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesLiquidate&gt;</returns>
        ApiResponse<List<FuturesLiquidate>> ListDeliveryLiquidatesWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));
        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>List&lt;DeliverySettlement&gt;</returns>
        List<DeliverySettlement> ListDeliverySettlements (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));

        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;DeliverySettlement&gt;</returns>
        ApiResponse<List<DeliverySettlement>> ListDeliverySettlementsWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));
        /// <summary>
        /// List risk limit tiers
        /// </summary>
        /// <remarks>
        /// When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;FuturesLimitRiskTiers&gt;</returns>
        List<FuturesLimitRiskTiers> ListDeliveryRiskLimitTiers (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// List risk limit tiers
        /// </summary>
        /// <remarks>
        /// When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesLimitRiskTiers&gt;</returns>
        ApiResponse<List<FuturesLimitRiskTiers>> ListDeliveryRiskLimitTiersWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// List All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        List<FuturesPriceTriggeredOrder> ListPriceTriggeredDeliveryOrders (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// List All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        ApiResponse<List<FuturesPriceTriggeredOrder>> ListPriceTriggeredDeliveryOrdersWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>TriggerOrderResponse</returns>
        TriggerOrderResponse CreatePriceTriggeredDeliveryOrder (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder);

        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>ApiResponse of TriggerOrderResponse</returns>
        ApiResponse<TriggerOrderResponse> CreatePriceTriggeredDeliveryOrderWithHttpInfo (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder);
        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        List<FuturesPriceTriggeredOrder> CancelPriceTriggeredDeliveryOrderList (string settle, string contract);

        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>ApiResponse of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        ApiResponse<List<FuturesPriceTriggeredOrder>> CancelPriceTriggeredDeliveryOrderListWithHttpInfo (string settle, string contract);
        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesPriceTriggeredOrder</returns>
        FuturesPriceTriggeredOrder GetPriceTriggeredDeliveryOrder (string settle, string orderId);

        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesPriceTriggeredOrder</returns>
        ApiResponse<FuturesPriceTriggeredOrder> GetPriceTriggeredDeliveryOrderWithHttpInfo (string settle, string orderId);
        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesPriceTriggeredOrder</returns>
        FuturesPriceTriggeredOrder CancelPriceTriggeredDeliveryOrder (string settle, string orderId);

        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesPriceTriggeredOrder</returns>
        ApiResponse<FuturesPriceTriggeredOrder> CancelPriceTriggeredDeliveryOrderWithHttpInfo (string settle, string orderId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all futures contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of List&lt;DeliveryContract&gt;</returns>
        Task<List<DeliveryContract>> ListDeliveryContractsAsync (string settle);

        /// <summary>
        /// List all futures contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of ApiResponse (List&lt;DeliveryContract&gt;)</returns>
        Task<ApiResponse<List<DeliveryContract>>> ListDeliveryContractsAsyncWithHttpInfo (string settle);
        /// <summary>
        /// Get a single contract
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of DeliveryContract</returns>
        Task<DeliveryContract> GetDeliveryContractAsync (string settle, string contract);

        /// <summary>
        /// Get a single contract
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of ApiResponse (DeliveryContract)</returns>
        Task<ApiResponse<DeliveryContract>> GetDeliveryContractAsyncWithHttpInfo (string settle, string contract);
        /// <summary>
        /// Futures order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>Task of FuturesOrderBook</returns>
        Task<FuturesOrderBook> ListDeliveryOrderBookAsync (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Futures order book
        /// </summary>
        /// <remarks>
        /// Bids will be sorted by price from high to low, while asks sorted reversely
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (FuturesOrderBook)</returns>
        Task<ApiResponse<FuturesOrderBook>> ListDeliveryOrderBookAsyncWithHttpInfo (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// Futures trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>Task of List&lt;FuturesTrade&gt;</returns>
        Task<List<FuturesTrade>> ListDeliveryTradesAsync (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Futures trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesTrade&gt;)</returns>
        Task<ApiResponse<List<FuturesTrade>>> ListDeliveryTradesAsyncWithHttpInfo (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get futures candlesticks
        /// </summary>
        /// <remarks>
        /// Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>Task of List&lt;DeliveryCandlestick&gt;</returns>
        Task<List<DeliveryCandlestick>> ListDeliveryCandlesticksAsync (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string));

        /// <summary>
        /// Get futures candlesticks
        /// </summary>
        /// <remarks>
        /// Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>Task of ApiResponse (List&lt;DeliveryCandlestick&gt;)</returns>
        Task<ApiResponse<List<DeliveryCandlestick>>> ListDeliveryCandlesticksAsyncWithHttpInfo (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string));
        /// <summary>
        /// List futures tickers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>Task of List&lt;DeliveryTicker&gt;</returns>
        Task<List<DeliveryTicker>> ListDeliveryTickersAsync (string settle, string contract = default(string));

        /// <summary>
        /// List futures tickers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeliveryTicker&gt;)</returns>
        Task<ApiResponse<List<DeliveryTicker>>> ListDeliveryTickersAsyncWithHttpInfo (string settle, string contract = default(string));
        /// <summary>
        /// Futures insurance balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;InsuranceRecord&gt;</returns>
        Task<List<InsuranceRecord>> ListDeliveryInsuranceLedgerAsync (string settle, int? limit = default(int?));

        /// <summary>
        /// Futures insurance balance history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;InsuranceRecord&gt;)</returns>
        Task<ApiResponse<List<InsuranceRecord>>> ListDeliveryInsuranceLedgerAsyncWithHttpInfo (string settle, int? limit = default(int?));
        /// <summary>
        /// Query futures account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of FuturesAccount</returns>
        Task<FuturesAccount> ListDeliveryAccountsAsync (string settle);

        /// <summary>
        /// Query futures account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of ApiResponse (FuturesAccount)</returns>
        Task<ApiResponse<FuturesAccount>> ListDeliveryAccountsAsyncWithHttpInfo (string settle);
        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>Task of List&lt;FuturesAccountBook&gt;</returns>
        Task<List<FuturesAccountBook>> ListDeliveryAccountBookAsync (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));

        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesAccountBook&gt;)</returns>
        Task<ApiResponse<List<FuturesAccountBook>>> ListDeliveryAccountBookAsyncWithHttpInfo (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string));
        /// <summary>
        /// List all positions of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        Task<List<Position>> ListDeliveryPositionsAsync (string settle);

        /// <summary>
        /// List all positions of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        Task<ApiResponse<List<Position>>> ListDeliveryPositionsAsyncWithHttpInfo (string settle);
        /// <summary>
        /// Get single position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of Position</returns>
        Task<Position> GetDeliveryPositionAsync (string settle, string contract);

        /// <summary>
        /// Get single position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        Task<ApiResponse<Position>> GetDeliveryPositionAsyncWithHttpInfo (string settle, string contract);
        /// <summary>
        /// Update position margin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>Task of Position</returns>
        Task<Position> UpdateDeliveryPositionMarginAsync (string settle, string contract, string change);

        /// <summary>
        /// Update position margin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>Task of ApiResponse (Position)</returns>
        Task<ApiResponse<Position>> UpdateDeliveryPositionMarginAsyncWithHttpInfo (string settle, string contract, string change);
        /// <summary>
        /// Update position leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>Task of Position</returns>
        Task<Position> UpdateDeliveryPositionLeverageAsync (string settle, string contract, string leverage);

        /// <summary>
        /// Update position leverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        Task<ApiResponse<Position>> UpdateDeliveryPositionLeverageAsyncWithHttpInfo (string settle, string contract, string leverage);
        /// <summary>
        /// Update position risk limit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>Task of Position</returns>
        Task<Position> UpdateDeliveryPositionRiskLimitAsync (string settle, string contract, string riskLimit);

        /// <summary>
        /// Update position risk limit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        Task<ApiResponse<Position>> UpdateDeliveryPositionRiskLimitAsyncWithHttpInfo (string settle, string contract, string riskLimit);
        /// <summary>
        /// List futures orders
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesOrder&gt;</returns>
        Task<List<FuturesOrder>> ListDeliveryOrdersAsync (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));

        /// <summary>
        /// List futures orders
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesOrder&gt;)</returns>
        Task<ApiResponse<List<FuturesOrder>>> ListDeliveryOrdersAsyncWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));
        /// <summary>
        /// Create a futures order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>Task of FuturesOrder</returns>
        Task<FuturesOrder> CreateDeliveryOrderAsync (string settle, FuturesOrder futuresOrder);

        /// <summary>
        /// Create a futures order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>Task of ApiResponse (FuturesOrder)</returns>
        Task<ApiResponse<FuturesOrder>> CreateDeliveryOrderAsyncWithHttpInfo (string settle, FuturesOrder futuresOrder);
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of List&lt;FuturesOrder&gt;</returns>
        Task<List<FuturesOrder>> CancelDeliveryOrdersAsync (string settle, string contract, string side = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesOrder&gt;)</returns>
        Task<ApiResponse<List<FuturesOrder>>> CancelDeliveryOrdersAsyncWithHttpInfo (string settle, string contract, string side = default(string));
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesOrder</returns>
        Task<FuturesOrder> GetDeliveryOrderAsync (string settle, string orderId);

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesOrder)</returns>
        Task<ApiResponse<FuturesOrder>> GetDeliveryOrderAsyncWithHttpInfo (string settle, string orderId);
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesOrder</returns>
        Task<FuturesOrder> CancelDeliveryOrderAsync (string settle, string orderId);

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesOrder)</returns>
        Task<ApiResponse<FuturesOrder>> CancelDeliveryOrderAsyncWithHttpInfo (string settle, string orderId);
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of List&lt;MyFuturesTrade&gt;</returns>
        Task<List<MyFuturesTrade>> GetMyDeliveryTradesAsync (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;MyFuturesTrade&gt;)</returns>
        Task<ApiResponse<List<MyFuturesTrade>>> GetMyDeliveryTradesAsyncWithHttpInfo (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?));
        /// <summary>
        /// List position close history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;PositionClose&gt;</returns>
        Task<List<PositionClose>> ListDeliveryPositionCloseAsync (string settle, string contract = default(string), int? limit = default(int?));

        /// <summary>
        /// List position close history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;PositionClose&gt;)</returns>
        Task<ApiResponse<List<PositionClose>>> ListDeliveryPositionCloseAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?));
        /// <summary>
        /// List liquidation history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesLiquidate&gt;</returns>
        Task<List<FuturesLiquidate>> ListDeliveryLiquidatesAsync (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));

        /// <summary>
        /// List liquidation history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesLiquidate&gt;)</returns>
        Task<ApiResponse<List<FuturesLiquidate>>> ListDeliveryLiquidatesAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));
        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>Task of List&lt;DeliverySettlement&gt;</returns>
        Task<List<DeliverySettlement>> ListDeliverySettlementsAsync (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));

        /// <summary>
        /// List settlement history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;DeliverySettlement&gt;)</returns>
        Task<ApiResponse<List<DeliverySettlement>>> ListDeliverySettlementsAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?));
        /// <summary>
        /// List risk limit tiers
        /// </summary>
        /// <remarks>
        /// When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesLimitRiskTiers&gt;</returns>
        Task<List<FuturesLimitRiskTiers>> ListDeliveryRiskLimitTiersAsync (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// List risk limit tiers
        /// </summary>
        /// <remarks>
        /// When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesLimitRiskTiers&gt;)</returns>
        Task<ApiResponse<List<FuturesLimitRiskTiers>>> ListDeliveryRiskLimitTiersAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// List All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        Task<List<FuturesPriceTriggeredOrder>> ListPriceTriggeredDeliveryOrdersAsync (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// List All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesPriceTriggeredOrder&gt;)</returns>
        Task<ApiResponse<List<FuturesPriceTriggeredOrder>>> ListPriceTriggeredDeliveryOrdersAsyncWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>Task of TriggerOrderResponse</returns>
        Task<TriggerOrderResponse> CreatePriceTriggeredDeliveryOrderAsync (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder);

        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>Task of ApiResponse (TriggerOrderResponse)</returns>
        Task<ApiResponse<TriggerOrderResponse>> CreatePriceTriggeredDeliveryOrderAsyncWithHttpInfo (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder);
        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        Task<List<FuturesPriceTriggeredOrder>> CancelPriceTriggeredDeliveryOrderListAsync (string settle, string contract);

        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesPriceTriggeredOrder&gt;)</returns>
        Task<ApiResponse<List<FuturesPriceTriggeredOrder>>> CancelPriceTriggeredDeliveryOrderListAsyncWithHttpInfo (string settle, string contract);
        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesPriceTriggeredOrder</returns>
        Task<FuturesPriceTriggeredOrder> GetPriceTriggeredDeliveryOrderAsync (string settle, string orderId);

        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesPriceTriggeredOrder)</returns>
        Task<ApiResponse<FuturesPriceTriggeredOrder>> GetPriceTriggeredDeliveryOrderAsyncWithHttpInfo (string settle, string orderId);
        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesPriceTriggeredOrder</returns>
        Task<FuturesPriceTriggeredOrder> CancelPriceTriggeredDeliveryOrderAsync (string settle, string orderId);

        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesPriceTriggeredOrder)</returns>
        Task<ApiResponse<FuturesPriceTriggeredOrder>> CancelPriceTriggeredDeliveryOrderAsyncWithHttpInfo (string settle, string orderId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryApi : IDeliveryApiSync, IDeliveryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeliveryApi : IDeliveryApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeliveryApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeliveryApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all futures contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>List&lt;DeliveryContract&gt;</returns>
        public List<DeliveryContract> ListDeliveryContracts (string settle)
        {
             ApiResponse<List<DeliveryContract>> localVarResponse = ListDeliveryContractsWithHttpInfo(settle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all futures contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>ApiResponse of List&lt;DeliveryContract&gt;</returns>
        public ApiResponse<List<DeliveryContract>> ListDeliveryContractsWithHttpInfo (string settle)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryContracts");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeliveryContract>>("/delivery/{settle}/contracts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryContracts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all futures contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of List&lt;DeliveryContract&gt;</returns>
        public async Task<List<DeliveryContract>> ListDeliveryContractsAsync (string settle)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DeliveryContract>> localVarResponse = await ListDeliveryContractsAsyncWithHttpInfo(settle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all futures contracts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of ApiResponse (List&lt;DeliveryContract&gt;)</returns>
        public async Task<ApiResponse<List<DeliveryContract>>> ListDeliveryContractsAsyncWithHttpInfo (string settle)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryContracts");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeliveryContract>>("/delivery/{settle}/contracts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryContracts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single contract 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>DeliveryContract</returns>
        public DeliveryContract GetDeliveryContract (string settle, string contract)
        {
             ApiResponse<DeliveryContract> localVarResponse = GetDeliveryContractWithHttpInfo(settle, contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contract 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>ApiResponse of DeliveryContract</returns>
        public ApiResponse<DeliveryContract> GetDeliveryContractWithHttpInfo (string settle, string contract)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetDeliveryContract");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->GetDeliveryContract");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeliveryContract>("/delivery/{settle}/contracts/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single contract 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of DeliveryContract</returns>
        public async Task<DeliveryContract> GetDeliveryContractAsync (string settle, string contract)
        {
             Io.Gate.GateApi.Client.ApiResponse<DeliveryContract> localVarResponse = await GetDeliveryContractAsyncWithHttpInfo(settle, contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contract 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of ApiResponse (DeliveryContract)</returns>
        public async Task<ApiResponse<DeliveryContract>> GetDeliveryContractAsyncWithHttpInfo (string settle, string contract)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetDeliveryContract");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->GetDeliveryContract");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeliveryContract>("/delivery/{settle}/contracts/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Futures order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>FuturesOrderBook</returns>
        public FuturesOrderBook ListDeliveryOrderBook (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             ApiResponse<FuturesOrderBook> localVarResponse = ListDeliveryOrderBookWithHttpInfo(settle, contract, interval, limit, withId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Futures order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>ApiResponse of FuturesOrderBook</returns>
        public ApiResponse<FuturesOrderBook> ListDeliveryOrderBookWithHttpInfo (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryOrderBook");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->ListDeliveryOrderBook");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FuturesOrderBook>("/delivery/{settle}/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Futures order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>Task of FuturesOrderBook</returns>
        public async Task<FuturesOrderBook> ListDeliveryOrderBookAsync (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesOrderBook> localVarResponse = await ListDeliveryOrderBookAsyncWithHttpInfo(settle, contract, interval, limit, withId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Futures order book Bids will be sorted by price from high to low, while asks sorted reversely
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Whether to return depth update ID. This ID increments by 1 each time. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (FuturesOrderBook)</returns>
        public async Task<ApiResponse<FuturesOrderBook>> ListDeliveryOrderBookAsyncWithHttpInfo (string settle, string contract, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryOrderBook");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->ListDeliveryOrderBook");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FuturesOrderBook>("/delivery/{settle}/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Futures trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>List&lt;FuturesTrade&gt;</returns>
        public List<FuturesTrade> ListDeliveryTrades (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<FuturesTrade>> localVarResponse = ListDeliveryTradesWithHttpInfo(settle, contract, limit, lastId, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Futures trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesTrade&gt;</returns>
        public ApiResponse<List<FuturesTrade>> ListDeliveryTradesWithHttpInfo (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryTrades");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->ListDeliveryTrades");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesTrade>>("/delivery/{settle}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Futures trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>Task of List&lt;FuturesTrade&gt;</returns>
        public async Task<List<FuturesTrade>> ListDeliveryTradesAsync (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesTrade>> localVarResponse = await ListDeliveryTradesAsyncWithHttpInfo(settle, contract, limit, lastId, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Futures trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="lastId">以上个列表的最后一条记录的 ID 作为下个列表的起点。 该字段不再继续支持，新的请求请使用 &#x60;from&#x60; 和 &#x60;to&#x60; 字段来限定时间范围 (optional)</param>
        /// <param name="from">Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)</param>
        /// <param name="to">Specify end time in Unix seconds, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesTrade&gt;)</returns>
        public async Task<ApiResponse<List<FuturesTrade>>> ListDeliveryTradesAsyncWithHttpInfo (string settle, string contract, int? limit = default(int?), string lastId = default(string), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryTrades");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->ListDeliveryTrades");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesTrade>>("/delivery/{settle}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get futures candlesticks Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>List&lt;DeliveryCandlestick&gt;</returns>
        public List<DeliveryCandlestick> ListDeliveryCandlesticks (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string))
        {
             ApiResponse<List<DeliveryCandlestick>> localVarResponse = ListDeliveryCandlesticksWithHttpInfo(settle, contract, from, to, limit, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get futures candlesticks Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>ApiResponse of List&lt;DeliveryCandlestick&gt;</returns>
        public ApiResponse<List<DeliveryCandlestick>> ListDeliveryCandlesticksWithHttpInfo (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryCandlesticks");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->ListDeliveryCandlesticks");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeliveryCandlestick>>("/delivery/{settle}/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get futures candlesticks Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>Task of List&lt;DeliveryCandlestick&gt;</returns>
        public async Task<List<DeliveryCandlestick>> ListDeliveryCandlesticksAsync (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DeliveryCandlestick>> localVarResponse = await ListDeliveryCandlesticksAsyncWithHttpInfo(settle, contract, from, to, limit, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get futures candlesticks Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="interval">Time interval between data points, note that 1w represents a natural week, 7d time is aligned with Unix initial timeweek  (optional, default to 5m)</param>
        /// <returns>Task of ApiResponse (List&lt;DeliveryCandlestick&gt;)</returns>
        public async Task<ApiResponse<List<DeliveryCandlestick>>> ListDeliveryCandlesticksAsyncWithHttpInfo (string settle, string contract, long? from = default(long?), long? to = default(long?), int? limit = default(int?), string interval = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryCandlesticks");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->ListDeliveryCandlesticks");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeliveryCandlestick>>("/delivery/{settle}/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List futures tickers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>List&lt;DeliveryTicker&gt;</returns>
        public List<DeliveryTicker> ListDeliveryTickers (string settle, string contract = default(string))
        {
             ApiResponse<List<DeliveryTicker>> localVarResponse = ListDeliveryTickersWithHttpInfo(settle, contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List futures tickers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>ApiResponse of List&lt;DeliveryTicker&gt;</returns>
        public ApiResponse<List<DeliveryTicker>> ListDeliveryTickersWithHttpInfo (string settle, string contract = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryTickers");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeliveryTicker>>("/delivery/{settle}/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List futures tickers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>Task of List&lt;DeliveryTicker&gt;</returns>
        public async Task<List<DeliveryTicker>> ListDeliveryTickersAsync (string settle, string contract = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DeliveryTicker>> localVarResponse = await ListDeliveryTickersAsyncWithHttpInfo(settle, contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List futures tickers 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeliveryTicker&gt;)</returns>
        public async Task<ApiResponse<List<DeliveryTicker>>> ListDeliveryTickersAsyncWithHttpInfo (string settle, string contract = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryTickers");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeliveryTicker>>("/delivery/{settle}/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Futures insurance balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;InsuranceRecord&gt;</returns>
        public List<InsuranceRecord> ListDeliveryInsuranceLedger (string settle, int? limit = default(int?))
        {
             ApiResponse<List<InsuranceRecord>> localVarResponse = ListDeliveryInsuranceLedgerWithHttpInfo(settle, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Futures insurance balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;InsuranceRecord&gt;</returns>
        public ApiResponse<List<InsuranceRecord>> ListDeliveryInsuranceLedgerWithHttpInfo (string settle, int? limit = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryInsuranceLedger");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InsuranceRecord>>("/delivery/{settle}/insurance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryInsuranceLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Futures insurance balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;InsuranceRecord&gt;</returns>
        public async Task<List<InsuranceRecord>> ListDeliveryInsuranceLedgerAsync (string settle, int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<InsuranceRecord>> localVarResponse = await ListDeliveryInsuranceLedgerAsyncWithHttpInfo(settle, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Futures insurance balance history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;InsuranceRecord&gt;)</returns>
        public async Task<ApiResponse<List<InsuranceRecord>>> ListDeliveryInsuranceLedgerAsyncWithHttpInfo (string settle, int? limit = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryInsuranceLedger");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InsuranceRecord>>("/delivery/{settle}/insurance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryInsuranceLedger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query futures account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>FuturesAccount</returns>
        public FuturesAccount ListDeliveryAccounts (string settle)
        {
             ApiResponse<FuturesAccount> localVarResponse = ListDeliveryAccountsWithHttpInfo(settle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query futures account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>ApiResponse of FuturesAccount</returns>
        public ApiResponse<FuturesAccount> ListDeliveryAccountsWithHttpInfo (string settle)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryAccounts");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<FuturesAccount>("/delivery/{settle}/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query futures account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of FuturesAccount</returns>
        public async Task<FuturesAccount> ListDeliveryAccountsAsync (string settle)
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesAccount> localVarResponse = await ListDeliveryAccountsAsyncWithHttpInfo(settle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query futures account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of ApiResponse (FuturesAccount)</returns>
        public async Task<ApiResponse<FuturesAccount>> ListDeliveryAccountsAsyncWithHttpInfo (string settle)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryAccounts");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FuturesAccount>("/delivery/{settle}/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query account book 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>List&lt;FuturesAccountBook&gt;</returns>
        public List<FuturesAccountBook> ListDeliveryAccountBook (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
             ApiResponse<List<FuturesAccountBook>> localVarResponse = ListDeliveryAccountBookWithHttpInfo(settle, limit, from, to, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query account book 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesAccountBook&gt;</returns>
        public ApiResponse<List<FuturesAccountBook>> ListDeliveryAccountBookWithHttpInfo (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryAccountBook");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesAccountBook>>("/delivery/{settle}/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query account book 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>Task of List&lt;FuturesAccountBook&gt;</returns>
        public async Task<List<FuturesAccountBook>> ListDeliveryAccountBookAsync (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesAccountBook>> localVarResponse = await ListDeliveryAccountBookAsyncWithHttpInfo(settle, limit, from, to, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query account book 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="from">Start timestamp  Specify start time, time format is Unix timestamp. If not specified, it defaults to (the data start time of the time range actually returned by to and limit) (optional)</param>
        /// <param name="to">Termination Timestamp  Specify the end time. If not specified, it defaults to the current time, and the time format is a Unix timestamp (optional)</param>
        /// <param name="type">Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesAccountBook&gt;)</returns>
        public async Task<ApiResponse<List<FuturesAccountBook>>> ListDeliveryAccountBookAsyncWithHttpInfo (string settle, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string type = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryAccountBook");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesAccountBook>>("/delivery/{settle}/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all positions of a user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>List&lt;Position&gt;</returns>
        public List<Position> ListDeliveryPositions (string settle)
        {
             ApiResponse<List<Position>> localVarResponse = ListDeliveryPositionsWithHttpInfo(settle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all positions of a user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        public ApiResponse<List<Position>> ListDeliveryPositionsWithHttpInfo (string settle)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryPositions");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Position>>("/delivery/{settle}/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all positions of a user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        public async Task<List<Position>> ListDeliveryPositionsAsync (string settle)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Position>> localVarResponse = await ListDeliveryPositionsAsyncWithHttpInfo(settle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all positions of a user 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        public async Task<ApiResponse<List<Position>>> ListDeliveryPositionsAsyncWithHttpInfo (string settle)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryPositions");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Position>>("/delivery/{settle}/positions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get single position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Position</returns>
        public Position GetDeliveryPosition (string settle, string contract)
        {
             ApiResponse<Position> localVarResponse = GetDeliveryPositionWithHttpInfo(settle, contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse<Position> GetDeliveryPositionWithHttpInfo (string settle, string contract)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetDeliveryPosition");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->GetDeliveryPosition");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Position>("/delivery/{settle}/positions/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get single position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of Position</returns>
        public async Task<Position> GetDeliveryPositionAsync (string settle, string contract)
        {
             Io.Gate.GateApi.Client.ApiResponse<Position> localVarResponse = await GetDeliveryPositionAsyncWithHttpInfo(settle, contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single position 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async Task<ApiResponse<Position>> GetDeliveryPositionAsyncWithHttpInfo (string settle, string contract)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetDeliveryPosition");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->GetDeliveryPosition");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Position>("/delivery/{settle}/positions/{contract}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update position margin 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>Position</returns>
        public Position UpdateDeliveryPositionMargin (string settle, string contract, string change)
        {
             ApiResponse<Position> localVarResponse = UpdateDeliveryPositionMarginWithHttpInfo(settle, contract, change);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update position margin 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse<Position> UpdateDeliveryPositionMarginWithHttpInfo (string settle, string contract, string change)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->UpdateDeliveryPositionMargin");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->UpdateDeliveryPositionMargin");

            // verify the required parameter 'change' is set
            if (change == null)
                throw new ApiException(400, "Missing required parameter 'change' when calling DeliveryApi->UpdateDeliveryPositionMargin");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "change", change));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Position>("/delivery/{settle}/positions/{contract}/margin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeliveryPositionMargin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update position margin 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>Task of Position</returns>
        public async Task<Position> UpdateDeliveryPositionMarginAsync (string settle, string contract, string change)
        {
             Io.Gate.GateApi.Client.ApiResponse<Position> localVarResponse = await UpdateDeliveryPositionMarginAsyncWithHttpInfo(settle, contract, change);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update position margin 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="change">Margin change amount, positive number increases, negative number </param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async Task<ApiResponse<Position>> UpdateDeliveryPositionMarginAsyncWithHttpInfo (string settle, string contract, string change)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->UpdateDeliveryPositionMargin");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->UpdateDeliveryPositionMargin");

            // verify the required parameter 'change' is set
            if (change == null)
                throw new ApiException(400, "Missing required parameter 'change' when calling DeliveryApi->UpdateDeliveryPositionMargin");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "change", change));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Position>("/delivery/{settle}/positions/{contract}/margin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeliveryPositionMargin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update position leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>Position</returns>
        public Position UpdateDeliveryPositionLeverage (string settle, string contract, string leverage)
        {
             ApiResponse<Position> localVarResponse = UpdateDeliveryPositionLeverageWithHttpInfo(settle, contract, leverage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update position leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse<Position> UpdateDeliveryPositionLeverageWithHttpInfo (string settle, string contract, string leverage)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->UpdateDeliveryPositionLeverage");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->UpdateDeliveryPositionLeverage");

            // verify the required parameter 'leverage' is set
            if (leverage == null)
                throw new ApiException(400, "Missing required parameter 'leverage' when calling DeliveryApi->UpdateDeliveryPositionLeverage");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "leverage", leverage));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Position>("/delivery/{settle}/positions/{contract}/leverage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeliveryPositionLeverage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update position leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>Task of Position</returns>
        public async Task<Position> UpdateDeliveryPositionLeverageAsync (string settle, string contract, string leverage)
        {
             Io.Gate.GateApi.Client.ApiResponse<Position> localVarResponse = await UpdateDeliveryPositionLeverageAsyncWithHttpInfo(settle, contract, leverage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update position leverage 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="leverage">New position leverage</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async Task<ApiResponse<Position>> UpdateDeliveryPositionLeverageAsyncWithHttpInfo (string settle, string contract, string leverage)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->UpdateDeliveryPositionLeverage");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->UpdateDeliveryPositionLeverage");

            // verify the required parameter 'leverage' is set
            if (leverage == null)
                throw new ApiException(400, "Missing required parameter 'leverage' when calling DeliveryApi->UpdateDeliveryPositionLeverage");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "leverage", leverage));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Position>("/delivery/{settle}/positions/{contract}/leverage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeliveryPositionLeverage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update position risk limit 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>Position</returns>
        public Position UpdateDeliveryPositionRiskLimit (string settle, string contract, string riskLimit)
        {
             ApiResponse<Position> localVarResponse = UpdateDeliveryPositionRiskLimitWithHttpInfo(settle, contract, riskLimit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update position risk limit 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse<Position> UpdateDeliveryPositionRiskLimitWithHttpInfo (string settle, string contract, string riskLimit)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->UpdateDeliveryPositionRiskLimit");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->UpdateDeliveryPositionRiskLimit");

            // verify the required parameter 'riskLimit' is set
            if (riskLimit == null)
                throw new ApiException(400, "Missing required parameter 'riskLimit' when calling DeliveryApi->UpdateDeliveryPositionRiskLimit");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "risk_limit", riskLimit));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Position>("/delivery/{settle}/positions/{contract}/risk_limit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeliveryPositionRiskLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update position risk limit 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>Task of Position</returns>
        public async Task<Position> UpdateDeliveryPositionRiskLimitAsync (string settle, string contract, string riskLimit)
        {
             Io.Gate.GateApi.Client.ApiResponse<Position> localVarResponse = await UpdateDeliveryPositionRiskLimitAsyncWithHttpInfo(settle, contract, riskLimit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update position risk limit 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="riskLimit">New position risk limit</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async Task<ApiResponse<Position>> UpdateDeliveryPositionRiskLimitAsyncWithHttpInfo (string settle, string contract, string riskLimit)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->UpdateDeliveryPositionRiskLimit");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->UpdateDeliveryPositionRiskLimit");

            // verify the required parameter 'riskLimit' is set
            if (riskLimit == null)
                throw new ApiException(400, "Missing required parameter 'riskLimit' when calling DeliveryApi->UpdateDeliveryPositionRiskLimit");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract", ClientUtils.ParameterToString(contract)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "risk_limit", riskLimit));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Position>("/delivery/{settle}/positions/{contract}/risk_limit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeliveryPositionRiskLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List futures orders Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>List&lt;FuturesOrder&gt;</returns>
        public List<FuturesOrder> ListDeliveryOrders (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
             ApiResponse<List<FuturesOrder>> localVarResponse = ListDeliveryOrdersWithHttpInfo(settle, status, contract, limit, offset, lastId, countTotal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List futures orders Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesOrder&gt;</returns>
        public ApiResponse<List<FuturesOrder>> ListDeliveryOrdersWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling DeliveryApi->ListDeliveryOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (countTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "count_total", countTotal));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesOrder>>("/delivery/{settle}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List futures orders Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesOrder&gt;</returns>
        public async Task<List<FuturesOrder>> ListDeliveryOrdersAsync (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesOrder>> localVarResponse = await ListDeliveryOrdersAsyncWithHttpInfo(settle, status, contract, limit, offset, lastId, countTotal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List futures orders Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesOrder&gt;)</returns>
        public async Task<ApiResponse<List<FuturesOrder>>> ListDeliveryOrdersAsyncWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling DeliveryApi->ListDeliveryOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (countTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "count_total", countTotal));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesOrder>>("/delivery/{settle}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a futures order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>FuturesOrder</returns>
        public FuturesOrder CreateDeliveryOrder (string settle, FuturesOrder futuresOrder)
        {
             ApiResponse<FuturesOrder> localVarResponse = CreateDeliveryOrderWithHttpInfo(settle, futuresOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a futures order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>ApiResponse of FuturesOrder</returns>
        public ApiResponse<FuturesOrder> CreateDeliveryOrderWithHttpInfo (string settle, FuturesOrder futuresOrder)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CreateDeliveryOrder");

            // verify the required parameter 'futuresOrder' is set
            if (futuresOrder == null)
                throw new ApiException(400, "Missing required parameter 'futuresOrder' when calling DeliveryApi->CreateDeliveryOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.Data = futuresOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<FuturesOrder>("/delivery/{settle}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a futures order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>Task of FuturesOrder</returns>
        public async Task<FuturesOrder> CreateDeliveryOrderAsync (string settle, FuturesOrder futuresOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesOrder> localVarResponse = await CreateDeliveryOrderAsyncWithHttpInfo(settle, futuresOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a futures order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresOrder"></param>
        /// <returns>Task of ApiResponse (FuturesOrder)</returns>
        public async Task<ApiResponse<FuturesOrder>> CreateDeliveryOrderAsyncWithHttpInfo (string settle, FuturesOrder futuresOrder)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CreateDeliveryOrder");

            // verify the required parameter 'futuresOrder' is set
            if (futuresOrder == null)
                throw new ApiException(400, "Missing required parameter 'futuresOrder' when calling DeliveryApi->CreateDeliveryOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.Data = futuresOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FuturesOrder>("/delivery/{settle}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>List&lt;FuturesOrder&gt;</returns>
        public List<FuturesOrder> CancelDeliveryOrders (string settle, string contract, string side = default(string))
        {
             ApiResponse<List<FuturesOrder>> localVarResponse = CancelDeliveryOrdersWithHttpInfo(settle, contract, side);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;FuturesOrder&gt;</returns>
        public ApiResponse<List<FuturesOrder>> CancelDeliveryOrdersWithHttpInfo (string settle, string contract, string side = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelDeliveryOrders");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->CancelDeliveryOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<FuturesOrder>>("/delivery/{settle}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDeliveryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of List&lt;FuturesOrder&gt;</returns>
        public async Task<List<FuturesOrder>> CancelDeliveryOrdersAsync (string settle, string contract, string side = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesOrder>> localVarResponse = await CancelDeliveryOrdersAsyncWithHttpInfo(settle, contract, side);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders matched Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesOrder&gt;)</returns>
        public async Task<ApiResponse<List<FuturesOrder>>> CancelDeliveryOrdersAsyncWithHttpInfo (string settle, string contract, string side = default(string))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelDeliveryOrders");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->CancelDeliveryOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<FuturesOrder>>("/delivery/{settle}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDeliveryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesOrder</returns>
        public FuturesOrder GetDeliveryOrder (string settle, string orderId)
        {
             ApiResponse<FuturesOrder> localVarResponse = GetDeliveryOrderWithHttpInfo(settle, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesOrder</returns>
        public ApiResponse<FuturesOrder> GetDeliveryOrderWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->GetDeliveryOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<FuturesOrder>("/delivery/{settle}/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesOrder</returns>
        public async Task<FuturesOrder> GetDeliveryOrderAsync (string settle, string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesOrder> localVarResponse = await GetDeliveryOrderAsyncWithHttpInfo(settle, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single order Zero-filled order cannot be retrieved 10 minutes after order cancellation
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesOrder)</returns>
        public async Task<ApiResponse<FuturesOrder>> GetDeliveryOrderAsyncWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->GetDeliveryOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FuturesOrder>("/delivery/{settle}/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesOrder</returns>
        public FuturesOrder CancelDeliveryOrder (string settle, string orderId)
        {
             ApiResponse<FuturesOrder> localVarResponse = CancelDeliveryOrderWithHttpInfo(settle, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesOrder</returns>
        public ApiResponse<FuturesOrder> CancelDeliveryOrderWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->CancelDeliveryOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<FuturesOrder>("/delivery/{settle}/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesOrder</returns>
        public async Task<FuturesOrder> CancelDeliveryOrderAsync (string settle, string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesOrder> localVarResponse = await CancelDeliveryOrderAsyncWithHttpInfo(settle, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a single order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesOrder)</returns>
        public async Task<ApiResponse<FuturesOrder>> CancelDeliveryOrderAsyncWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->CancelDeliveryOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<FuturesOrder>("/delivery/{settle}/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>List&lt;MyFuturesTrade&gt;</returns>
        public List<MyFuturesTrade> GetMyDeliveryTrades (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
             ApiResponse<List<MyFuturesTrade>> localVarResponse = GetMyDeliveryTradesWithHttpInfo(settle, contract, order, limit, offset, lastId, countTotal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;MyFuturesTrade&gt;</returns>
        public ApiResponse<List<MyFuturesTrade>> GetMyDeliveryTradesWithHttpInfo (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetMyDeliveryTrades");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (countTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "count_total", countTotal));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MyFuturesTrade>>("/delivery/{settle}/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyDeliveryTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of List&lt;MyFuturesTrade&gt;</returns>
        public async Task<List<MyFuturesTrade>> GetMyDeliveryTradesAsync (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MyFuturesTrade>> localVarResponse = await GetMyDeliveryTradesAsyncWithHttpInfo(settle, contract, order, limit, offset, lastId, countTotal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List personal trading history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="order">Futures order ID, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="countTotal">Whether to return total number matched. Default to 0(no return) (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;MyFuturesTrade&gt;)</returns>
        public async Task<ApiResponse<List<MyFuturesTrade>>> GetMyDeliveryTradesAsyncWithHttpInfo (string settle, string contract = default(string), long? order = default(long?), int? limit = default(int?), int? offset = default(int?), string lastId = default(string), int? countTotal = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetMyDeliveryTrades");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (countTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "count_total", countTotal));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MyFuturesTrade>>("/delivery/{settle}/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyDeliveryTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List position close history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;PositionClose&gt;</returns>
        public List<PositionClose> ListDeliveryPositionClose (string settle, string contract = default(string), int? limit = default(int?))
        {
             ApiResponse<List<PositionClose>> localVarResponse = ListDeliveryPositionCloseWithHttpInfo(settle, contract, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List position close history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;PositionClose&gt;</returns>
        public ApiResponse<List<PositionClose>> ListDeliveryPositionCloseWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryPositionClose");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PositionClose>>("/delivery/{settle}/position_close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryPositionClose", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List position close history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;PositionClose&gt;</returns>
        public async Task<List<PositionClose>> ListDeliveryPositionCloseAsync (string settle, string contract = default(string), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<PositionClose>> localVarResponse = await ListDeliveryPositionCloseAsyncWithHttpInfo(settle, contract, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List position close history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;PositionClose&gt;)</returns>
        public async Task<ApiResponse<List<PositionClose>>> ListDeliveryPositionCloseAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryPositionClose");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PositionClose>>("/delivery/{settle}/position_close", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryPositionClose", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List liquidation history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>List&lt;FuturesLiquidate&gt;</returns>
        public List<FuturesLiquidate> ListDeliveryLiquidates (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
             ApiResponse<List<FuturesLiquidate>> localVarResponse = ListDeliveryLiquidatesWithHttpInfo(settle, contract, limit, at);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List liquidation history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesLiquidate&gt;</returns>
        public ApiResponse<List<FuturesLiquidate>> ListDeliveryLiquidatesWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryLiquidates");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "at", at));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesLiquidate>>("/delivery/{settle}/liquidates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryLiquidates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List liquidation history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesLiquidate&gt;</returns>
        public async Task<List<FuturesLiquidate>> ListDeliveryLiquidatesAsync (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesLiquidate>> localVarResponse = await ListDeliveryLiquidatesAsyncWithHttpInfo(settle, contract, limit, at);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List liquidation history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a liquidation timestamp (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesLiquidate&gt;)</returns>
        public async Task<ApiResponse<List<FuturesLiquidate>>> ListDeliveryLiquidatesAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryLiquidates");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "at", at));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesLiquidate>>("/delivery/{settle}/liquidates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryLiquidates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>List&lt;DeliverySettlement&gt;</returns>
        public List<DeliverySettlement> ListDeliverySettlements (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
             ApiResponse<List<DeliverySettlement>> localVarResponse = ListDeliverySettlementsWithHttpInfo(settle, contract, limit, at);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;DeliverySettlement&gt;</returns>
        public ApiResponse<List<DeliverySettlement>> ListDeliverySettlementsWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliverySettlements");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "at", at));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeliverySettlement>>("/delivery/{settle}/settlements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliverySettlements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>Task of List&lt;DeliverySettlement&gt;</returns>
        public async Task<List<DeliverySettlement>> ListDeliverySettlementsAsync (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<DeliverySettlement>> localVarResponse = await ListDeliverySettlementsAsyncWithHttpInfo(settle, contract, limit, at);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List settlement history 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="at">Specify a settlement timestamp (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;DeliverySettlement&gt;)</returns>
        public async Task<ApiResponse<List<DeliverySettlement>>> ListDeliverySettlementsAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? at = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliverySettlements");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "at", at));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeliverySettlement>>("/delivery/{settle}/settlements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliverySettlements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List risk limit tiers When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;FuturesLimitRiskTiers&gt;</returns>
        public List<FuturesLimitRiskTiers> ListDeliveryRiskLimitTiers (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<FuturesLimitRiskTiers>> localVarResponse = ListDeliveryRiskLimitTiersWithHttpInfo(settle, contract, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List risk limit tiers When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesLimitRiskTiers&gt;</returns>
        public ApiResponse<List<FuturesLimitRiskTiers>> ListDeliveryRiskLimitTiersWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryRiskLimitTiers");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesLimitRiskTiers>>("/delivery/{settle}/risk_limit_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryRiskLimitTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List risk limit tiers When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesLimitRiskTiers&gt;</returns>
        public async Task<List<FuturesLimitRiskTiers>> ListDeliveryRiskLimitTiersAsync (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesLimitRiskTiers>> localVarResponse = await ListDeliveryRiskLimitTiersAsyncWithHttpInfo(settle, contract, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List risk limit tiers When the &#39;contract&#39; parameter is not passed, the default is to query the risk limits for the top 100 markets.&#39;Limit&#39; and &#39;offset&#39; correspond to pagination queries at the market level, not to the length of the returned array. This only takes effect when the &#39;contract&#39; parameter is empty.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesLimitRiskTiers&gt;)</returns>
        public async Task<ApiResponse<List<FuturesLimitRiskTiers>>> ListDeliveryRiskLimitTiersAsyncWithHttpInfo (string settle, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListDeliveryRiskLimitTiers");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesLimitRiskTiers>>("/delivery/{settle}/risk_limit_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryRiskLimitTiers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        public List<FuturesPriceTriggeredOrder> ListPriceTriggeredDeliveryOrders (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<FuturesPriceTriggeredOrder>> localVarResponse = ListPriceTriggeredDeliveryOrdersWithHttpInfo(settle, status, contract, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        public ApiResponse<List<FuturesPriceTriggeredOrder>> ListPriceTriggeredDeliveryOrdersWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListPriceTriggeredDeliveryOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling DeliveryApi->ListPriceTriggeredDeliveryOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FuturesPriceTriggeredOrder>>("/delivery/{settle}/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPriceTriggeredDeliveryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        public async Task<List<FuturesPriceTriggeredOrder>> ListPriceTriggeredDeliveryOrdersAsync (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesPriceTriggeredOrder>> localVarResponse = await ListPriceTriggeredDeliveryOrdersAsyncWithHttpInfo(settle, status, contract, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="contract">Futures contract, return related data only if specified (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesPriceTriggeredOrder&gt;)</returns>
        public async Task<ApiResponse<List<FuturesPriceTriggeredOrder>>> ListPriceTriggeredDeliveryOrdersAsyncWithHttpInfo (string settle, string status, string contract = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->ListPriceTriggeredDeliveryOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling DeliveryApi->ListPriceTriggeredDeliveryOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (contract != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FuturesPriceTriggeredOrder>>("/delivery/{settle}/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPriceTriggeredDeliveryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>TriggerOrderResponse</returns>
        public TriggerOrderResponse CreatePriceTriggeredDeliveryOrder (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder)
        {
             ApiResponse<TriggerOrderResponse> localVarResponse = CreatePriceTriggeredDeliveryOrderWithHttpInfo(settle, futuresPriceTriggeredOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>ApiResponse of TriggerOrderResponse</returns>
        public ApiResponse<TriggerOrderResponse> CreatePriceTriggeredDeliveryOrderWithHttpInfo (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CreatePriceTriggeredDeliveryOrder");

            // verify the required parameter 'futuresPriceTriggeredOrder' is set
            if (futuresPriceTriggeredOrder == null)
                throw new ApiException(400, "Missing required parameter 'futuresPriceTriggeredOrder' when calling DeliveryApi->CreatePriceTriggeredDeliveryOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.Data = futuresPriceTriggeredOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TriggerOrderResponse>("/delivery/{settle}/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePriceTriggeredDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>Task of TriggerOrderResponse</returns>
        public async Task<TriggerOrderResponse> CreatePriceTriggeredDeliveryOrderAsync (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<TriggerOrderResponse> localVarResponse = await CreatePriceTriggeredDeliveryOrderAsyncWithHttpInfo(settle, futuresPriceTriggeredOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="futuresPriceTriggeredOrder"></param>
        /// <returns>Task of ApiResponse (TriggerOrderResponse)</returns>
        public async Task<ApiResponse<TriggerOrderResponse>> CreatePriceTriggeredDeliveryOrderAsyncWithHttpInfo (string settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CreatePriceTriggeredDeliveryOrder");

            // verify the required parameter 'futuresPriceTriggeredOrder' is set
            if (futuresPriceTriggeredOrder == null)
                throw new ApiException(400, "Missing required parameter 'futuresPriceTriggeredOrder' when calling DeliveryApi->CreatePriceTriggeredDeliveryOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.Data = futuresPriceTriggeredOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TriggerOrderResponse>("/delivery/{settle}/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePriceTriggeredDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        public List<FuturesPriceTriggeredOrder> CancelPriceTriggeredDeliveryOrderList (string settle, string contract)
        {
             ApiResponse<List<FuturesPriceTriggeredOrder>> localVarResponse = CancelPriceTriggeredDeliveryOrderListWithHttpInfo(settle, contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>ApiResponse of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        public ApiResponse<List<FuturesPriceTriggeredOrder>> CancelPriceTriggeredDeliveryOrderListWithHttpInfo (string settle, string contract)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrderList");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrderList");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<FuturesPriceTriggeredOrder>>("/delivery/{settle}/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPriceTriggeredDeliveryOrderList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of List&lt;FuturesPriceTriggeredOrder&gt;</returns>
        public async Task<List<FuturesPriceTriggeredOrder>> CancelPriceTriggeredDeliveryOrderListAsync (string settle, string contract)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FuturesPriceTriggeredOrder>> localVarResponse = await CancelPriceTriggeredDeliveryOrderListAsyncWithHttpInfo(settle, contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="contract">Futures contract</param>
        /// <returns>Task of ApiResponse (List&lt;FuturesPriceTriggeredOrder&gt;)</returns>
        public async Task<ApiResponse<List<FuturesPriceTriggeredOrder>>> CancelPriceTriggeredDeliveryOrderListAsyncWithHttpInfo (string settle, string contract)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrderList");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrderList");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "contract", contract));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<FuturesPriceTriggeredOrder>>("/delivery/{settle}/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPriceTriggeredDeliveryOrderList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesPriceTriggeredOrder</returns>
        public FuturesPriceTriggeredOrder GetPriceTriggeredDeliveryOrder (string settle, string orderId)
        {
             ApiResponse<FuturesPriceTriggeredOrder> localVarResponse = GetPriceTriggeredDeliveryOrderWithHttpInfo(settle, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesPriceTriggeredOrder</returns>
        public ApiResponse<FuturesPriceTriggeredOrder> GetPriceTriggeredDeliveryOrderWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetPriceTriggeredDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->GetPriceTriggeredDeliveryOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<FuturesPriceTriggeredOrder>("/delivery/{settle}/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceTriggeredDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesPriceTriggeredOrder</returns>
        public async Task<FuturesPriceTriggeredOrder> GetPriceTriggeredDeliveryOrderAsync (string settle, string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesPriceTriggeredOrder> localVarResponse = await GetPriceTriggeredDeliveryOrderAsyncWithHttpInfo(settle, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesPriceTriggeredOrder)</returns>
        public async Task<ApiResponse<FuturesPriceTriggeredOrder>> GetPriceTriggeredDeliveryOrderAsyncWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->GetPriceTriggeredDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->GetPriceTriggeredDeliveryOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FuturesPriceTriggeredOrder>("/delivery/{settle}/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceTriggeredDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>FuturesPriceTriggeredOrder</returns>
        public FuturesPriceTriggeredOrder CancelPriceTriggeredDeliveryOrder (string settle, string orderId)
        {
             ApiResponse<FuturesPriceTriggeredOrder> localVarResponse = CancelPriceTriggeredDeliveryOrderWithHttpInfo(settle, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of FuturesPriceTriggeredOrder</returns>
        public ApiResponse<FuturesPriceTriggeredOrder> CancelPriceTriggeredDeliveryOrderWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<FuturesPriceTriggeredOrder>("/delivery/{settle}/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPriceTriggeredDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of FuturesPriceTriggeredOrder</returns>
        public async Task<FuturesPriceTriggeredOrder> CancelPriceTriggeredDeliveryOrderAsync (string settle, string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<FuturesPriceTriggeredOrder> localVarResponse = await CancelPriceTriggeredDeliveryOrderAsyncWithHttpInfo(settle, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settle">Settle currency</param>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (FuturesPriceTriggeredOrder)</returns>
        public async Task<ApiResponse<FuturesPriceTriggeredOrder>> CancelPriceTriggeredDeliveryOrderAsyncWithHttpInfo (string settle, string orderId)
        {
            // verify the required parameter 'settle' is set
            if (settle == null)
                throw new ApiException(400, "Missing required parameter 'settle' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DeliveryApi->CancelPriceTriggeredDeliveryOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("settle", ClientUtils.ParameterToString(settle)); // path parameter
            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<FuturesPriceTriggeredOrder>("/delivery/{settle}/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPriceTriggeredDeliveryOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
