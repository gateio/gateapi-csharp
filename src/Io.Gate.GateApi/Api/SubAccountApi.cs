/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List sub-accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>List&lt;SubAccount&gt;</returns>
        List<SubAccount> ListSubAccounts (string type = default(string));

        /// <summary>
        /// List sub-accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccount&gt;</returns>
        ApiResponse<List<SubAccount>> ListSubAccountsWithHttpInfo (string type = default(string));
        /// <summary>
        /// Create a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>SubAccount</returns>
        SubAccount CreateSubAccounts (SubAccount subAccount);

        /// <summary>
        /// Create a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>ApiResponse of SubAccount</returns>
        ApiResponse<SubAccount> CreateSubAccountsWithHttpInfo (SubAccount subAccount);
        /// <summary>
        /// Get the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>SubAccount</returns>
        SubAccount GetSubAccount (long userId);

        /// <summary>
        /// Get the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>ApiResponse of SubAccount</returns>
        ApiResponse<SubAccount> GetSubAccountWithHttpInfo (long userId);
        /// <summary>
        /// List all API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>List&lt;SubAccountKey&gt;</returns>
        List<SubAccountKey> ListSubAccountKeys (int userId);

        /// <summary>
        /// List all API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>ApiResponse of List&lt;SubAccountKey&gt;</returns>
        ApiResponse<List<SubAccountKey>> ListSubAccountKeysWithHttpInfo (int userId);
        /// <summary>
        /// Create API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>List&lt;SubAccountKey&gt;</returns>
        List<SubAccountKey> CreateSubAccountKeys (long userId, SubAccountKey subAccountKey);

        /// <summary>
        /// Create API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>ApiResponse of List&lt;SubAccountKey&gt;</returns>
        ApiResponse<List<SubAccountKey>> CreateSubAccountKeysWithHttpInfo (long userId, SubAccountKey subAccountKey);
        /// <summary>
        /// Get the API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>SubAccountKey</returns>
        SubAccountKey GetSubAccountKey (int userId, string key);

        /// <summary>
        /// Get the API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>ApiResponse of SubAccountKey</returns>
        ApiResponse<SubAccountKey> GetSubAccountKeyWithHttpInfo (int userId, string key);
        /// <summary>
        /// Update API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns></returns>
        void UpdateSubAccountKeys (int userId, string key, SubAccountKey subAccountKey);

        /// <summary>
        /// Update API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSubAccountKeysWithHttpInfo (int userId, string key, SubAccountKey subAccountKey);
        /// <summary>
        /// Delete API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns></returns>
        void DeleteSubAccountKeys (int userId, string key);

        /// <summary>
        /// Delete API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubAccountKeysWithHttpInfo (int userId, string key);
        /// <summary>
        /// Lock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns></returns>
        void LockSubAccount (long userId);

        /// <summary>
        /// Lock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LockSubAccountWithHttpInfo (long userId);
        /// <summary>
        /// Unlock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns></returns>
        void UnlockSubAccount (long userId);

        /// <summary>
        /// Unlock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlockSubAccountWithHttpInfo (long userId);
        /// <summary>
        /// Get sub-account mode
        /// </summary>
        /// <remarks>
        /// Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SubUserMode&gt;</returns>
        List<SubUserMode> ListUnifiedMode ();

        /// <summary>
        /// Get sub-account mode
        /// </summary>
        /// <remarks>
        /// Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SubUserMode&gt;</returns>
        ApiResponse<List<SubUserMode>> ListUnifiedModeWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List sub-accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>Task of List&lt;SubAccount&gt;</returns>
        Task<List<SubAccount>> ListSubAccountsAsync (string type = default(string));

        /// <summary>
        /// List sub-accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccount&gt;)</returns>
        Task<ApiResponse<List<SubAccount>>> ListSubAccountsAsyncWithHttpInfo (string type = default(string));
        /// <summary>
        /// Create a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>Task of SubAccount</returns>
        Task<SubAccount> CreateSubAccountsAsync (SubAccount subAccount);

        /// <summary>
        /// Create a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>Task of ApiResponse (SubAccount)</returns>
        Task<ApiResponse<SubAccount>> CreateSubAccountsAsyncWithHttpInfo (SubAccount subAccount);
        /// <summary>
        /// Get the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of SubAccount</returns>
        Task<SubAccount> GetSubAccountAsync (long userId);

        /// <summary>
        /// Get the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of ApiResponse (SubAccount)</returns>
        Task<ApiResponse<SubAccount>> GetSubAccountAsyncWithHttpInfo (long userId);
        /// <summary>
        /// List all API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of List&lt;SubAccountKey&gt;</returns>
        Task<List<SubAccountKey>> ListSubAccountKeysAsync (int userId);

        /// <summary>
        /// List all API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountKey&gt;)</returns>
        Task<ApiResponse<List<SubAccountKey>>> ListSubAccountKeysAsyncWithHttpInfo (int userId);
        /// <summary>
        /// Create API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of List&lt;SubAccountKey&gt;</returns>
        Task<List<SubAccountKey>> CreateSubAccountKeysAsync (long userId, SubAccountKey subAccountKey);

        /// <summary>
        /// Create API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountKey&gt;)</returns>
        Task<ApiResponse<List<SubAccountKey>>> CreateSubAccountKeysAsyncWithHttpInfo (long userId, SubAccountKey subAccountKey);
        /// <summary>
        /// Get the API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of SubAccountKey</returns>
        Task<SubAccountKey> GetSubAccountKeyAsync (int userId, string key);

        /// <summary>
        /// Get the API Key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of ApiResponse (SubAccountKey)</returns>
        Task<ApiResponse<SubAccountKey>> GetSubAccountKeyAsyncWithHttpInfo (int userId, string key);
        /// <summary>
        /// Update API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of void</returns>
        Task UpdateSubAccountKeysAsync (int userId, string key, SubAccountKey subAccountKey);

        /// <summary>
        /// Update API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> UpdateSubAccountKeysAsyncWithHttpInfo (int userId, string key, SubAccountKey subAccountKey);
        /// <summary>
        /// Delete API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of void</returns>
        Task DeleteSubAccountKeysAsync (int userId, string key);

        /// <summary>
        /// Delete API key of the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSubAccountKeysAsyncWithHttpInfo (int userId, string key);
        /// <summary>
        /// Lock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of void</returns>
        Task LockSubAccountAsync (long userId);

        /// <summary>
        /// Lock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> LockSubAccountAsyncWithHttpInfo (long userId);
        /// <summary>
        /// Unlock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of void</returns>
        Task UnlockSubAccountAsync (long userId);

        /// <summary>
        /// Unlock the sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> UnlockSubAccountAsyncWithHttpInfo (long userId);
        /// <summary>
        /// Get sub-account mode
        /// </summary>
        /// <remarks>
        /// Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SubUserMode&gt;</returns>
        Task<List<SubUserMode>> ListUnifiedModeAsync ();

        /// <summary>
        /// Get sub-account mode
        /// </summary>
        /// <remarks>
        /// Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SubUserMode&gt;)</returns>
        Task<ApiResponse<List<SubUserMode>>> ListUnifiedModeAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubAccountApi : ISubAccountApiSync, ISubAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubAccountApi : ISubAccountApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubAccountApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubAccountApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubAccountApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubAccountApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List sub-accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>List&lt;SubAccount&gt;</returns>
        public List<SubAccount> ListSubAccounts (string type = default(string))
        {
             ApiResponse<List<SubAccount>> localVarResponse = ListSubAccountsWithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List sub-accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccount&gt;</returns>
        public ApiResponse<List<SubAccount>> ListSubAccountsWithHttpInfo (string type = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccount>>("/sub_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sub-accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>Task of List&lt;SubAccount&gt;</returns>
        public async Task<List<SubAccount>> ListSubAccountsAsync (string type = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccount>> localVarResponse = await ListSubAccountsAsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List sub-accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">&#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccount&gt;)</returns>
        public async Task<ApiResponse<List<SubAccount>>> ListSubAccountsAsyncWithHttpInfo (string type = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccount>>("/sub_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>SubAccount</returns>
        public SubAccount CreateSubAccounts (SubAccount subAccount)
        {
             ApiResponse<SubAccount> localVarResponse = CreateSubAccountsWithHttpInfo(subAccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>ApiResponse of SubAccount</returns>
        public ApiResponse<SubAccount> CreateSubAccountsWithHttpInfo (SubAccount subAccount)
        {
            // verify the required parameter 'subAccount' is set
            if (subAccount == null)
                throw new ApiException(400, "Missing required parameter 'subAccount' when calling SubAccountApi->CreateSubAccounts");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subAccount;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubAccount>("/sub_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>Task of SubAccount</returns>
        public async Task<SubAccount> CreateSubAccountsAsync (SubAccount subAccount)
        {
             Io.Gate.GateApi.Client.ApiResponse<SubAccount> localVarResponse = await CreateSubAccountsAsyncWithHttpInfo(subAccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccount"></param>
        /// <returns>Task of ApiResponse (SubAccount)</returns>
        public async Task<ApiResponse<SubAccount>> CreateSubAccountsAsyncWithHttpInfo (SubAccount subAccount)
        {
            // verify the required parameter 'subAccount' is set
            if (subAccount == null)
                throw new ApiException(400, "Missing required parameter 'subAccount' when calling SubAccountApi->CreateSubAccounts");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = subAccount;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubAccount>("/sub_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>SubAccount</returns>
        public SubAccount GetSubAccount (long userId)
        {
             ApiResponse<SubAccount> localVarResponse = GetSubAccountWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>ApiResponse of SubAccount</returns>
        public ApiResponse<SubAccount> GetSubAccountWithHttpInfo (long userId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubAccount>("/sub_accounts/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of SubAccount</returns>
        public async Task<SubAccount> GetSubAccountAsync (long userId)
        {
             Io.Gate.GateApi.Client.ApiResponse<SubAccount> localVarResponse = await GetSubAccountAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of ApiResponse (SubAccount)</returns>
        public async Task<ApiResponse<SubAccount>> GetSubAccountAsyncWithHttpInfo (long userId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubAccount>("/sub_accounts/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>List&lt;SubAccountKey&gt;</returns>
        public List<SubAccountKey> ListSubAccountKeys (int userId)
        {
             ApiResponse<List<SubAccountKey>> localVarResponse = ListSubAccountKeysWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>ApiResponse of List&lt;SubAccountKey&gt;</returns>
        public ApiResponse<List<SubAccountKey>> ListSubAccountKeysWithHttpInfo (int userId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountKey>>("/sub_accounts/{user_id}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of List&lt;SubAccountKey&gt;</returns>
        public async Task<List<SubAccountKey>> ListSubAccountKeysAsync (int userId)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountKey>> localVarResponse = await ListSubAccountKeysAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountKey&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountKey>>> ListSubAccountKeysAsyncWithHttpInfo (int userId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountKey>>("/sub_accounts/{user_id}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>List&lt;SubAccountKey&gt;</returns>
        public List<SubAccountKey> CreateSubAccountKeys (long userId, SubAccountKey subAccountKey)
        {
             ApiResponse<List<SubAccountKey>> localVarResponse = CreateSubAccountKeysWithHttpInfo(userId, subAccountKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>ApiResponse of List&lt;SubAccountKey&gt;</returns>
        public ApiResponse<List<SubAccountKey>> CreateSubAccountKeysWithHttpInfo (long userId, SubAccountKey subAccountKey)
        {
            // verify the required parameter 'subAccountKey' is set
            if (subAccountKey == null)
                throw new ApiException(400, "Missing required parameter 'subAccountKey' when calling SubAccountApi->CreateSubAccountKeys");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = subAccountKey;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SubAccountKey>>("/sub_accounts/{user_id}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of List&lt;SubAccountKey&gt;</returns>
        public async Task<List<SubAccountKey>> CreateSubAccountKeysAsync (long userId, SubAccountKey subAccountKey)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountKey>> localVarResponse = await CreateSubAccountKeysAsyncWithHttpInfo(userId, subAccountKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountKey&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountKey>>> CreateSubAccountKeysAsyncWithHttpInfo (long userId, SubAccountKey subAccountKey)
        {
            // verify the required parameter 'subAccountKey' is set
            if (subAccountKey == null)
                throw new ApiException(400, "Missing required parameter 'subAccountKey' when calling SubAccountApi->CreateSubAccountKeys");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = subAccountKey;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SubAccountKey>>("/sub_accounts/{user_id}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>SubAccountKey</returns>
        public SubAccountKey GetSubAccountKey (int userId, string key)
        {
             ApiResponse<SubAccountKey> localVarResponse = GetSubAccountKeyWithHttpInfo(userId, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>ApiResponse of SubAccountKey</returns>
        public ApiResponse<SubAccountKey> GetSubAccountKeyWithHttpInfo (int userId, string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SubAccountApi->GetSubAccountKey");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", ClientUtils.ParameterToString(key)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubAccountKey>("/sub_accounts/{user_id}/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubAccountKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of SubAccountKey</returns>
        public async Task<SubAccountKey> GetSubAccountKeyAsync (int userId, string key)
        {
             Io.Gate.GateApi.Client.ApiResponse<SubAccountKey> localVarResponse = await GetSubAccountKeyAsyncWithHttpInfo(userId, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the API Key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of ApiResponse (SubAccountKey)</returns>
        public async Task<ApiResponse<SubAccountKey>> GetSubAccountKeyAsyncWithHttpInfo (int userId, string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SubAccountApi->GetSubAccountKey");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", ClientUtils.ParameterToString(key)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubAccountKey>("/sub_accounts/{user_id}/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubAccountKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns></returns>
        public void UpdateSubAccountKeys (int userId, string key, SubAccountKey subAccountKey)
        {
             UpdateSubAccountKeysWithHttpInfo(userId, key, subAccountKey);
        }

        /// <summary>
        /// Update API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSubAccountKeysWithHttpInfo (int userId, string key, SubAccountKey subAccountKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SubAccountApi->UpdateSubAccountKeys");

            // verify the required parameter 'subAccountKey' is set
            if (subAccountKey == null)
                throw new ApiException(400, "Missing required parameter 'subAccountKey' when calling SubAccountApi->UpdateSubAccountKeys");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = subAccountKey;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/sub_accounts/{user_id}/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of void</returns>
        public async Task UpdateSubAccountKeysAsync (int userId, string key, SubAccountKey subAccountKey)
        {
             await UpdateSubAccountKeysAsyncWithHttpInfo(userId, key, subAccountKey);

        }

        /// <summary>
        /// Update API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <param name="subAccountKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> UpdateSubAccountKeysAsyncWithHttpInfo (int userId, string key, SubAccountKey subAccountKey)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SubAccountApi->UpdateSubAccountKeys");

            // verify the required parameter 'subAccountKey' is set
            if (subAccountKey == null)
                throw new ApiException(400, "Missing required parameter 'subAccountKey' when calling SubAccountApi->UpdateSubAccountKeys");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = subAccountKey;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/sub_accounts/{user_id}/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns></returns>
        public void DeleteSubAccountKeys (int userId, string key)
        {
             DeleteSubAccountKeysWithHttpInfo(userId, key);
        }

        /// <summary>
        /// Delete API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubAccountKeysWithHttpInfo (int userId, string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SubAccountApi->DeleteSubAccountKeys");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", ClientUtils.ParameterToString(key)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sub_accounts/{user_id}/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSubAccountKeysAsync (int userId, string key)
        {
             await DeleteSubAccountKeysAsyncWithHttpInfo(userId, key);

        }

        /// <summary>
        /// Delete API key of the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Sub-account user id</param>
        /// <param name="key">The API Key of the sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteSubAccountKeysAsyncWithHttpInfo (int userId, string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SubAccountApi->DeleteSubAccountKeys");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", ClientUtils.ParameterToString(key)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sub_accounts/{user_id}/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubAccountKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns></returns>
        public void LockSubAccount (long userId)
        {
             LockSubAccountWithHttpInfo(userId);
        }

        /// <summary>
        /// Lock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LockSubAccountWithHttpInfo (long userId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sub_accounts/{user_id}/lock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LockSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of void</returns>
        public async Task LockSubAccountAsync (long userId)
        {
             await LockSubAccountAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Lock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> LockSubAccountAsyncWithHttpInfo (long userId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sub_accounts/{user_id}/lock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LockSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns></returns>
        public void UnlockSubAccount (long userId)
        {
             UnlockSubAccountWithHttpInfo(userId);
        }

        /// <summary>
        /// Unlock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnlockSubAccountWithHttpInfo (long userId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sub_accounts/{user_id}/unlock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of void</returns>
        public async Task UnlockSubAccountAsync (long userId)
        {
             await UnlockSubAccountAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Unlock the sub-account 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> UnlockSubAccountAsyncWithHttpInfo (long userId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("user_id", ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sub_accounts/{user_id}/unlock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get sub-account mode Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SubUserMode&gt;</returns>
        public List<SubUserMode> ListUnifiedMode ()
        {
             ApiResponse<List<SubUserMode>> localVarResponse = ListUnifiedModeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub-account mode Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SubUserMode&gt;</returns>
        public ApiResponse<List<SubUserMode>> ListUnifiedModeWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubUserMode>>("/sub_accounts/unified_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get sub-account mode Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SubUserMode&gt;</returns>
        public async Task<List<SubUserMode>> ListUnifiedModeAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubUserMode>> localVarResponse = await ListUnifiedModeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sub-account mode Unified account mode： - &#x60;classic&#x60;: Classic account mode - &#x60;multi_currency&#x60;: Multi-currency margin mode - &#x60;portfolio&#x60;: Portfolio margin mode
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SubUserMode&gt;)</returns>
        public async Task<ApiResponse<List<SubUserMode>>> ListUnifiedModeAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubUserMode>>("/sub_accounts/unified_mode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnifiedMode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
