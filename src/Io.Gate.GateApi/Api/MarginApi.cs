/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        List<MarginAccount> ListMarginAccounts (string currencyPair = default(string));

        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        ApiResponse<List<MarginAccount>> ListMarginAccountsWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;MarginAccountBook&gt;</returns>
        List<MarginAccountBook> ListMarginAccountBook (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;MarginAccountBook&gt;</returns>
        ApiResponse<List<MarginAccountBook>> ListMarginAccountBookWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;FundingAccount&gt;</returns>
        List<FundingAccount> ListFundingAccounts (string currency = default(string));

        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;FundingAccount&gt;</returns>
        ApiResponse<List<FundingAccount>> ListFundingAccountsWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AutoRepaySetting</returns>
        AutoRepaySetting GetAutoRepayStatus ();

        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        ApiResponse<AutoRepaySetting> GetAutoRepayStatusWithHttpInfo ();
        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>AutoRepaySetting</returns>
        AutoRepaySetting SetAutoRepay (string status);

        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        ApiResponse<AutoRepaySetting> SetAutoRepayWithHttpInfo (string status);
        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>MarginTransferable</returns>
        MarginTransferable GetMarginTransferable (string currency, string currencyPair = default(string));

        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of MarginTransferable</returns>
        ApiResponse<MarginTransferable> GetMarginTransferableWithHttpInfo (string currency, string currencyPair = default(string));
        /// <summary>
        /// Currencies supported by cross margin.(deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CrossMarginCurrency&gt;</returns>
        List<CrossMarginCurrency> ListCrossMarginCurrencies ();

        /// <summary>
        /// Currencies supported by cross margin.(deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CrossMarginCurrency&gt;</returns>
        ApiResponse<List<CrossMarginCurrency>> ListCrossMarginCurrenciesWithHttpInfo ();
        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>CrossMarginCurrency</returns>
        CrossMarginCurrency GetCrossMarginCurrency (string currency);

        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of CrossMarginCurrency</returns>
        ApiResponse<CrossMarginCurrency> GetCrossMarginCurrencyWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CrossMarginAccount</returns>
        CrossMarginAccount GetCrossMarginAccount ();

        /// <summary>
        /// Retrieve cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CrossMarginAccount</returns>
        ApiResponse<CrossMarginAccount> GetCrossMarginAccountWithHttpInfo ();
        /// <summary>
        /// Retrieve cross margin account change history. (deprecated)
        /// </summary>
        /// <remarks>
        /// The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>List&lt;CrossMarginAccountBook&gt;</returns>
        List<CrossMarginAccountBook> ListCrossMarginAccountBook (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string));

        /// <summary>
        /// Retrieve cross margin account change history. (deprecated)
        /// </summary>
        /// <remarks>
        /// The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginAccountBook&gt;</returns>
        ApiResponse<List<CrossMarginAccountBook>> ListCrossMarginAccountBookWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string));
        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginLoan&gt;</returns>
        List<CrossMarginLoan> ListCrossMarginLoans (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginLoan&gt;</returns>
        ApiResponse<List<CrossMarginLoan>> ListCrossMarginLoansWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        /// <summary>
        /// Create a cross margin borrow loan. (deprecated)
        /// </summary>
        /// <remarks>
        /// Borrow amount cannot be less than currency minimum borrow amount
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>CrossMarginLoan</returns>
        CrossMarginLoan CreateCrossMarginLoan (CrossMarginLoan crossMarginLoan);

        /// <summary>
        /// Create a cross margin borrow loan. (deprecated)
        /// </summary>
        /// <remarks>
        /// Borrow amount cannot be less than currency minimum borrow amount
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>ApiResponse of CrossMarginLoan</returns>
        ApiResponse<CrossMarginLoan> CreateCrossMarginLoanWithHttpInfo (CrossMarginLoan crossMarginLoan);
        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>CrossMarginLoan</returns>
        CrossMarginLoan GetCrossMarginLoan (string loanId);

        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>ApiResponse of CrossMarginLoan</returns>
        ApiResponse<CrossMarginLoan> GetCrossMarginLoanWithHttpInfo (string loanId);
        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginRepayment&gt;</returns>
        List<CrossMarginRepayment> ListCrossMarginRepayments (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginRepayment&gt;</returns>
        ApiResponse<List<CrossMarginRepayment>> ListCrossMarginRepaymentsWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        /// <summary>
        /// Cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>List&lt;CrossMarginLoan&gt;</returns>
        List<CrossMarginLoan> RepayCrossMarginLoan (CrossMarginRepayRequest crossMarginRepayRequest);

        /// <summary>
        /// Cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>ApiResponse of List&lt;CrossMarginLoan&gt;</returns>
        ApiResponse<List<CrossMarginLoan>> RepayCrossMarginLoanWithHttpInfo (CrossMarginRepayRequest crossMarginRepayRequest);
        /// <summary>
        /// Interest records for the cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        List<UniLoanInterestRecord> GetCrossMarginInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Interest records for the cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        ApiResponse<List<UniLoanInterestRecord>> GetCrossMarginInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>CrossMarginTransferable</returns>
        CrossMarginTransferable GetCrossMarginTransferable (string currency);

        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of CrossMarginTransferable</returns>
        ApiResponse<CrossMarginTransferable> GetCrossMarginTransferableWithHttpInfo (string currency);
        /// <summary>
        /// Estimated interest rates. (deprecated)
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetCrossMarginEstimateRate (List<string> currencies);

        /// <summary>
        /// Estimated interest rates. (deprecated)
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetCrossMarginEstimateRateWithHttpInfo (List<string> currencies);
        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedBorrowable</returns>
        UnifiedBorrowable GetCrossMarginBorrowable (string currency);

        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedBorrowable</returns>
        ApiResponse<UnifiedBorrowable> GetCrossMarginBorrowableWithHttpInfo (string currency);
        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        List<MarginLeverageTier> GetUserMarginTier (string currencyPair);

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        ApiResponse<List<MarginLeverageTier>> GetUserMarginTierWithHttpInfo (string currencyPair);
        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        List<MarginLeverageTier> GetMarketMarginTier (string currencyPair);

        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        ApiResponse<List<MarginLeverageTier>> GetMarketMarginTierWithHttpInfo (string currencyPair);
        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns></returns>
        void SetUserMarketLeverage (MarginMarketLeverage marginMarketLeverage);

        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserMarketLeverageWithHttpInfo (MarginMarketLeverage marginMarketLeverage);
        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        List<MarginAccount> ListMarginUserAccount (string currencyPair = default(string));

        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        ApiResponse<List<MarginAccount>> ListMarginUserAccountWithHttpInfo (string currencyPair = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        Task<List<MarginAccount>> ListMarginAccountsAsync (string currencyPair = default(string));

        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        Task<ApiResponse<List<MarginAccount>>> ListMarginAccountsAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;MarginAccountBook&gt;</returns>
        Task<List<MarginAccountBook>> ListMarginAccountBookAsync (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccountBook&gt;)</returns>
        Task<ApiResponse<List<MarginAccountBook>>> ListMarginAccountBookAsyncWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;FundingAccount&gt;</returns>
        Task<List<FundingAccount>> ListFundingAccountsAsync (string currency = default(string));

        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FundingAccount&gt;)</returns>
        Task<ApiResponse<List<FundingAccount>>> ListFundingAccountsAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AutoRepaySetting</returns>
        Task<AutoRepaySetting> GetAutoRepayStatusAsync ();

        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        Task<ApiResponse<AutoRepaySetting>> GetAutoRepayStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of AutoRepaySetting</returns>
        Task<AutoRepaySetting> SetAutoRepayAsync (string status);

        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        Task<ApiResponse<AutoRepaySetting>> SetAutoRepayAsyncWithHttpInfo (string status);
        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of MarginTransferable</returns>
        Task<MarginTransferable> GetMarginTransferableAsync (string currency, string currencyPair = default(string));

        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (MarginTransferable)</returns>
        Task<ApiResponse<MarginTransferable>> GetMarginTransferableAsyncWithHttpInfo (string currency, string currencyPair = default(string));
        /// <summary>
        /// Currencies supported by cross margin.(deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CrossMarginCurrency&gt;</returns>
        Task<List<CrossMarginCurrency>> ListCrossMarginCurrenciesAsync ();

        /// <summary>
        /// Currencies supported by cross margin.(deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginCurrency&gt;)</returns>
        Task<ApiResponse<List<CrossMarginCurrency>>> ListCrossMarginCurrenciesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of CrossMarginCurrency</returns>
        Task<CrossMarginCurrency> GetCrossMarginCurrencyAsync (string currency);

        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (CrossMarginCurrency)</returns>
        Task<ApiResponse<CrossMarginCurrency>> GetCrossMarginCurrencyAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CrossMarginAccount</returns>
        Task<CrossMarginAccount> GetCrossMarginAccountAsync ();

        /// <summary>
        /// Retrieve cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CrossMarginAccount)</returns>
        Task<ApiResponse<CrossMarginAccount>> GetCrossMarginAccountAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve cross margin account change history. (deprecated)
        /// </summary>
        /// <remarks>
        /// The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>Task of List&lt;CrossMarginAccountBook&gt;</returns>
        Task<List<CrossMarginAccountBook>> ListCrossMarginAccountBookAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string));

        /// <summary>
        /// Retrieve cross margin account change history. (deprecated)
        /// </summary>
        /// <remarks>
        /// The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginAccountBook&gt;)</returns>
        Task<ApiResponse<List<CrossMarginAccountBook>>> ListCrossMarginAccountBookAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string));
        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginLoan&gt;</returns>
        Task<List<CrossMarginLoan>> ListCrossMarginLoansAsync (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginLoan&gt;)</returns>
        Task<ApiResponse<List<CrossMarginLoan>>> ListCrossMarginLoansAsyncWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        /// <summary>
        /// Create a cross margin borrow loan. (deprecated)
        /// </summary>
        /// <remarks>
        /// Borrow amount cannot be less than currency minimum borrow amount
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>Task of CrossMarginLoan</returns>
        Task<CrossMarginLoan> CreateCrossMarginLoanAsync (CrossMarginLoan crossMarginLoan);

        /// <summary>
        /// Create a cross margin borrow loan. (deprecated)
        /// </summary>
        /// <remarks>
        /// Borrow amount cannot be less than currency minimum borrow amount
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>Task of ApiResponse (CrossMarginLoan)</returns>
        Task<ApiResponse<CrossMarginLoan>> CreateCrossMarginLoanAsyncWithHttpInfo (CrossMarginLoan crossMarginLoan);
        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>Task of CrossMarginLoan</returns>
        Task<CrossMarginLoan> GetCrossMarginLoanAsync (string loanId);

        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>Task of ApiResponse (CrossMarginLoan)</returns>
        Task<ApiResponse<CrossMarginLoan>> GetCrossMarginLoanAsyncWithHttpInfo (string loanId);
        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginRepayment&gt;</returns>
        Task<List<CrossMarginRepayment>> ListCrossMarginRepaymentsAsync (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginRepayment&gt;)</returns>
        Task<ApiResponse<List<CrossMarginRepayment>>> ListCrossMarginRepaymentsAsyncWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        /// <summary>
        /// Cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>Task of List&lt;CrossMarginLoan&gt;</returns>
        Task<List<CrossMarginLoan>> RepayCrossMarginLoanAsync (CrossMarginRepayRequest crossMarginRepayRequest);

        /// <summary>
        /// Cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginLoan&gt;)</returns>
        Task<ApiResponse<List<CrossMarginLoan>>> RepayCrossMarginLoanAsyncWithHttpInfo (CrossMarginRepayRequest crossMarginRepayRequest);
        /// <summary>
        /// Interest records for the cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        Task<List<UniLoanInterestRecord>> GetCrossMarginInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// Interest records for the cross margin account. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        Task<ApiResponse<List<UniLoanInterestRecord>>> GetCrossMarginInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of CrossMarginTransferable</returns>
        Task<CrossMarginTransferable> GetCrossMarginTransferableAsync (string currency);

        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (CrossMarginTransferable)</returns>
        Task<ApiResponse<CrossMarginTransferable>> GetCrossMarginTransferableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Estimated interest rates. (deprecated)
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        Task<Dictionary<string, string>> GetCrossMarginEstimateRateAsync (List<string> currencies);

        /// <summary>
        /// Estimated interest rates. (deprecated)
        /// </summary>
        /// <remarks>
        /// Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        Task<ApiResponse<Dictionary<string, string>>> GetCrossMarginEstimateRateAsyncWithHttpInfo (List<string> currencies);
        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedBorrowable</returns>
        Task<UnifiedBorrowable> GetCrossMarginBorrowableAsync (string currency);

        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedBorrowable)</returns>
        Task<ApiResponse<UnifiedBorrowable>> GetCrossMarginBorrowableAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        Task<List<MarginLeverageTier>> GetUserMarginTierAsync (string currencyPair);

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        Task<ApiResponse<List<MarginLeverageTier>>> GetUserMarginTierAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        Task<List<MarginLeverageTier>> GetMarketMarginTierAsync (string currencyPair);

        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        Task<ApiResponse<List<MarginLeverageTier>>> GetMarketMarginTierAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of void</returns>
        Task SetUserMarketLeverageAsync (MarginMarketLeverage marginMarketLeverage);

        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SetUserMarketLeverageAsyncWithHttpInfo (MarginMarketLeverage marginMarketLeverage);
        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        Task<List<MarginAccount>> ListMarginUserAccountAsync (string currencyPair = default(string));

        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        Task<ApiResponse<List<MarginAccount>>> ListMarginUserAccountAsyncWithHttpInfo (string currencyPair = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginApi : IMarginApiSync, IMarginApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarginApi : IMarginApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarginApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarginApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarginApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarginApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        public List<MarginAccount> ListMarginAccounts (string currencyPair = default(string))
        {
             ApiResponse<List<MarginAccount>> localVarResponse = ListMarginAccountsWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        public ApiResponse<List<MarginAccount>> ListMarginAccountsWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginAccount>>("/margin/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        public async Task<List<MarginAccount>> ListMarginAccountsAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginAccount>> localVarResponse = await ListMarginAccountsAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        public async Task<ApiResponse<List<MarginAccount>>> ListMarginAccountsAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginAccount>>("/margin/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;MarginAccountBook&gt;</returns>
        public List<MarginAccountBook> ListMarginAccountBook (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<MarginAccountBook>> localVarResponse = ListMarginAccountBookWithHttpInfo(currency, currencyPair, type, from, to, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;MarginAccountBook&gt;</returns>
        public ApiResponse<List<MarginAccountBook>> ListMarginAccountBookWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginAccountBook>>("/margin/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;MarginAccountBook&gt;</returns>
        public async Task<List<MarginAccountBook>> ListMarginAccountBookAsync (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginAccountBook>> localVarResponse = await ListMarginAccountBookAsyncWithHttpInfo(currency, currencyPair, type, from, to, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccountBook&gt;)</returns>
        public async Task<ApiResponse<List<MarginAccountBook>>> ListMarginAccountBookAsyncWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginAccountBook>>("/margin/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;FundingAccount&gt;</returns>
        public List<FundingAccount> ListFundingAccounts (string currency = default(string))
        {
             ApiResponse<List<FundingAccount>> localVarResponse = ListFundingAccountsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;FundingAccount&gt;</returns>
        public ApiResponse<List<FundingAccount>> ListFundingAccountsWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FundingAccount>>("/margin/funding_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFundingAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;FundingAccount&gt;</returns>
        public async Task<List<FundingAccount>> ListFundingAccountsAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FundingAccount>> localVarResponse = await ListFundingAccountsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FundingAccount&gt;)</returns>
        public async Task<ApiResponse<List<FundingAccount>>> ListFundingAccountsAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FundingAccount>>("/margin/funding_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFundingAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AutoRepaySetting</returns>
        public AutoRepaySetting GetAutoRepayStatus ()
        {
             ApiResponse<AutoRepaySetting> localVarResponse = GetAutoRepayStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        public ApiResponse<AutoRepaySetting> GetAutoRepayStatusWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutoRepayStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AutoRepaySetting</returns>
        public async Task<AutoRepaySetting> GetAutoRepayStatusAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<AutoRepaySetting> localVarResponse = await GetAutoRepayStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        public async Task<ApiResponse<AutoRepaySetting>> GetAutoRepayStatusAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutoRepayStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>AutoRepaySetting</returns>
        public AutoRepaySetting SetAutoRepay (string status)
        {
             ApiResponse<AutoRepaySetting> localVarResponse = SetAutoRepayWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        public ApiResponse<AutoRepaySetting> SetAutoRepayWithHttpInfo (string status)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling MarginApi->SetAutoRepay");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAutoRepay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of AutoRepaySetting</returns>
        public async Task<AutoRepaySetting> SetAutoRepayAsync (string status)
        {
             Io.Gate.GateApi.Client.ApiResponse<AutoRepaySetting> localVarResponse = await SetAutoRepayAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        public async Task<ApiResponse<AutoRepaySetting>> SetAutoRepayAsyncWithHttpInfo (string status)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling MarginApi->SetAutoRepay");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAutoRepay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>MarginTransferable</returns>
        public MarginTransferable GetMarginTransferable (string currency, string currencyPair = default(string))
        {
             ApiResponse<MarginTransferable> localVarResponse = GetMarginTransferableWithHttpInfo(currency, currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of MarginTransferable</returns>
        public ApiResponse<MarginTransferable> GetMarginTransferableWithHttpInfo (string currency, string currencyPair = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetMarginTransferable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<MarginTransferable>("/margin/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarginTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of MarginTransferable</returns>
        public async Task<MarginTransferable> GetMarginTransferableAsync (string currency, string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<MarginTransferable> localVarResponse = await GetMarginTransferableAsyncWithHttpInfo(currency, currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (MarginTransferable)</returns>
        public async Task<ApiResponse<MarginTransferable>> GetMarginTransferableAsyncWithHttpInfo (string currency, string currencyPair = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetMarginTransferable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarginTransferable>("/margin/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarginTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Currencies supported by cross margin.(deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CrossMarginCurrency&gt;</returns>
        public List<CrossMarginCurrency> ListCrossMarginCurrencies ()
        {
             ApiResponse<List<CrossMarginCurrency>> localVarResponse = ListCrossMarginCurrenciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Currencies supported by cross margin.(deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CrossMarginCurrency&gt;</returns>
        public ApiResponse<List<CrossMarginCurrency>> ListCrossMarginCurrenciesWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CrossMarginCurrency>>("/margin/cross/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Currencies supported by cross margin.(deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CrossMarginCurrency&gt;</returns>
        public async Task<List<CrossMarginCurrency>> ListCrossMarginCurrenciesAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginCurrency>> localVarResponse = await ListCrossMarginCurrenciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Currencies supported by cross margin.(deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginCurrency&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginCurrency>>> ListCrossMarginCurrenciesAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CrossMarginCurrency>>("/margin/cross/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>CrossMarginCurrency</returns>
        public CrossMarginCurrency GetCrossMarginCurrency (string currency)
        {
             ApiResponse<CrossMarginCurrency> localVarResponse = GetCrossMarginCurrencyWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of CrossMarginCurrency</returns>
        public ApiResponse<CrossMarginCurrency> GetCrossMarginCurrencyWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetCrossMarginCurrency");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currency", ClientUtils.ParameterToString(currency)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CrossMarginCurrency>("/margin/cross/currencies/{currency}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of CrossMarginCurrency</returns>
        public async Task<CrossMarginCurrency> GetCrossMarginCurrencyAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<CrossMarginCurrency> localVarResponse = await GetCrossMarginCurrencyAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve detail of one single currency supported by cross margin. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (CrossMarginCurrency)</returns>
        public async Task<ApiResponse<CrossMarginCurrency>> GetCrossMarginCurrencyAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetCrossMarginCurrency");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("currency", ClientUtils.ParameterToString(currency)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CrossMarginCurrency>("/margin/cross/currencies/{currency}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CrossMarginAccount</returns>
        public CrossMarginAccount GetCrossMarginAccount ()
        {
             ApiResponse<CrossMarginAccount> localVarResponse = GetCrossMarginAccountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CrossMarginAccount</returns>
        public ApiResponse<CrossMarginAccount> GetCrossMarginAccountWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<CrossMarginAccount>("/margin/cross/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CrossMarginAccount</returns>
        public async Task<CrossMarginAccount> GetCrossMarginAccountAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<CrossMarginAccount> localVarResponse = await GetCrossMarginAccountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CrossMarginAccount)</returns>
        public async Task<ApiResponse<CrossMarginAccount>> GetCrossMarginAccountAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CrossMarginAccount>("/margin/cross/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin account change history. (deprecated) The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>List&lt;CrossMarginAccountBook&gt;</returns>
        public List<CrossMarginAccountBook> ListCrossMarginAccountBook (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {
             ApiResponse<List<CrossMarginAccountBook>> localVarResponse = ListCrossMarginAccountBookWithHttpInfo(currency, from, to, page, limit, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve cross margin account change history. (deprecated) The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginAccountBook&gt;</returns>
        public ApiResponse<List<CrossMarginAccountBook>> ListCrossMarginAccountBookWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CrossMarginAccountBook>>("/margin/cross/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin account change history. (deprecated) The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>Task of List&lt;CrossMarginAccountBook&gt;</returns>
        public async Task<List<CrossMarginAccountBook>> ListCrossMarginAccountBookAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginAccountBook>> localVarResponse = await ListCrossMarginAccountBookAsyncWithHttpInfo(currency, from, to, page, limit, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve cross margin account change history. (deprecated) The record query time range is not allowed to exceed 30 days.  When using the limit&amp;page paging function to retrieve data, the maximum number of pages is 100,000, that is, (limit page - 1) &lt;&#x3D; 100000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginAccountBook&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginAccountBook>>> ListCrossMarginAccountBookAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CrossMarginAccountBook>>("/margin/cross/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginLoan&gt;</returns>
        public List<CrossMarginLoan> ListCrossMarginLoans (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             ApiResponse<List<CrossMarginLoan>> localVarResponse = ListCrossMarginLoansWithHttpInfo(status, currency, limit, offset, reverse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginLoan&gt;</returns>
        public ApiResponse<List<CrossMarginLoan>> ListCrossMarginLoansWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CrossMarginLoan>>("/margin/cross/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginLoan&gt;</returns>
        public async Task<List<CrossMarginLoan>> ListCrossMarginLoansAsync (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginLoan>> localVarResponse = await ListCrossMarginLoansAsyncWithHttpInfo(status, currency, limit, offset, reverse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginLoan&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginLoan>>> ListCrossMarginLoansAsyncWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CrossMarginLoan>>("/margin/cross/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a cross margin borrow loan. (deprecated) Borrow amount cannot be less than currency minimum borrow amount
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>CrossMarginLoan</returns>
        public CrossMarginLoan CreateCrossMarginLoan (CrossMarginLoan crossMarginLoan)
        {
             ApiResponse<CrossMarginLoan> localVarResponse = CreateCrossMarginLoanWithHttpInfo(crossMarginLoan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a cross margin borrow loan. (deprecated) Borrow amount cannot be less than currency minimum borrow amount
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>ApiResponse of CrossMarginLoan</returns>
        public ApiResponse<CrossMarginLoan> CreateCrossMarginLoanWithHttpInfo (CrossMarginLoan crossMarginLoan)
        {
            // verify the required parameter 'crossMarginLoan' is set
            if (crossMarginLoan == null)
                throw new ApiException(400, "Missing required parameter 'crossMarginLoan' when calling MarginApi->CreateCrossMarginLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = crossMarginLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<CrossMarginLoan>("/margin/cross/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCrossMarginLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a cross margin borrow loan. (deprecated) Borrow amount cannot be less than currency minimum borrow amount
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>Task of CrossMarginLoan</returns>
        public async Task<CrossMarginLoan> CreateCrossMarginLoanAsync (CrossMarginLoan crossMarginLoan)
        {
             Io.Gate.GateApi.Client.ApiResponse<CrossMarginLoan> localVarResponse = await CreateCrossMarginLoanAsyncWithHttpInfo(crossMarginLoan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a cross margin borrow loan. (deprecated) Borrow amount cannot be less than currency minimum borrow amount
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginLoan"></param>
        /// <returns>Task of ApiResponse (CrossMarginLoan)</returns>
        public async Task<ApiResponse<CrossMarginLoan>> CreateCrossMarginLoanAsyncWithHttpInfo (CrossMarginLoan crossMarginLoan)
        {
            // verify the required parameter 'crossMarginLoan' is set
            if (crossMarginLoan == null)
                throw new ApiException(400, "Missing required parameter 'crossMarginLoan' when calling MarginApi->CreateCrossMarginLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = crossMarginLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CrossMarginLoan>("/margin/cross/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCrossMarginLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>CrossMarginLoan</returns>
        public CrossMarginLoan GetCrossMarginLoan (string loanId)
        {
             ApiResponse<CrossMarginLoan> localVarResponse = GetCrossMarginLoanWithHttpInfo(loanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>ApiResponse of CrossMarginLoan</returns>
        public ApiResponse<CrossMarginLoan> GetCrossMarginLoanWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling MarginApi->GetCrossMarginLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("loan_id", ClientUtils.ParameterToString(loanId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<CrossMarginLoan>("/margin/cross/loans/{loan_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>Task of CrossMarginLoan</returns>
        public async Task<CrossMarginLoan> GetCrossMarginLoanAsync (string loanId)
        {
             Io.Gate.GateApi.Client.ApiResponse<CrossMarginLoan> localVarResponse = await GetCrossMarginLoanAsyncWithHttpInfo(loanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve single borrow loan detail. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Borrow loan ID</param>
        /// <returns>Task of ApiResponse (CrossMarginLoan)</returns>
        public async Task<ApiResponse<CrossMarginLoan>> GetCrossMarginLoanAsyncWithHttpInfo (string loanId)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling MarginApi->GetCrossMarginLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("loan_id", ClientUtils.ParameterToString(loanId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CrossMarginLoan>("/margin/cross/loans/{loan_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginRepayment&gt;</returns>
        public List<CrossMarginRepayment> ListCrossMarginRepayments (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             ApiResponse<List<CrossMarginRepayment>> localVarResponse = ListCrossMarginRepaymentsWithHttpInfo(currency, loanId, limit, offset, reverse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginRepayment&gt;</returns>
        public ApiResponse<List<CrossMarginRepayment>> ListCrossMarginRepaymentsWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (loanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "loan_id", loanId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CrossMarginRepayment>>("/margin/cross/repayments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginRepayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginRepayment&gt;</returns>
        public async Task<List<CrossMarginRepayment>> ListCrossMarginRepaymentsAsync (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginRepayment>> localVarResponse = await ListCrossMarginRepaymentsAsyncWithHttpInfo(currency, loanId, limit, offset, reverse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginRepayment&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginRepayment>>> ListCrossMarginRepaymentsAsyncWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (loanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "loan_id", loanId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CrossMarginRepayment>>("/margin/cross/repayments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginRepayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cross margin repayments. (deprecated) When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>List&lt;CrossMarginLoan&gt;</returns>
        public List<CrossMarginLoan> RepayCrossMarginLoan (CrossMarginRepayRequest crossMarginRepayRequest)
        {
             ApiResponse<List<CrossMarginLoan>> localVarResponse = RepayCrossMarginLoanWithHttpInfo(crossMarginRepayRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cross margin repayments. (deprecated) When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>ApiResponse of List&lt;CrossMarginLoan&gt;</returns>
        public ApiResponse<List<CrossMarginLoan>> RepayCrossMarginLoanWithHttpInfo (CrossMarginRepayRequest crossMarginRepayRequest)
        {
            // verify the required parameter 'crossMarginRepayRequest' is set
            if (crossMarginRepayRequest == null)
                throw new ApiException(400, "Missing required parameter 'crossMarginRepayRequest' when calling MarginApi->RepayCrossMarginLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = crossMarginRepayRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CrossMarginLoan>>("/margin/cross/repayments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepayCrossMarginLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cross margin repayments. (deprecated) When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>Task of List&lt;CrossMarginLoan&gt;</returns>
        public async Task<List<CrossMarginLoan>> RepayCrossMarginLoanAsync (CrossMarginRepayRequest crossMarginRepayRequest)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginLoan>> localVarResponse = await RepayCrossMarginLoanAsyncWithHttpInfo(crossMarginRepayRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cross margin repayments. (deprecated) When the liquidity of the currency is insufficient and the transaction risk is high, the currency will be disabled, and funds cannot be transferred.When the available balance of cross-margin is insufficient, the balance of the spot account can be used for repayment. Please ensure that the balance of the spot account is sufficient, and system uses cross-margin account for repayment first
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossMarginRepayRequest"></param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginLoan&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginLoan>>> RepayCrossMarginLoanAsyncWithHttpInfo (CrossMarginRepayRequest crossMarginRepayRequest)
        {
            // verify the required parameter 'crossMarginRepayRequest' is set
            if (crossMarginRepayRequest == null)
                throw new ApiException(400, "Missing required parameter 'crossMarginRepayRequest' when calling MarginApi->RepayCrossMarginLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = crossMarginRepayRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CrossMarginLoan>>("/margin/cross/repayments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepayCrossMarginLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interest records for the cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>List&lt;UniLoanInterestRecord&gt;</returns>
        public List<UniLoanInterestRecord> GetCrossMarginInterestRecords (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<UniLoanInterestRecord>> localVarResponse = GetCrossMarginInterestRecordsWithHttpInfo(currency, page, limit, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Interest records for the cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>ApiResponse of List&lt;UniLoanInterestRecord&gt;</returns>
        public ApiResponse<List<UniLoanInterestRecord>> GetCrossMarginInterestRecordsWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniLoanInterestRecord>>("/margin/cross/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interest records for the cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of List&lt;UniLoanInterestRecord&gt;</returns>
        public async Task<List<UniLoanInterestRecord>> GetCrossMarginInterestRecordsAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<UniLoanInterestRecord>> localVarResponse = await GetCrossMarginInterestRecordsAsyncWithHttpInfo(currency, page, limit, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Interest records for the cross margin account. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="from">Start timestamp (optional)</param>
        /// <param name="to">End timestamp (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UniLoanInterestRecord&gt;)</returns>
        public async Task<ApiResponse<List<UniLoanInterestRecord>>> GetCrossMarginInterestRecordsAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniLoanInterestRecord>>("/margin/cross/interest_records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginInterestRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>CrossMarginTransferable</returns>
        public CrossMarginTransferable GetCrossMarginTransferable (string currency)
        {
             ApiResponse<CrossMarginTransferable> localVarResponse = GetCrossMarginTransferableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of CrossMarginTransferable</returns>
        public ApiResponse<CrossMarginTransferable> GetCrossMarginTransferableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetCrossMarginTransferable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<CrossMarginTransferable>("/margin/cross/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of CrossMarginTransferable</returns>
        public async Task<CrossMarginTransferable> GetCrossMarginTransferableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<CrossMarginTransferable> localVarResponse = await GetCrossMarginTransferableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the max transferable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (CrossMarginTransferable)</returns>
        public async Task<ApiResponse<CrossMarginTransferable>> GetCrossMarginTransferableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetCrossMarginTransferable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CrossMarginTransferable>("/margin/cross/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimated interest rates. (deprecated) Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetCrossMarginEstimateRate (List<string> currencies)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetCrossMarginEstimateRateWithHttpInfo(currencies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimated interest rates. (deprecated) Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse<Dictionary<string, string>> GetCrossMarginEstimateRateWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling MarginApi->GetCrossMarginEstimateRate");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, string>>("/margin/cross/estimate_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginEstimateRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimated interest rates. (deprecated) Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async Task<Dictionary<string, string>> GetCrossMarginEstimateRateAsync (List<string> currencies)
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetCrossMarginEstimateRateAsyncWithHttpInfo(currencies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimated interest rates. (deprecated) Please note that the interest rates are subject to change based on the borrowing and lending demand, and therefore, the provided rates may not be entirely accurate.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">An array of up to 10 specifying the currency name</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, string>>> GetCrossMarginEstimateRateAsyncWithHttpInfo (List<string> currencies)
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling MarginApi->GetCrossMarginEstimateRate");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/margin/cross/estimate_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginEstimateRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>UnifiedBorrowable</returns>
        public UnifiedBorrowable GetCrossMarginBorrowable (string currency)
        {
             ApiResponse<UnifiedBorrowable> localVarResponse = GetCrossMarginBorrowableWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>ApiResponse of UnifiedBorrowable</returns>
        public ApiResponse<UnifiedBorrowable> GetCrossMarginBorrowableWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetCrossMarginBorrowable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<UnifiedBorrowable>("/margin/cross/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of UnifiedBorrowable</returns>
        public async Task<UnifiedBorrowable> GetCrossMarginBorrowableAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<UnifiedBorrowable> localVarResponse = await GetCrossMarginBorrowableAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the max borrowable amount for a specific cross margin currency. (deprecated) 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <returns>Task of ApiResponse (UnifiedBorrowable)</returns>
        public async Task<ApiResponse<UnifiedBorrowable>> GetCrossMarginBorrowableAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetCrossMarginBorrowable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnifiedBorrowable>("/margin/cross/borrowable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossMarginBorrowable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        public List<MarginLeverageTier> GetUserMarginTier (string currencyPair)
        {
             ApiResponse<List<MarginLeverageTier>> localVarResponse = GetUserMarginTierWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        public ApiResponse<List<MarginLeverageTier>> GetUserMarginTierWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetUserMarginTier");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginLeverageTier>>("/margin/user/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        public async Task<List<MarginLeverageTier>> GetUserMarginTierAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginLeverageTier>> localVarResponse = await GetUserMarginTierAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        public async Task<ApiResponse<List<MarginLeverageTier>>> GetUserMarginTierAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetUserMarginTier");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginLeverageTier>>("/margin/user/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        public List<MarginLeverageTier> GetMarketMarginTier (string currencyPair)
        {
             ApiResponse<List<MarginLeverageTier>> localVarResponse = GetMarketMarginTierWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        public ApiResponse<List<MarginLeverageTier>> GetMarketMarginTierWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetMarketMarginTier");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginLeverageTier>>("/margin/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        public async Task<List<MarginLeverageTier>> GetMarketMarginTierAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginLeverageTier>> localVarResponse = await GetMarketMarginTierAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        public async Task<ApiResponse<List<MarginLeverageTier>>> GetMarketMarginTierAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetMarketMarginTier");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginLeverageTier>>("/margin/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns></returns>
        public void SetUserMarketLeverage (MarginMarketLeverage marginMarketLeverage)
        {
             SetUserMarketLeverageWithHttpInfo(marginMarketLeverage);
        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetUserMarketLeverageWithHttpInfo (MarginMarketLeverage marginMarketLeverage)
        {
            // verify the required parameter 'marginMarketLeverage' is set
            if (marginMarketLeverage == null)
                throw new ApiException(400, "Missing required parameter 'marginMarketLeverage' when calling MarginApi->SetUserMarketLeverage");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = marginMarketLeverage;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/margin/leverage/user_market_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserMarketLeverage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of void</returns>
        public async Task SetUserMarketLeverageAsync (MarginMarketLeverage marginMarketLeverage)
        {
             await SetUserMarketLeverageAsyncWithHttpInfo(marginMarketLeverage);

        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SetUserMarketLeverageAsyncWithHttpInfo (MarginMarketLeverage marginMarketLeverage)
        {
            // verify the required parameter 'marginMarketLeverage' is set
            if (marginMarketLeverage == null)
                throw new ApiException(400, "Missing required parameter 'marginMarketLeverage' when calling MarginApi->SetUserMarketLeverage");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = marginMarketLeverage;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/margin/leverage/user_market_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserMarketLeverage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        public List<MarginAccount> ListMarginUserAccount (string currencyPair = default(string))
        {
             ApiResponse<List<MarginAccount>> localVarResponse = ListMarginUserAccountWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        public ApiResponse<List<MarginAccount>> ListMarginUserAccountWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginAccount>>("/margin/user/account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginUserAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        public async Task<List<MarginAccount>> ListMarginUserAccountAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginAccount>> localVarResponse = await ListMarginUserAccountAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        public async Task<ApiResponse<List<MarginAccount>>> ListMarginUserAccountAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginAccount>>("/margin/user/account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginUserAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
