/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        List<MarginAccount> ListMarginAccounts (string currencyPair = default(string));

        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        ApiResponse<List<MarginAccount>> ListMarginAccountsWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;MarginAccountBook&gt;</returns>
        List<MarginAccountBook> ListMarginAccountBook (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;MarginAccountBook&gt;</returns>
        ApiResponse<List<MarginAccountBook>> ListMarginAccountBookWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;FundingAccount&gt;</returns>
        List<FundingAccount> ListFundingAccounts (string currency = default(string));

        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;FundingAccount&gt;</returns>
        ApiResponse<List<FundingAccount>> ListFundingAccountsWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AutoRepaySetting</returns>
        AutoRepaySetting GetAutoRepayStatus ();

        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        ApiResponse<AutoRepaySetting> GetAutoRepayStatusWithHttpInfo ();
        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>AutoRepaySetting</returns>
        AutoRepaySetting SetAutoRepay (string status);

        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        ApiResponse<AutoRepaySetting> SetAutoRepayWithHttpInfo (string status);
        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>MarginTransferable</returns>
        MarginTransferable GetMarginTransferable (string currency, string currencyPair = default(string));

        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of MarginTransferable</returns>
        ApiResponse<MarginTransferable> GetMarginTransferableWithHttpInfo (string currency, string currencyPair = default(string));
        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        List<MarginLeverageTier> GetUserMarginTier (string currencyPair);

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        ApiResponse<List<MarginLeverageTier>> GetUserMarginTierWithHttpInfo (string currencyPair);
        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        List<MarginLeverageTier> GetMarketMarginTier (string currencyPair);

        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        ApiResponse<List<MarginLeverageTier>> GetMarketMarginTierWithHttpInfo (string currencyPair);
        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns></returns>
        void SetUserMarketLeverage (MarginMarketLeverage marginMarketLeverage);

        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserMarketLeverageWithHttpInfo (MarginMarketLeverage marginMarketLeverage);
        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        List<MarginAccount> ListMarginUserAccount (string currencyPair = default(string));

        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        ApiResponse<List<MarginAccount>> ListMarginUserAccountWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginLoan&gt;</returns>
        List<CrossMarginLoan> ListCrossMarginLoans (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginLoan&gt;</returns>
        ApiResponse<List<CrossMarginLoan>> ListCrossMarginLoansWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginRepayment&gt;</returns>
        List<CrossMarginRepayment> ListCrossMarginRepayments (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginRepayment&gt;</returns>
        ApiResponse<List<CrossMarginRepayment>> ListCrossMarginRepaymentsWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        Task<List<MarginAccount>> ListMarginAccountsAsync (string currencyPair = default(string));

        /// <summary>
        /// Margin account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        Task<ApiResponse<List<MarginAccount>>> ListMarginAccountsAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;MarginAccountBook&gt;</returns>
        Task<List<MarginAccountBook>> ListMarginAccountBookAsync (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List margin account balance change history
        /// </summary>
        /// <remarks>
        /// Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccountBook&gt;)</returns>
        Task<ApiResponse<List<MarginAccountBook>>> ListMarginAccountBookAsyncWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;FundingAccount&gt;</returns>
        Task<List<FundingAccount>> ListFundingAccountsAsync (string currency = default(string));

        /// <summary>
        /// Funding account list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FundingAccount&gt;)</returns>
        Task<ApiResponse<List<FundingAccount>>> ListFundingAccountsAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AutoRepaySetting</returns>
        Task<AutoRepaySetting> GetAutoRepayStatusAsync ();

        /// <summary>
        /// Retrieve user auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        Task<ApiResponse<AutoRepaySetting>> GetAutoRepayStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of AutoRepaySetting</returns>
        Task<AutoRepaySetting> SetAutoRepayAsync (string status);

        /// <summary>
        /// Update user&#39;s auto repayment setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        Task<ApiResponse<AutoRepaySetting>> SetAutoRepayAsyncWithHttpInfo (string status);
        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of MarginTransferable</returns>
        Task<MarginTransferable> GetMarginTransferableAsync (string currency, string currencyPair = default(string));

        /// <summary>
        /// Get the max transferable amount for a specific margin currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (MarginTransferable)</returns>
        Task<ApiResponse<MarginTransferable>> GetMarginTransferableAsyncWithHttpInfo (string currency, string currencyPair = default(string));
        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        Task<List<MarginLeverageTier>> GetUserMarginTierAsync (string currencyPair);

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        Task<ApiResponse<List<MarginLeverageTier>>> GetUserMarginTierAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        Task<List<MarginLeverageTier>> GetMarketMarginTierAsync (string currencyPair);

        /// <summary>
        /// Query the current market leverage lending gradient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        Task<ApiResponse<List<MarginLeverageTier>>> GetMarketMarginTierAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of void</returns>
        Task SetUserMarketLeverageAsync (MarginMarketLeverage marginMarketLeverage);

        /// <summary>
        /// Set the user market leverage multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SetUserMarketLeverageAsyncWithHttpInfo (MarginMarketLeverage marginMarketLeverage);
        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        Task<List<MarginAccount>> ListMarginUserAccountAsync (string currencyPair = default(string));

        /// <summary>
        /// Query the user&#39;s leverage account list
        /// </summary>
        /// <remarks>
        /// Support querying risk rate per position account and margin rate per position account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        Task<ApiResponse<List<MarginAccount>>> ListMarginUserAccountAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginLoan&gt;</returns>
        Task<List<CrossMarginLoan>> ListCrossMarginLoansAsync (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// List cross margin borrow history. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginLoan&gt;)</returns>
        Task<ApiResponse<List<CrossMarginLoan>>> ListCrossMarginLoansAsyncWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginRepayment&gt;</returns>
        Task<List<CrossMarginRepayment>> ListCrossMarginRepaymentsAsync (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated)
        /// </summary>
        /// <remarks>
        /// Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginRepayment&gt;)</returns>
        Task<ApiResponse<List<CrossMarginRepayment>>> ListCrossMarginRepaymentsAsyncWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarginApi : IMarginApiSync, IMarginApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarginApi : IMarginApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarginApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarginApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarginApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarginApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarginApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        public List<MarginAccount> ListMarginAccounts (string currencyPair = default(string))
        {
             ApiResponse<List<MarginAccount>> localVarResponse = ListMarginAccountsWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        public ApiResponse<List<MarginAccount>> ListMarginAccountsWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginAccount>>("/margin/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        public async Task<List<MarginAccount>> ListMarginAccountsAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginAccount>> localVarResponse = await ListMarginAccountsAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Margin account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        public async Task<ApiResponse<List<MarginAccount>>> ListMarginAccountsAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginAccount>>("/margin/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>List&lt;MarginAccountBook&gt;</returns>
        public List<MarginAccountBook> ListMarginAccountBook (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<MarginAccountBook>> localVarResponse = ListMarginAccountBookWithHttpInfo(currency, currencyPair, type, from, to, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;MarginAccountBook&gt;</returns>
        public ApiResponse<List<MarginAccountBook>> ListMarginAccountBookWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginAccountBook>>("/margin/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of List&lt;MarginAccountBook&gt;</returns>
        public async Task<List<MarginAccountBook>> ListMarginAccountBookAsync (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginAccountBook>> localVarResponse = await ListMarginAccountBookAsyncWithHttpInfo(currency, currencyPair, type, from, to, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List margin account balance change history Only transferals from and to margin account are provided for now. Time range allows 30 days at most
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">List records related to specified currency only. If specified, &#x60;currency_pair&#x60; is also required. (optional)</param>
        /// <param name="currencyPair">List records related to specified currency pair. Used in combination with &#x60;currency&#x60;. Ignored if &#x60;currency&#x60; is not provided (optional)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccountBook&gt;)</returns>
        public async Task<ApiResponse<List<MarginAccountBook>>> ListMarginAccountBookAsyncWithHttpInfo (string currency = default(string), string currencyPair = default(string), string type = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginAccountBook>>("/margin/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;FundingAccount&gt;</returns>
        public List<FundingAccount> ListFundingAccounts (string currency = default(string))
        {
             ApiResponse<List<FundingAccount>> localVarResponse = ListFundingAccountsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;FundingAccount&gt;</returns>
        public ApiResponse<List<FundingAccount>> ListFundingAccountsWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FundingAccount>>("/margin/funding_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFundingAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;FundingAccount&gt;</returns>
        public async Task<List<FundingAccount>> ListFundingAccountsAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FundingAccount>> localVarResponse = await ListFundingAccountsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Funding account list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FundingAccount&gt;)</returns>
        public async Task<ApiResponse<List<FundingAccount>>> ListFundingAccountsAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FundingAccount>>("/margin/funding_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFundingAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AutoRepaySetting</returns>
        public AutoRepaySetting GetAutoRepayStatus ()
        {
             ApiResponse<AutoRepaySetting> localVarResponse = GetAutoRepayStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        public ApiResponse<AutoRepaySetting> GetAutoRepayStatusWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutoRepayStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AutoRepaySetting</returns>
        public async Task<AutoRepaySetting> GetAutoRepayStatusAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<AutoRepaySetting> localVarResponse = await GetAutoRepayStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        public async Task<ApiResponse<AutoRepaySetting>> GetAutoRepayStatusAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutoRepayStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>AutoRepaySetting</returns>
        public AutoRepaySetting SetAutoRepay (string status)
        {
             ApiResponse<AutoRepaySetting> localVarResponse = SetAutoRepayWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>ApiResponse of AutoRepaySetting</returns>
        public ApiResponse<AutoRepaySetting> SetAutoRepayWithHttpInfo (string status)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling MarginApi->SetAutoRepay");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAutoRepay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of AutoRepaySetting</returns>
        public async Task<AutoRepaySetting> SetAutoRepayAsync (string status)
        {
             Io.Gate.GateApi.Client.ApiResponse<AutoRepaySetting> localVarResponse = await SetAutoRepayAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user&#39;s auto repayment setting 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">New auto repayment status. &#x60;on&#x60; - enabled, &#x60;off&#x60; - disabled</param>
        /// <returns>Task of ApiResponse (AutoRepaySetting)</returns>
        public async Task<ApiResponse<AutoRepaySetting>> SetAutoRepayAsyncWithHttpInfo (string status)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling MarginApi->SetAutoRepay");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AutoRepaySetting>("/margin/auto_repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAutoRepay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>MarginTransferable</returns>
        public MarginTransferable GetMarginTransferable (string currency, string currencyPair = default(string))
        {
             ApiResponse<MarginTransferable> localVarResponse = GetMarginTransferableWithHttpInfo(currency, currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of MarginTransferable</returns>
        public ApiResponse<MarginTransferable> GetMarginTransferableWithHttpInfo (string currency, string currencyPair = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetMarginTransferable");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<MarginTransferable>("/margin/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarginTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of MarginTransferable</returns>
        public async Task<MarginTransferable> GetMarginTransferableAsync (string currency, string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<MarginTransferable> localVarResponse = await GetMarginTransferableAsyncWithHttpInfo(currency, currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the max transferable amount for a specific margin currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency</param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (MarginTransferable)</returns>
        public async Task<ApiResponse<MarginTransferable>> GetMarginTransferableAsyncWithHttpInfo (string currency, string currencyPair = default(string))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MarginApi->GetMarginTransferable");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarginTransferable>("/margin/transferable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarginTransferable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        public List<MarginLeverageTier> GetUserMarginTier (string currencyPair)
        {
             ApiResponse<List<MarginLeverageTier>> localVarResponse = GetUserMarginTierWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        public ApiResponse<List<MarginLeverageTier>> GetUserMarginTierWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetUserMarginTier");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginLeverageTier>>("/margin/user/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        public async Task<List<MarginLeverageTier>> GetUserMarginTierAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginLeverageTier>> localVarResponse = await GetUserMarginTierAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the user&#39;s own leverage lending gradient in the current market 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        public async Task<ApiResponse<List<MarginLeverageTier>>> GetUserMarginTierAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetUserMarginTier");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginLeverageTier>>("/margin/user/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>List&lt;MarginLeverageTier&gt;</returns>
        public List<MarginLeverageTier> GetMarketMarginTier (string currencyPair)
        {
             ApiResponse<List<MarginLeverageTier>> localVarResponse = GetMarketMarginTierWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of List&lt;MarginLeverageTier&gt;</returns>
        public ApiResponse<List<MarginLeverageTier>> GetMarketMarginTierWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetMarketMarginTier");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginLeverageTier>>("/margin/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of List&lt;MarginLeverageTier&gt;</returns>
        public async Task<List<MarginLeverageTier>> GetMarketMarginTierAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginLeverageTier>> localVarResponse = await GetMarketMarginTierAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the current market leverage lending gradient 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (List&lt;MarginLeverageTier&gt;)</returns>
        public async Task<ApiResponse<List<MarginLeverageTier>>> GetMarketMarginTierAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling MarginApi->GetMarketMarginTier");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginLeverageTier>>("/margin/loan_margin_tiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketMarginTier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns></returns>
        public void SetUserMarketLeverage (MarginMarketLeverage marginMarketLeverage)
        {
             SetUserMarketLeverageWithHttpInfo(marginMarketLeverage);
        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetUserMarketLeverageWithHttpInfo (MarginMarketLeverage marginMarketLeverage)
        {
            // verify the required parameter 'marginMarketLeverage' is set
            if (marginMarketLeverage == null)
                throw new ApiException(400, "Missing required parameter 'marginMarketLeverage' when calling MarginApi->SetUserMarketLeverage");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = marginMarketLeverage;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/margin/leverage/user_market_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserMarketLeverage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of void</returns>
        public async Task SetUserMarketLeverageAsync (MarginMarketLeverage marginMarketLeverage)
        {
             await SetUserMarketLeverageAsyncWithHttpInfo(marginMarketLeverage);

        }

        /// <summary>
        /// Set the user market leverage multiple 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marginMarketLeverage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SetUserMarketLeverageAsyncWithHttpInfo (MarginMarketLeverage marginMarketLeverage)
        {
            // verify the required parameter 'marginMarketLeverage' is set
            if (marginMarketLeverage == null)
                throw new ApiException(400, "Missing required parameter 'marginMarketLeverage' when calling MarginApi->SetUserMarketLeverage");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = marginMarketLeverage;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/margin/leverage/user_market_setting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserMarketLeverage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>List&lt;MarginAccount&gt;</returns>
        public List<MarginAccount> ListMarginUserAccount (string currencyPair = default(string))
        {
             ApiResponse<List<MarginAccount>> localVarResponse = ListMarginUserAccountWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>ApiResponse of List&lt;MarginAccount&gt;</returns>
        public ApiResponse<List<MarginAccount>> ListMarginUserAccountWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MarginAccount>>("/margin/user/account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginUserAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of List&lt;MarginAccount&gt;</returns>
        public async Task<List<MarginAccount>> ListMarginUserAccountAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MarginAccount>> localVarResponse = await ListMarginUserAccountAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the user&#39;s leverage account list Support querying risk rate per position account and margin rate per position account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MarginAccount&gt;)</returns>
        public async Task<ApiResponse<List<MarginAccount>>> ListMarginUserAccountAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MarginAccount>>("/margin/user/account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMarginUserAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginLoan&gt;</returns>
        public List<CrossMarginLoan> ListCrossMarginLoans (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             ApiResponse<List<CrossMarginLoan>> localVarResponse = ListCrossMarginLoansWithHttpInfo(status, currency, limit, offset, reverse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginLoan&gt;</returns>
        public ApiResponse<List<CrossMarginLoan>> ListCrossMarginLoansWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CrossMarginLoan>>("/margin/cross/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginLoan&gt;</returns>
        public async Task<List<CrossMarginLoan>> ListCrossMarginLoansAsync (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginLoan>> localVarResponse = await ListCrossMarginLoansAsyncWithHttpInfo(status, currency, limit, offset, reverse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List cross margin borrow history. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status. Supported values are 2 and 3. (deprecated.)</param>
        /// <param name="currency">Filter by currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginLoan&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginLoan>>> ListCrossMarginLoansAsyncWithHttpInfo (int status, string currency = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CrossMarginLoan>>("/margin/cross/loans", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginLoans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>List&lt;CrossMarginRepayment&gt;</returns>
        public List<CrossMarginRepayment> ListCrossMarginRepayments (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             ApiResponse<List<CrossMarginRepayment>> localVarResponse = ListCrossMarginRepaymentsWithHttpInfo(currency, loanId, limit, offset, reverse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;CrossMarginRepayment&gt;</returns>
        public ApiResponse<List<CrossMarginRepayment>> ListCrossMarginRepaymentsWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (loanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "loan_id", loanId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CrossMarginRepayment>>("/margin/cross/repayments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginRepayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of List&lt;CrossMarginRepayment&gt;</returns>
        public async Task<List<CrossMarginRepayment>> ListCrossMarginRepaymentsAsync (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CrossMarginRepayment>> localVarResponse = await ListCrossMarginRepaymentsAsyncWithHttpInfo(currency, loanId, limit, offset, reverse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve cross margin repayments. (deprecated) Sort by creation time in descending order by default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="loanId"> (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <param name="reverse">Whether to sort in descending order, which is the default. Set &#x60;reverse&#x3D;false&#x60; to return ascending results (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;CrossMarginRepayment&gt;)</returns>
        public async Task<ApiResponse<List<CrossMarginRepayment>>> ListCrossMarginRepaymentsAsyncWithHttpInfo (string currency = default(string), string loanId = default(string), int? limit = default(int?), int? offset = default(int?), bool? reverse = default(bool?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (loanId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "loan_id", loanId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CrossMarginRepayment>>("/margin/cross/repayments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCrossMarginRepayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
