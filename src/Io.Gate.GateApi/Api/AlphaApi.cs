/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlphaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// API for Alpha Accounts
        /// </summary>
        /// <remarks>
        /// Query Position Assets
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AccountsResponse&gt;</returns>
        List<AccountsResponse> ListAlphaAccounts ();

        /// <summary>
        /// API for Alpha Accounts
        /// </summary>
        /// <remarks>
        /// Query Position Assets
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AccountsResponse&gt;</returns>
        ApiResponse<List<AccountsResponse>> ListAlphaAccountsWithHttpInfo ();
        /// <summary>
        /// Alpha Asset Transaction API
        /// </summary>
        /// <remarks>
        /// Query Asset Transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>List&lt;AccountBookResponse&gt;</returns>
        List<AccountBookResponse> ListAlphaAccountBook (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Alpha Asset Transaction API
        /// </summary>
        /// <remarks>
        /// Query Asset Transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>ApiResponse of List&lt;AccountBookResponse&gt;</returns>
        ApiResponse<List<AccountBookResponse>> ListAlphaAccountBookWithHttpInfo (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Alpha Quotation API
        /// </summary>
        /// <remarks>
        /// The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>QuoteResponse</returns>
        QuoteResponse QuoteAlphaOrder (QuoteRequest quoteRequest);

        /// <summary>
        /// Alpha Quotation API
        /// </summary>
        /// <remarks>
        /// The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>ApiResponse of QuoteResponse</returns>
        ApiResponse<QuoteResponse> QuoteAlphaOrderWithHttpInfo (QuoteRequest quoteRequest);
        /// <summary>
        /// Alpha 查询订单列表接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;OrderResponse&gt;</returns>
        List<OrderResponse> ListAlphaOrder (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// Alpha 查询订单列表接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;OrderResponse&gt;</returns>
        ApiResponse<List<OrderResponse>> ListAlphaOrderWithHttpInfo (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Alpha Order Placement API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>PlaceOrderResponse</returns>
        PlaceOrderResponse PlaceAlphaOrder (PlaceOrderRequest placeOrderRequest);

        /// <summary>
        /// Alpha Order Placement API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>ApiResponse of PlaceOrderResponse</returns>
        ApiResponse<PlaceOrderResponse> PlaceAlphaOrderWithHttpInfo (PlaceOrderRequest placeOrderRequest);
        /// <summary>
        /// Alpha 查询单个订单接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderResponse</returns>
        OrderResponse GetAlphaOrder (string orderId);

        /// <summary>
        /// Alpha 查询单个订单接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> GetAlphaOrderWithHttpInfo (string orderId);
        /// <summary>
        /// 查询币种信息
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;Currency2&gt;</returns>
        List<Currency2> ListAlphaCurrencies (string currency = default(string), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// 查询币种信息
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;Currency2&gt;</returns>
        ApiResponse<List<Currency2>> ListAlphaCurrenciesWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// 查询币种ticker
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;Ticker2&gt;</returns>
        List<Ticker2> ListAlphaTickers (string currency = default(string), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// 查询币种ticker
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;Ticker2&gt;</returns>
        ApiResponse<List<Ticker2>> ListAlphaTickersWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlphaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// API for Alpha Accounts
        /// </summary>
        /// <remarks>
        /// Query Position Assets
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AccountsResponse&gt;</returns>
        Task<List<AccountsResponse>> ListAlphaAccountsAsync ();

        /// <summary>
        /// API for Alpha Accounts
        /// </summary>
        /// <remarks>
        /// Query Position Assets
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AccountsResponse&gt;)</returns>
        Task<ApiResponse<List<AccountsResponse>>> ListAlphaAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// Alpha Asset Transaction API
        /// </summary>
        /// <remarks>
        /// Query Asset Transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>Task of List&lt;AccountBookResponse&gt;</returns>
        Task<List<AccountBookResponse>> ListAlphaAccountBookAsync (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Alpha Asset Transaction API
        /// </summary>
        /// <remarks>
        /// Query Asset Transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AccountBookResponse&gt;)</returns>
        Task<ApiResponse<List<AccountBookResponse>>> ListAlphaAccountBookAsyncWithHttpInfo (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Alpha Quotation API
        /// </summary>
        /// <remarks>
        /// The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>Task of QuoteResponse</returns>
        Task<QuoteResponse> QuoteAlphaOrderAsync (QuoteRequest quoteRequest);

        /// <summary>
        /// Alpha Quotation API
        /// </summary>
        /// <remarks>
        /// The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>Task of ApiResponse (QuoteResponse)</returns>
        Task<ApiResponse<QuoteResponse>> QuoteAlphaOrderAsyncWithHttpInfo (QuoteRequest quoteRequest);
        /// <summary>
        /// Alpha 查询订单列表接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;OrderResponse&gt;</returns>
        Task<List<OrderResponse>> ListAlphaOrderAsync (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// Alpha 查询订单列表接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderResponse&gt;)</returns>
        Task<ApiResponse<List<OrderResponse>>> ListAlphaOrderAsyncWithHttpInfo (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Alpha Order Placement API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>Task of PlaceOrderResponse</returns>
        Task<PlaceOrderResponse> PlaceAlphaOrderAsync (PlaceOrderRequest placeOrderRequest);

        /// <summary>
        /// Alpha Order Placement API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>Task of ApiResponse (PlaceOrderResponse)</returns>
        Task<ApiResponse<PlaceOrderResponse>> PlaceAlphaOrderAsyncWithHttpInfo (PlaceOrderRequest placeOrderRequest);
        /// <summary>
        /// Alpha 查询单个订单接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderResponse</returns>
        Task<OrderResponse> GetAlphaOrderAsync (string orderId);

        /// <summary>
        /// Alpha 查询单个订单接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        Task<ApiResponse<OrderResponse>> GetAlphaOrderAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// 查询币种信息
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;Currency2&gt;</returns>
        Task<List<Currency2>> ListAlphaCurrenciesAsync (string currency = default(string), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// 查询币种信息
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;Currency2&gt;)</returns>
        Task<ApiResponse<List<Currency2>>> ListAlphaCurrenciesAsyncWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// 查询币种ticker
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;Ticker2&gt;</returns>
        Task<List<Ticker2>> ListAlphaTickersAsync (string currency = default(string), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// 查询币种ticker
        /// </summary>
        /// <remarks>
        /// When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticker2&gt;)</returns>
        Task<ApiResponse<List<Ticker2>>> ListAlphaTickersAsyncWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlphaApi : IAlphaApiSync, IAlphaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlphaApi : IAlphaApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlphaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlphaApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlphaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlphaApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlphaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlphaApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlphaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AlphaApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// API for Alpha Accounts Query Position Assets
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AccountsResponse&gt;</returns>
        public List<AccountsResponse> ListAlphaAccounts ()
        {
             ApiResponse<List<AccountsResponse>> localVarResponse = ListAlphaAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// API for Alpha Accounts Query Position Assets
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AccountsResponse&gt;</returns>
        public ApiResponse<List<AccountsResponse>> ListAlphaAccountsWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AccountsResponse>>("/alpha/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// API for Alpha Accounts Query Position Assets
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AccountsResponse&gt;</returns>
        public async Task<List<AccountsResponse>> ListAlphaAccountsAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<AccountsResponse>> localVarResponse = await ListAlphaAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// API for Alpha Accounts Query Position Assets
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AccountsResponse&gt;)</returns>
        public async Task<ApiResponse<List<AccountsResponse>>> ListAlphaAccountsAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AccountsResponse>>("/alpha/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha Asset Transaction API Query Asset Transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>List&lt;AccountBookResponse&gt;</returns>
        public List<AccountBookResponse> ListAlphaAccountBook (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<AccountBookResponse>> localVarResponse = ListAlphaAccountBookWithHttpInfo(from, to, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alpha Asset Transaction API Query Asset Transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>ApiResponse of List&lt;AccountBookResponse&gt;</returns>
        public ApiResponse<List<AccountBookResponse>> ListAlphaAccountBookWithHttpInfo (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AccountBookResponse>>("/alpha/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha Asset Transaction API Query Asset Transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>Task of List&lt;AccountBookResponse&gt;</returns>
        public async Task<List<AccountBookResponse>> ListAlphaAccountBookAsync (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<AccountBookResponse>> localVarResponse = await ListAlphaAccountBookAsyncWithHttpInfo(from, to, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alpha Asset Transaction API Query Asset Transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start timestamp of the query</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="limit">The maximum number of items per page is 100 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AccountBookResponse&gt;)</returns>
        public async Task<ApiResponse<List<AccountBookResponse>>> ListAlphaAccountBookAsyncWithHttpInfo (long from, long? to = default(long?), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AccountBookResponse>>("/alpha/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha Quotation API The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>QuoteResponse</returns>
        public QuoteResponse QuoteAlphaOrder (QuoteRequest quoteRequest)
        {
             ApiResponse<QuoteResponse> localVarResponse = QuoteAlphaOrderWithHttpInfo(quoteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alpha Quotation API The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>ApiResponse of QuoteResponse</returns>
        public ApiResponse<QuoteResponse> QuoteAlphaOrderWithHttpInfo (QuoteRequest quoteRequest)
        {
            // verify the required parameter 'quoteRequest' is set
            if (quoteRequest == null)
                throw new ApiException(400, "Missing required parameter 'quoteRequest' when calling AlphaApi->QuoteAlphaOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = quoteRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<QuoteResponse>("/alpha/quote", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuoteAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha Quotation API The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>Task of QuoteResponse</returns>
        public async Task<QuoteResponse> QuoteAlphaOrderAsync (QuoteRequest quoteRequest)
        {
             Io.Gate.GateApi.Client.ApiResponse<QuoteResponse> localVarResponse = await QuoteAlphaOrderAsyncWithHttpInfo(quoteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alpha Quotation API The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteRequest"></param>
        /// <returns>Task of ApiResponse (QuoteResponse)</returns>
        public async Task<ApiResponse<QuoteResponse>> QuoteAlphaOrderAsyncWithHttpInfo (QuoteRequest quoteRequest)
        {
            // verify the required parameter 'quoteRequest' is set
            if (quoteRequest == null)
                throw new ApiException(400, "Missing required parameter 'quoteRequest' when calling AlphaApi->QuoteAlphaOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = quoteRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<QuoteResponse>("/alpha/quote", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuoteAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha 查询订单列表接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;OrderResponse&gt;</returns>
        public List<OrderResponse> ListAlphaOrder (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?))
        {
             ApiResponse<List<OrderResponse>> localVarResponse = ListAlphaOrderWithHttpInfo(currency, side, status, from, to, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alpha 查询订单列表接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;OrderResponse&gt;</returns>
        public ApiResponse<List<OrderResponse>> ListAlphaOrderWithHttpInfo (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AlphaApi->ListAlphaOrder");

            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling AlphaApi->ListAlphaOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderResponse>>("/alpha/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha 查询订单列表接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;OrderResponse&gt;</returns>
        public async Task<List<OrderResponse>> ListAlphaOrderAsync (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OrderResponse>> localVarResponse = await ListAlphaOrderAsyncWithHttpInfo(currency, side, status, from, to, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alpha 查询订单列表接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Trading Symbol</param>
        /// <param name="side">买单或者卖单 - buy - sell</param>
        /// <param name="status">Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete</param>
        /// <param name="from">查询订单的起始时间 (optional)</param>
        /// <param name="to">查询订单的结束时间，不指定则默认为当前时间 (optional)</param>
        /// <param name="limit">Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderResponse&gt;)</returns>
        public async Task<ApiResponse<List<OrderResponse>>> ListAlphaOrderAsyncWithHttpInfo (string currency, string side, int status, long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? page = default(int?))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AlphaApi->ListAlphaOrder");

            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling AlphaApi->ListAlphaOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderResponse>>("/alpha/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha Order Placement API 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>PlaceOrderResponse</returns>
        public PlaceOrderResponse PlaceAlphaOrder (PlaceOrderRequest placeOrderRequest)
        {
             ApiResponse<PlaceOrderResponse> localVarResponse = PlaceAlphaOrderWithHttpInfo(placeOrderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alpha Order Placement API 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>ApiResponse of PlaceOrderResponse</returns>
        public ApiResponse<PlaceOrderResponse> PlaceAlphaOrderWithHttpInfo (PlaceOrderRequest placeOrderRequest)
        {
            // verify the required parameter 'placeOrderRequest' is set
            if (placeOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'placeOrderRequest' when calling AlphaApi->PlaceAlphaOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = placeOrderRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaceOrderResponse>("/alpha/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlaceAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha Order Placement API 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>Task of PlaceOrderResponse</returns>
        public async Task<PlaceOrderResponse> PlaceAlphaOrderAsync (PlaceOrderRequest placeOrderRequest)
        {
             Io.Gate.GateApi.Client.ApiResponse<PlaceOrderResponse> localVarResponse = await PlaceAlphaOrderAsyncWithHttpInfo(placeOrderRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alpha Order Placement API 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeOrderRequest"></param>
        /// <returns>Task of ApiResponse (PlaceOrderResponse)</returns>
        public async Task<ApiResponse<PlaceOrderResponse>> PlaceAlphaOrderAsyncWithHttpInfo (PlaceOrderRequest placeOrderRequest)
        {
            // verify the required parameter 'placeOrderRequest' is set
            if (placeOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'placeOrderRequest' when calling AlphaApi->PlaceAlphaOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = placeOrderRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaceOrderResponse>("/alpha/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlaceAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha 查询单个订单接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse GetAlphaOrder (string orderId)
        {
             ApiResponse<OrderResponse> localVarResponse = GetAlphaOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alpha 查询单个订单接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse<OrderResponse> GetAlphaOrderWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling AlphaApi->GetAlphaOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_id", orderId));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderResponse>("/alpha/order", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alpha 查询单个订单接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderResponse</returns>
        public async Task<OrderResponse> GetAlphaOrderAsync (string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<OrderResponse> localVarResponse = await GetAlphaOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alpha 查询单个订单接口 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async Task<ApiResponse<OrderResponse>> GetAlphaOrderAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling AlphaApi->GetAlphaOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_id", orderId));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderResponse>("/alpha/order", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlphaOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询币种信息 When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;Currency2&gt;</returns>
        public List<Currency2> ListAlphaCurrencies (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {
             ApiResponse<List<Currency2>> localVarResponse = ListAlphaCurrenciesWithHttpInfo(currency, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询币种信息 When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;Currency2&gt;</returns>
        public ApiResponse<List<Currency2>> ListAlphaCurrenciesWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Currency2>>("/alpha/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询币种信息 When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;Currency2&gt;</returns>
        public async Task<List<Currency2>> ListAlphaCurrenciesAsync (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Currency2>> localVarResponse = await ListAlphaCurrenciesAsyncWithHttpInfo(currency, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询币种信息 When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">根据币种符号查询币种信息 (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;Currency2&gt;)</returns>
        public async Task<ApiResponse<List<Currency2>>> ListAlphaCurrenciesAsyncWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Currency2>>("/alpha/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询币种ticker When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;Ticker2&gt;</returns>
        public List<Ticker2> ListAlphaTickers (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {
             ApiResponse<List<Ticker2>> localVarResponse = ListAlphaTickersWithHttpInfo(currency, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询币种ticker When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;Ticker2&gt;</returns>
        public ApiResponse<List<Ticker2>> ListAlphaTickersWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Ticker2>>("/alpha/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询币种ticker When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;Ticker2&gt;</returns>
        public async Task<List<Ticker2>> ListAlphaTickersAsync (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Ticker2>> localVarResponse = await ListAlphaTickersAsyncWithHttpInfo(currency, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询币种ticker When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticker2&gt;)</returns>
        public async Task<ApiResponse<List<Ticker2>>> ListAlphaTickersAsyncWithHttpInfo (string currency = default(string), int? limit = default(int?), int? page = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Ticker2>>("/alpha/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAlphaTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
