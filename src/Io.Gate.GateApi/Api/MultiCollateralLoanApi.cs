/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultiCollateralLoanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Multi-Collateral Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>List&lt;MultiCollateralOrder&gt;</returns>
        List<MultiCollateralOrder> ListMultiCollateralOrders (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string));

        /// <summary>
        /// List Multi-Collateral Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>ApiResponse of List&lt;MultiCollateralOrder&gt;</returns>
        ApiResponse<List<MultiCollateralOrder>> ListMultiCollateralOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string));
        /// <summary>
        /// Create Multi-Collateral Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>OrderResp</returns>
        OrderResp CreateMultiCollateral (CreateMultiCollateralOrder createMultiCollateralOrder);

        /// <summary>
        /// Create Multi-Collateral Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>ApiResponse of OrderResp</returns>
        ApiResponse<OrderResp> CreateMultiCollateralWithHttpInfo (CreateMultiCollateralOrder createMultiCollateralOrder);
        /// <summary>
        /// Get Multi-Collateral Order Detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>MultiCollateralOrder</returns>
        MultiCollateralOrder GetMultiCollateralOrderDetail (string orderId);

        /// <summary>
        /// Get Multi-Collateral Order Detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of MultiCollateralOrder</returns>
        ApiResponse<MultiCollateralOrder> GetMultiCollateralOrderDetailWithHttpInfo (string orderId);
        /// <summary>
        /// List Multi-Collateral Repay Records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;MultiRepayRecord&gt;</returns>
        List<MultiRepayRecord> ListMultiRepayRecords (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List Multi-Collateral Repay Records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;MultiRepayRecord&gt;</returns>
        ApiResponse<List<MultiRepayRecord>> ListMultiRepayRecordsWithHttpInfo (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Repay Multi-Collateral Loan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>MultiRepayResp</returns>
        MultiRepayResp RepayMultiCollateralLoan (RepayMultiLoan repayMultiLoan);

        /// <summary>
        /// Repay Multi-Collateral Loan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>ApiResponse of MultiRepayResp</returns>
        ApiResponse<MultiRepayResp> RepayMultiCollateralLoanWithHttpInfo (RepayMultiLoan repayMultiLoan);
        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>List&lt;MultiCollateralRecord&gt;</returns>
        List<MultiCollateralRecord> ListMultiCollateralRecords (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string));

        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>ApiResponse of List&lt;MultiCollateralRecord&gt;</returns>
        ApiResponse<List<MultiCollateralRecord>> ListMultiCollateralRecordsWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string));
        /// <summary>
        /// Operate Multi-Collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>CollateralAdjustRes</returns>
        CollateralAdjustRes OperateMultiCollateral (CollateralAdjust collateralAdjust);

        /// <summary>
        /// Operate Multi-Collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>ApiResponse of CollateralAdjustRes</returns>
        ApiResponse<CollateralAdjustRes> OperateMultiCollateralWithHttpInfo (CollateralAdjust collateralAdjust);
        /// <summary>
        /// List User Currency Quota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>List&lt;CurrencyQuota&gt;</returns>
        List<CurrencyQuota> ListUserCurrencyQuota (string type, string currency);

        /// <summary>
        /// List User Currency Quota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>ApiResponse of List&lt;CurrencyQuota&gt;</returns>
        ApiResponse<List<CurrencyQuota>> ListUserCurrencyQuotaWithHttpInfo (string type, string currency);
        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MultiCollateralCurrency</returns>
        MultiCollateralCurrency ListMultiCollateralCurrencies ();

        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MultiCollateralCurrency</returns>
        ApiResponse<MultiCollateralCurrency> ListMultiCollateralCurrenciesWithHttpInfo ();
        /// <summary>
        /// Get Multi-Collateral ratio
        /// </summary>
        /// <remarks>
        /// The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollateralLtv</returns>
        CollateralLtv GetMultiCollateralLtv ();

        /// <summary>
        /// Get Multi-Collateral ratio
        /// </summary>
        /// <remarks>
        /// The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollateralLtv</returns>
        ApiResponse<CollateralLtv> GetMultiCollateralLtvWithHttpInfo ();
        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CollateralFixRate&gt;</returns>
        List<CollateralFixRate> GetMultiCollateralFixRate ();

        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CollateralFixRate&gt;</returns>
        ApiResponse<List<CollateralFixRate>> GetMultiCollateralFixRateWithHttpInfo ();
        /// <summary>
        /// Query the current interest rate of the currency
        /// </summary>
        /// <remarks>
        /// Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>List&lt;CollateralCurrentRate&gt;</returns>
        List<CollateralCurrentRate> GetMultiCollateralCurrentRate (List<string> currencies, string vipLevel = default(string));

        /// <summary>
        /// Query the current interest rate of the currency
        /// </summary>
        /// <remarks>
        /// Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of List&lt;CollateralCurrentRate&gt;</returns>
        ApiResponse<List<CollateralCurrentRate>> GetMultiCollateralCurrentRateWithHttpInfo (List<string> currencies, string vipLevel = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultiCollateralLoanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Multi-Collateral Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>Task of List&lt;MultiCollateralOrder&gt;</returns>
        Task<List<MultiCollateralOrder>> ListMultiCollateralOrdersAsync (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string));

        /// <summary>
        /// List Multi-Collateral Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MultiCollateralOrder&gt;)</returns>
        Task<ApiResponse<List<MultiCollateralOrder>>> ListMultiCollateralOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string));
        /// <summary>
        /// Create Multi-Collateral Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>Task of OrderResp</returns>
        Task<OrderResp> CreateMultiCollateralAsync (CreateMultiCollateralOrder createMultiCollateralOrder);

        /// <summary>
        /// Create Multi-Collateral Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>Task of ApiResponse (OrderResp)</returns>
        Task<ApiResponse<OrderResp>> CreateMultiCollateralAsyncWithHttpInfo (CreateMultiCollateralOrder createMultiCollateralOrder);
        /// <summary>
        /// Get Multi-Collateral Order Detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of MultiCollateralOrder</returns>
        Task<MultiCollateralOrder> GetMultiCollateralOrderDetailAsync (string orderId);

        /// <summary>
        /// Get Multi-Collateral Order Detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (MultiCollateralOrder)</returns>
        Task<ApiResponse<MultiCollateralOrder>> GetMultiCollateralOrderDetailAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// List Multi-Collateral Repay Records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;MultiRepayRecord&gt;</returns>
        Task<List<MultiRepayRecord>> ListMultiRepayRecordsAsync (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List Multi-Collateral Repay Records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MultiRepayRecord&gt;)</returns>
        Task<ApiResponse<List<MultiRepayRecord>>> ListMultiRepayRecordsAsyncWithHttpInfo (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Repay Multi-Collateral Loan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>Task of MultiRepayResp</returns>
        Task<MultiRepayResp> RepayMultiCollateralLoanAsync (RepayMultiLoan repayMultiLoan);

        /// <summary>
        /// Repay Multi-Collateral Loan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>Task of ApiResponse (MultiRepayResp)</returns>
        Task<ApiResponse<MultiRepayResp>> RepayMultiCollateralLoanAsyncWithHttpInfo (RepayMultiLoan repayMultiLoan);
        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of List&lt;MultiCollateralRecord&gt;</returns>
        Task<List<MultiCollateralRecord>> ListMultiCollateralRecordsAsync (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string));

        /// <summary>
        /// Query collateral adjustment records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MultiCollateralRecord&gt;)</returns>
        Task<ApiResponse<List<MultiCollateralRecord>>> ListMultiCollateralRecordsAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string));
        /// <summary>
        /// Operate Multi-Collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>Task of CollateralAdjustRes</returns>
        Task<CollateralAdjustRes> OperateMultiCollateralAsync (CollateralAdjust collateralAdjust);

        /// <summary>
        /// Operate Multi-Collateral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>Task of ApiResponse (CollateralAdjustRes)</returns>
        Task<ApiResponse<CollateralAdjustRes>> OperateMultiCollateralAsyncWithHttpInfo (CollateralAdjust collateralAdjust);
        /// <summary>
        /// List User Currency Quota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>Task of List&lt;CurrencyQuota&gt;</returns>
        Task<List<CurrencyQuota>> ListUserCurrencyQuotaAsync (string type, string currency);

        /// <summary>
        /// List User Currency Quota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyQuota&gt;)</returns>
        Task<ApiResponse<List<CurrencyQuota>>> ListUserCurrencyQuotaAsyncWithHttpInfo (string type, string currency);
        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MultiCollateralCurrency</returns>
        Task<MultiCollateralCurrency> ListMultiCollateralCurrenciesAsync ();

        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MultiCollateralCurrency)</returns>
        Task<ApiResponse<MultiCollateralCurrency>> ListMultiCollateralCurrenciesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Multi-Collateral ratio
        /// </summary>
        /// <remarks>
        /// The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CollateralLtv</returns>
        Task<CollateralLtv> GetMultiCollateralLtvAsync ();

        /// <summary>
        /// Get Multi-Collateral ratio
        /// </summary>
        /// <remarks>
        /// The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CollateralLtv)</returns>
        Task<ApiResponse<CollateralLtv>> GetMultiCollateralLtvAsyncWithHttpInfo ();
        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CollateralFixRate&gt;</returns>
        Task<List<CollateralFixRate>> GetMultiCollateralFixRateAsync ();

        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CollateralFixRate&gt;)</returns>
        Task<ApiResponse<List<CollateralFixRate>>> GetMultiCollateralFixRateAsyncWithHttpInfo ();
        /// <summary>
        /// Query the current interest rate of the currency
        /// </summary>
        /// <remarks>
        /// Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of List&lt;CollateralCurrentRate&gt;</returns>
        Task<List<CollateralCurrentRate>> GetMultiCollateralCurrentRateAsync (List<string> currencies, string vipLevel = default(string));

        /// <summary>
        /// Query the current interest rate of the currency
        /// </summary>
        /// <remarks>
        /// Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralCurrentRate&gt;)</returns>
        Task<ApiResponse<List<CollateralCurrentRate>>> GetMultiCollateralCurrentRateAsyncWithHttpInfo (List<string> currencies, string vipLevel = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultiCollateralLoanApi : IMultiCollateralLoanApiSync, IMultiCollateralLoanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MultiCollateralLoanApi : IMultiCollateralLoanApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCollateralLoanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultiCollateralLoanApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCollateralLoanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultiCollateralLoanApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCollateralLoanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MultiCollateralLoanApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCollateralLoanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MultiCollateralLoanApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Multi-Collateral Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>List&lt;MultiCollateralOrder&gt;</returns>
        public List<MultiCollateralOrder> ListMultiCollateralOrders (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string))
        {
             ApiResponse<List<MultiCollateralOrder>> localVarResponse = ListMultiCollateralOrdersWithHttpInfo(page, limit, sort, orderType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Multi-Collateral Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>ApiResponse of List&lt;MultiCollateralOrder&gt;</returns>
        public ApiResponse<List<MultiCollateralOrder>> ListMultiCollateralOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_type", orderType));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MultiCollateralOrder>>("/loan/multi_collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiCollateralOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Multi-Collateral Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>Task of List&lt;MultiCollateralOrder&gt;</returns>
        public async Task<List<MultiCollateralOrder>> ListMultiCollateralOrdersAsync (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MultiCollateralOrder>> localVarResponse = await ListMultiCollateralOrdersAsyncWithHttpInfo(page, limit, sort, orderType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Multi-Collateral Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="sort">Sort types: time_desc - default sorting by creation time in descending order, ltv_asc - ascending order of ltv, ltv_desc - descending order of ltv. (optional)</param>
        /// <param name="orderType">Order type, current - query current orders, fixed - query fixed orders. If not specified, default to querying current orders (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MultiCollateralOrder&gt;)</returns>
        public async Task<ApiResponse<List<MultiCollateralOrder>>> ListMultiCollateralOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), string sort = default(string), string orderType = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_type", orderType));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MultiCollateralOrder>>("/loan/multi_collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiCollateralOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Multi-Collateral Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>OrderResp</returns>
        public OrderResp CreateMultiCollateral (CreateMultiCollateralOrder createMultiCollateralOrder)
        {
             ApiResponse<OrderResp> localVarResponse = CreateMultiCollateralWithHttpInfo(createMultiCollateralOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Multi-Collateral Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>ApiResponse of OrderResp</returns>
        public ApiResponse<OrderResp> CreateMultiCollateralWithHttpInfo (CreateMultiCollateralOrder createMultiCollateralOrder)
        {
            // verify the required parameter 'createMultiCollateralOrder' is set
            if (createMultiCollateralOrder == null)
                throw new ApiException(400, "Missing required parameter 'createMultiCollateralOrder' when calling MultiCollateralLoanApi->CreateMultiCollateral");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createMultiCollateralOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderResp>("/loan/multi_collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMultiCollateral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Multi-Collateral Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>Task of OrderResp</returns>
        public async Task<OrderResp> CreateMultiCollateralAsync (CreateMultiCollateralOrder createMultiCollateralOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<OrderResp> localVarResponse = await CreateMultiCollateralAsyncWithHttpInfo(createMultiCollateralOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Multi-Collateral Order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMultiCollateralOrder"></param>
        /// <returns>Task of ApiResponse (OrderResp)</returns>
        public async Task<ApiResponse<OrderResp>> CreateMultiCollateralAsyncWithHttpInfo (CreateMultiCollateralOrder createMultiCollateralOrder)
        {
            // verify the required parameter 'createMultiCollateralOrder' is set
            if (createMultiCollateralOrder == null)
                throw new ApiException(400, "Missing required parameter 'createMultiCollateralOrder' when calling MultiCollateralLoanApi->CreateMultiCollateral");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = createMultiCollateralOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderResp>("/loan/multi_collateral/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMultiCollateral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Multi-Collateral Order Detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>MultiCollateralOrder</returns>
        public MultiCollateralOrder GetMultiCollateralOrderDetail (string orderId)
        {
             ApiResponse<MultiCollateralOrder> localVarResponse = GetMultiCollateralOrderDetailWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Multi-Collateral Order Detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>ApiResponse of MultiCollateralOrder</returns>
        public ApiResponse<MultiCollateralOrder> GetMultiCollateralOrderDetailWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling MultiCollateralLoanApi->GetMultiCollateralOrderDetail");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<MultiCollateralOrder>("/loan/multi_collateral/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralOrderDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Multi-Collateral Order Detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of MultiCollateralOrder</returns>
        public async Task<MultiCollateralOrder> GetMultiCollateralOrderDetailAsync (string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<MultiCollateralOrder> localVarResponse = await GetMultiCollateralOrderDetailAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Multi-Collateral Order Detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID returned on successful order creation</param>
        /// <returns>Task of ApiResponse (MultiCollateralOrder)</returns>
        public async Task<ApiResponse<MultiCollateralOrder>> GetMultiCollateralOrderDetailAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling MultiCollateralLoanApi->GetMultiCollateralOrderDetail");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MultiCollateralOrder>("/loan/multi_collateral/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralOrderDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Multi-Collateral Repay Records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;MultiRepayRecord&gt;</returns>
        public List<MultiRepayRecord> ListMultiRepayRecords (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<MultiRepayRecord>> localVarResponse = ListMultiRepayRecordsWithHttpInfo(type, borrowCurrency, page, limit, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Multi-Collateral Repay Records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;MultiRepayRecord&gt;</returns>
        public ApiResponse<List<MultiRepayRecord>> ListMultiRepayRecordsWithHttpInfo (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MultiCollateralLoanApi->ListMultiRepayRecords");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MultiRepayRecord>>("/loan/multi_collateral/repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiRepayRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Multi-Collateral Repay Records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;MultiRepayRecord&gt;</returns>
        public async Task<List<MultiRepayRecord>> ListMultiRepayRecordsAsync (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MultiRepayRecord>> localVarResponse = await ListMultiRepayRecordsAsyncWithHttpInfo(type, borrowCurrency, page, limit, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Multi-Collateral Repay Records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Operation type: repay - Regular repayment, liquidate - Liquidation</param>
        /// <param name="borrowCurrency">Borrowed currency (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MultiRepayRecord&gt;)</returns>
        public async Task<ApiResponse<List<MultiRepayRecord>>> ListMultiRepayRecordsAsyncWithHttpInfo (string type, string borrowCurrency = default(string), int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MultiCollateralLoanApi->ListMultiRepayRecords");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (borrowCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "borrow_currency", borrowCurrency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MultiRepayRecord>>("/loan/multi_collateral/repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiRepayRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repay Multi-Collateral Loan 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>MultiRepayResp</returns>
        public MultiRepayResp RepayMultiCollateralLoan (RepayMultiLoan repayMultiLoan)
        {
             ApiResponse<MultiRepayResp> localVarResponse = RepayMultiCollateralLoanWithHttpInfo(repayMultiLoan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Repay Multi-Collateral Loan 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>ApiResponse of MultiRepayResp</returns>
        public ApiResponse<MultiRepayResp> RepayMultiCollateralLoanWithHttpInfo (RepayMultiLoan repayMultiLoan)
        {
            // verify the required parameter 'repayMultiLoan' is set
            if (repayMultiLoan == null)
                throw new ApiException(400, "Missing required parameter 'repayMultiLoan' when calling MultiCollateralLoanApi->RepayMultiCollateralLoan");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = repayMultiLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<MultiRepayResp>("/loan/multi_collateral/repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepayMultiCollateralLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repay Multi-Collateral Loan 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>Task of MultiRepayResp</returns>
        public async Task<MultiRepayResp> RepayMultiCollateralLoanAsync (RepayMultiLoan repayMultiLoan)
        {
             Io.Gate.GateApi.Client.ApiResponse<MultiRepayResp> localVarResponse = await RepayMultiCollateralLoanAsyncWithHttpInfo(repayMultiLoan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Repay Multi-Collateral Loan 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repayMultiLoan"></param>
        /// <returns>Task of ApiResponse (MultiRepayResp)</returns>
        public async Task<ApiResponse<MultiRepayResp>> RepayMultiCollateralLoanAsyncWithHttpInfo (RepayMultiLoan repayMultiLoan)
        {
            // verify the required parameter 'repayMultiLoan' is set
            if (repayMultiLoan == null)
                throw new ApiException(400, "Missing required parameter 'repayMultiLoan' when calling MultiCollateralLoanApi->RepayMultiCollateralLoan");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = repayMultiLoan;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MultiRepayResp>("/loan/multi_collateral/repay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepayMultiCollateralLoan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>List&lt;MultiCollateralRecord&gt;</returns>
        public List<MultiCollateralRecord> ListMultiCollateralRecords (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string))
        {
             ApiResponse<List<MultiCollateralRecord>> localVarResponse = ListMultiCollateralRecordsWithHttpInfo(page, limit, from, to, collateralCurrency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>ApiResponse of List&lt;MultiCollateralRecord&gt;</returns>
        public ApiResponse<List<MultiCollateralRecord>> ListMultiCollateralRecordsWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MultiCollateralRecord>>("/loan/multi_collateral/mortgage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiCollateralRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of List&lt;MultiCollateralRecord&gt;</returns>
        public async Task<List<MultiCollateralRecord>> ListMultiCollateralRecordsAsync (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<MultiCollateralRecord>> localVarResponse = await ListMultiCollateralRecordsAsyncWithHttpInfo(page, limit, from, to, collateralCurrency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query collateral adjustment records 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 10)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="collateralCurrency">Collateral (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MultiCollateralRecord&gt;)</returns>
        public async Task<ApiResponse<List<MultiCollateralRecord>>> ListMultiCollateralRecordsAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), long? from = default(long?), long? to = default(long?), string collateralCurrency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (collateralCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "collateral_currency", collateralCurrency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MultiCollateralRecord>>("/loan/multi_collateral/mortgage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiCollateralRecords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Operate Multi-Collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>CollateralAdjustRes</returns>
        public CollateralAdjustRes OperateMultiCollateral (CollateralAdjust collateralAdjust)
        {
             ApiResponse<CollateralAdjustRes> localVarResponse = OperateMultiCollateralWithHttpInfo(collateralAdjust);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Operate Multi-Collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>ApiResponse of CollateralAdjustRes</returns>
        public ApiResponse<CollateralAdjustRes> OperateMultiCollateralWithHttpInfo (CollateralAdjust collateralAdjust)
        {
            // verify the required parameter 'collateralAdjust' is set
            if (collateralAdjust == null)
                throw new ApiException(400, "Missing required parameter 'collateralAdjust' when calling MultiCollateralLoanApi->OperateMultiCollateral");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collateralAdjust;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<CollateralAdjustRes>("/loan/multi_collateral/mortgage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OperateMultiCollateral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Operate Multi-Collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>Task of CollateralAdjustRes</returns>
        public async Task<CollateralAdjustRes> OperateMultiCollateralAsync (CollateralAdjust collateralAdjust)
        {
             Io.Gate.GateApi.Client.ApiResponse<CollateralAdjustRes> localVarResponse = await OperateMultiCollateralAsyncWithHttpInfo(collateralAdjust);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Operate Multi-Collateral 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collateralAdjust"></param>
        /// <returns>Task of ApiResponse (CollateralAdjustRes)</returns>
        public async Task<ApiResponse<CollateralAdjustRes>> OperateMultiCollateralAsyncWithHttpInfo (CollateralAdjust collateralAdjust)
        {
            // verify the required parameter 'collateralAdjust' is set
            if (collateralAdjust == null)
                throw new ApiException(400, "Missing required parameter 'collateralAdjust' when calling MultiCollateralLoanApi->OperateMultiCollateral");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = collateralAdjust;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CollateralAdjustRes>("/loan/multi_collateral/mortgage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OperateMultiCollateral", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User Currency Quota 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>List&lt;CurrencyQuota&gt;</returns>
        public List<CurrencyQuota> ListUserCurrencyQuota (string type, string currency)
        {
             ApiResponse<List<CurrencyQuota>> localVarResponse = ListUserCurrencyQuotaWithHttpInfo(type, currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List User Currency Quota 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>ApiResponse of List&lt;CurrencyQuota&gt;</returns>
        public ApiResponse<List<CurrencyQuota>> ListUserCurrencyQuotaWithHttpInfo (string type, string currency)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MultiCollateralLoanApi->ListUserCurrencyQuota");

            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MultiCollateralLoanApi->ListUserCurrencyQuota");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CurrencyQuota>>("/loan/multi_collateral/currency_quota", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserCurrencyQuota", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User Currency Quota 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>Task of List&lt;CurrencyQuota&gt;</returns>
        public async Task<List<CurrencyQuota>> ListUserCurrencyQuotaAsync (string type, string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CurrencyQuota>> localVarResponse = await ListUserCurrencyQuotaAsyncWithHttpInfo(type, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List User Currency Quota 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Currency types: collateral - collateral currency, borrow - borrowing currency.</param>
        /// <param name="currency">When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.</param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyQuota&gt;)</returns>
        public async Task<ApiResponse<List<CurrencyQuota>>> ListUserCurrencyQuotaAsyncWithHttpInfo (string type, string currency)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MultiCollateralLoanApi->ListUserCurrencyQuota");

            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling MultiCollateralLoanApi->ListUserCurrencyQuota");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CurrencyQuota>>("/loan/multi_collateral/currency_quota", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserCurrencyQuota", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral  
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MultiCollateralCurrency</returns>
        public MultiCollateralCurrency ListMultiCollateralCurrencies ()
        {
             ApiResponse<MultiCollateralCurrency> localVarResponse = ListMultiCollateralCurrenciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral  
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MultiCollateralCurrency</returns>
        public ApiResponse<MultiCollateralCurrency> ListMultiCollateralCurrenciesWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<MultiCollateralCurrency>("/loan/multi_collateral/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiCollateralCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral  
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MultiCollateralCurrency</returns>
        public async Task<MultiCollateralCurrency> ListMultiCollateralCurrenciesAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<MultiCollateralCurrency> localVarResponse = await ListMultiCollateralCurrenciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query supported borrowing and collateral currencies in Multi-Collateral  
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MultiCollateralCurrency)</returns>
        public async Task<ApiResponse<MultiCollateralCurrency>> ListMultiCollateralCurrenciesAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MultiCollateralCurrency>("/loan/multi_collateral/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMultiCollateralCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Multi-Collateral ratio The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollateralLtv</returns>
        public CollateralLtv GetMultiCollateralLtv ()
        {
             ApiResponse<CollateralLtv> localVarResponse = GetMultiCollateralLtvWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Multi-Collateral ratio The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollateralLtv</returns>
        public ApiResponse<CollateralLtv> GetMultiCollateralLtvWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<CollateralLtv>("/loan/multi_collateral/ltv", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralLtv", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Multi-Collateral ratio The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CollateralLtv</returns>
        public async Task<CollateralLtv> GetMultiCollateralLtvAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<CollateralLtv> localVarResponse = await GetMultiCollateralLtvAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Multi-Collateral ratio The Multi-Collateral ratio is fixed, irrespective of the currency.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CollateralLtv)</returns>
        public async Task<ApiResponse<CollateralLtv>> GetMultiCollateralLtvAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollateralLtv>("/loan/multi_collateral/ltv", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralLtv", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CollateralFixRate&gt;</returns>
        public List<CollateralFixRate> GetMultiCollateralFixRate ()
        {
             ApiResponse<List<CollateralFixRate>> localVarResponse = GetMultiCollateralFixRateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CollateralFixRate&gt;</returns>
        public ApiResponse<List<CollateralFixRate>> GetMultiCollateralFixRateWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CollateralFixRate>>("/loan/multi_collateral/fixed_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralFixRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CollateralFixRate&gt;</returns>
        public async Task<List<CollateralFixRate>> GetMultiCollateralFixRateAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CollateralFixRate>> localVarResponse = await GetMultiCollateralFixRateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query fixed interest rates for the currency for 7 days and 30 days 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CollateralFixRate&gt;)</returns>
        public async Task<ApiResponse<List<CollateralFixRate>>> GetMultiCollateralFixRateAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CollateralFixRate>>("/loan/multi_collateral/fixed_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralFixRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the current interest rate of the currency Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>List&lt;CollateralCurrentRate&gt;</returns>
        public List<CollateralCurrentRate> GetMultiCollateralCurrentRate (List<string> currencies, string vipLevel = default(string))
        {
             ApiResponse<List<CollateralCurrentRate>> localVarResponse = GetMultiCollateralCurrentRateWithHttpInfo(currencies, vipLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the current interest rate of the currency Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of List&lt;CollateralCurrentRate&gt;</returns>
        public ApiResponse<List<CollateralCurrentRate>> GetMultiCollateralCurrentRateWithHttpInfo (List<string> currencies, string vipLevel = default(string))
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling MultiCollateralLoanApi->GetMultiCollateralCurrentRate");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));
            if (vipLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "vip_level", vipLevel));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CollateralCurrentRate>>("/loan/multi_collateral/current_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralCurrentRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the current interest rate of the currency Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of List&lt;CollateralCurrentRate&gt;</returns>
        public async Task<List<CollateralCurrentRate>> GetMultiCollateralCurrentRateAsync (List<string> currencies, string vipLevel = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CollateralCurrentRate>> localVarResponse = await GetMultiCollateralCurrentRateAsyncWithHttpInfo(currencies, vipLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the current interest rate of the currency Query the current interest rate of the currency in the last hour. The current interest rate is updated every hour.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencies">Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.</param>
        /// <param name="vipLevel">VIP level, defaults to 0 if not transferred (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;CollateralCurrentRate&gt;)</returns>
        public async Task<ApiResponse<List<CollateralCurrentRate>>> GetMultiCollateralCurrentRateAsyncWithHttpInfo (List<string> currencies, string vipLevel = default(string))
        {
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling MultiCollateralLoanApi->GetMultiCollateralCurrentRate");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "currencies", currencies));
            if (vipLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "vip_level", vipLevel));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CollateralCurrentRate>>("/loan/multi_collateral/current_rate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultiCollateralCurrentRate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
