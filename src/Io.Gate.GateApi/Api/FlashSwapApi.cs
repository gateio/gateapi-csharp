/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlashSwapApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap.
        /// </summary>
        /// <remarks>
        /// &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>List&lt;FlashSwapCurrencyPair&gt;</returns>
        List<FlashSwapCurrencyPair> ListFlashSwapCurrencyPair (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap.
        /// </summary>
        /// <remarks>
        /// &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>ApiResponse of List&lt;FlashSwapCurrencyPair&gt;</returns>
        ApiResponse<List<FlashSwapCurrencyPair>> ListFlashSwapCurrencyPairWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List all flash swap orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>List&lt;FlashSwapOrder&gt;</returns>
        List<FlashSwapOrder> ListFlashSwapOrders (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// List all flash swap orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;FlashSwapOrder&gt;</returns>
        ApiResponse<List<FlashSwapOrder>> ListFlashSwapOrdersWithHttpInfo (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Create a flash swap order.
        /// </summary>
        /// <remarks>
        /// Initiate a flash swap preview in advance because order creation requires a preview result
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>FlashSwapOrder</returns>
        FlashSwapOrder CreateFlashSwapOrder (FlashSwapOrderRequest flashSwapOrderRequest);

        /// <summary>
        /// Create a flash swap order.
        /// </summary>
        /// <remarks>
        /// Initiate a flash swap preview in advance because order creation requires a preview result
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>ApiResponse of FlashSwapOrder</returns>
        ApiResponse<FlashSwapOrder> CreateFlashSwapOrderWithHttpInfo (FlashSwapOrderRequest flashSwapOrderRequest);
        /// <summary>
        /// Get a single flash swap order&#39;s detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>FlashSwapOrder</returns>
        FlashSwapOrder GetFlashSwapOrder (int orderId);

        /// <summary>
        /// Get a single flash swap order&#39;s detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>ApiResponse of FlashSwapOrder</returns>
        ApiResponse<FlashSwapOrder> GetFlashSwapOrderWithHttpInfo (int orderId);
        /// <summary>
        /// Initiate a flash swap order preview.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>FlashSwapOrderPreview</returns>
        FlashSwapOrderPreview PreviewFlashSwapOrder (FlashSwapPreviewRequest flashSwapPreviewRequest);

        /// <summary>
        /// Initiate a flash swap order preview.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>ApiResponse of FlashSwapOrderPreview</returns>
        ApiResponse<FlashSwapOrderPreview> PreviewFlashSwapOrderWithHttpInfo (FlashSwapPreviewRequest flashSwapPreviewRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlashSwapApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap.
        /// </summary>
        /// <remarks>
        /// &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>Task of List&lt;FlashSwapCurrencyPair&gt;</returns>
        Task<List<FlashSwapCurrencyPair>> ListFlashSwapCurrencyPairAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap.
        /// </summary>
        /// <remarks>
        /// &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>Task of ApiResponse (List&lt;FlashSwapCurrencyPair&gt;)</returns>
        Task<ApiResponse<List<FlashSwapCurrencyPair>>> ListFlashSwapCurrencyPairAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// List all flash swap orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>Task of List&lt;FlashSwapOrder&gt;</returns>
        Task<List<FlashSwapOrder>> ListFlashSwapOrdersAsync (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// List all flash swap orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;FlashSwapOrder&gt;)</returns>
        Task<ApiResponse<List<FlashSwapOrder>>> ListFlashSwapOrdersAsyncWithHttpInfo (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Create a flash swap order.
        /// </summary>
        /// <remarks>
        /// Initiate a flash swap preview in advance because order creation requires a preview result
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>Task of FlashSwapOrder</returns>
        Task<FlashSwapOrder> CreateFlashSwapOrderAsync (FlashSwapOrderRequest flashSwapOrderRequest);

        /// <summary>
        /// Create a flash swap order.
        /// </summary>
        /// <remarks>
        /// Initiate a flash swap preview in advance because order creation requires a preview result
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>Task of ApiResponse (FlashSwapOrder)</returns>
        Task<ApiResponse<FlashSwapOrder>> CreateFlashSwapOrderAsyncWithHttpInfo (FlashSwapOrderRequest flashSwapOrderRequest);
        /// <summary>
        /// Get a single flash swap order&#39;s detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>Task of FlashSwapOrder</returns>
        Task<FlashSwapOrder> GetFlashSwapOrderAsync (int orderId);

        /// <summary>
        /// Get a single flash swap order&#39;s detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>Task of ApiResponse (FlashSwapOrder)</returns>
        Task<ApiResponse<FlashSwapOrder>> GetFlashSwapOrderAsyncWithHttpInfo (int orderId);
        /// <summary>
        /// Initiate a flash swap order preview.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>Task of FlashSwapOrderPreview</returns>
        Task<FlashSwapOrderPreview> PreviewFlashSwapOrderAsync (FlashSwapPreviewRequest flashSwapPreviewRequest);

        /// <summary>
        /// Initiate a flash swap order preview.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>Task of ApiResponse (FlashSwapOrderPreview)</returns>
        Task<ApiResponse<FlashSwapOrderPreview>> PreviewFlashSwapOrderAsyncWithHttpInfo (FlashSwapPreviewRequest flashSwapPreviewRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlashSwapApi : IFlashSwapApiSync, IFlashSwapApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FlashSwapApi : IFlashSwapApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlashSwapApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlashSwapApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlashSwapApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlashSwapApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlashSwapApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlashSwapApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlashSwapApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FlashSwapApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap. &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>List&lt;FlashSwapCurrencyPair&gt;</returns>
        public List<FlashSwapCurrencyPair> ListFlashSwapCurrencyPair (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<FlashSwapCurrencyPair>> localVarResponse = ListFlashSwapCurrencyPairWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap. &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>ApiResponse of List&lt;FlashSwapCurrencyPair&gt;</returns>
        public ApiResponse<List<FlashSwapCurrencyPair>> ListFlashSwapCurrencyPairWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FlashSwapCurrencyPair>>("/flash_swap/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFlashSwapCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap. &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>Task of List&lt;FlashSwapCurrencyPair&gt;</returns>
        public async Task<List<FlashSwapCurrencyPair>> ListFlashSwapCurrencyPairAsync (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FlashSwapCurrencyPair>> localVarResponse = await ListFlashSwapCurrencyPairAsyncWithHttpInfo(currency, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List All Supported Currency Pairs In Flash Swap. &#x60;BTC_GT&#x60; represents selling BTC and buying GT. The limits for each currency may vary across different currency pairs.  It is not necessary that two currencies that can be swapped instantaneously can be exchanged with each other. For example, it is possible to sell BTC and buy GT, but it does not necessarily mean that GT can be sold to buy BTC.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="limit">Maximum response items. Default: 100, minimum: 1, Maximum: 1000. (optional, default to 1000)</param>
        /// <returns>Task of ApiResponse (List&lt;FlashSwapCurrencyPair&gt;)</returns>
        public async Task<ApiResponse<List<FlashSwapCurrencyPair>>> ListFlashSwapCurrencyPairAsyncWithHttpInfo (string currency = default(string), int? page = default(int?), int? limit = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FlashSwapCurrencyPair>>("/flash_swap/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFlashSwapCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all flash swap orders. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>List&lt;FlashSwapOrder&gt;</returns>
        public List<FlashSwapOrder> ListFlashSwapOrders (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?))
        {
             ApiResponse<List<FlashSwapOrder>> localVarResponse = ListFlashSwapOrdersWithHttpInfo(status, sellCurrency, buyCurrency, reverse, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all flash swap orders. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;FlashSwapOrder&gt;</returns>
        public ApiResponse<List<FlashSwapOrder>> ListFlashSwapOrdersWithHttpInfo (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (sellCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sell_currency", sellCurrency));
            }
            if (buyCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "buy_currency", buyCurrency));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FlashSwapOrder>>("/flash_swap/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFlashSwapOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all flash swap orders. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>Task of List&lt;FlashSwapOrder&gt;</returns>
        public async Task<List<FlashSwapOrder>> ListFlashSwapOrdersAsync (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<FlashSwapOrder>> localVarResponse = await ListFlashSwapOrdersAsyncWithHttpInfo(status, sellCurrency, buyCurrency, reverse, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all flash swap orders. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Flash swap order status  &#x60;1&#x60; - success &#x60;2&#x60; - failure (optional)</param>
        /// <param name="sellCurrency">Currency to sell which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="buyCurrency">Currency to buy which can be retrieved from supported currency list API &#x60;GET /flash_swap/currencies&#x60; (optional)</param>
        /// <param name="reverse">If results are sorted by id in reverse order. Default to &#x60;true&#x60;  - &#x60;true&#x60;: sort by id in descending order(recent first) - ascending order(oldest first) (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list. (optional, default to 100)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;FlashSwapOrder&gt;)</returns>
        public async Task<ApiResponse<List<FlashSwapOrder>>> ListFlashSwapOrdersAsyncWithHttpInfo (int? status = default(int?), string sellCurrency = default(string), string buyCurrency = default(string), bool? reverse = default(bool?), int? limit = default(int?), int? page = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (sellCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sell_currency", sellCurrency));
            }
            if (buyCurrency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "buy_currency", buyCurrency));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FlashSwapOrder>>("/flash_swap/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFlashSwapOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a flash swap order. Initiate a flash swap preview in advance because order creation requires a preview result
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>FlashSwapOrder</returns>
        public FlashSwapOrder CreateFlashSwapOrder (FlashSwapOrderRequest flashSwapOrderRequest)
        {
             ApiResponse<FlashSwapOrder> localVarResponse = CreateFlashSwapOrderWithHttpInfo(flashSwapOrderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a flash swap order. Initiate a flash swap preview in advance because order creation requires a preview result
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>ApiResponse of FlashSwapOrder</returns>
        public ApiResponse<FlashSwapOrder> CreateFlashSwapOrderWithHttpInfo (FlashSwapOrderRequest flashSwapOrderRequest)
        {
            // verify the required parameter 'flashSwapOrderRequest' is set
            if (flashSwapOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'flashSwapOrderRequest' when calling FlashSwapApi->CreateFlashSwapOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = flashSwapOrderRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<FlashSwapOrder>("/flash_swap/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFlashSwapOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a flash swap order. Initiate a flash swap preview in advance because order creation requires a preview result
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>Task of FlashSwapOrder</returns>
        public async Task<FlashSwapOrder> CreateFlashSwapOrderAsync (FlashSwapOrderRequest flashSwapOrderRequest)
        {
             Io.Gate.GateApi.Client.ApiResponse<FlashSwapOrder> localVarResponse = await CreateFlashSwapOrderAsyncWithHttpInfo(flashSwapOrderRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a flash swap order. Initiate a flash swap preview in advance because order creation requires a preview result
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapOrderRequest"></param>
        /// <returns>Task of ApiResponse (FlashSwapOrder)</returns>
        public async Task<ApiResponse<FlashSwapOrder>> CreateFlashSwapOrderAsyncWithHttpInfo (FlashSwapOrderRequest flashSwapOrderRequest)
        {
            // verify the required parameter 'flashSwapOrderRequest' is set
            if (flashSwapOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'flashSwapOrderRequest' when calling FlashSwapApi->CreateFlashSwapOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = flashSwapOrderRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FlashSwapOrder>("/flash_swap/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFlashSwapOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single flash swap order&#39;s detail. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>FlashSwapOrder</returns>
        public FlashSwapOrder GetFlashSwapOrder (int orderId)
        {
             ApiResponse<FlashSwapOrder> localVarResponse = GetFlashSwapOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single flash swap order&#39;s detail. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>ApiResponse of FlashSwapOrder</returns>
        public ApiResponse<FlashSwapOrder> GetFlashSwapOrderWithHttpInfo (int orderId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<FlashSwapOrder>("/flash_swap/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFlashSwapOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single flash swap order&#39;s detail. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>Task of FlashSwapOrder</returns>
        public async Task<FlashSwapOrder> GetFlashSwapOrderAsync (int orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<FlashSwapOrder> localVarResponse = await GetFlashSwapOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single flash swap order&#39;s detail. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Flash swap order ID.</param>
        /// <returns>Task of ApiResponse (FlashSwapOrder)</returns>
        public async Task<ApiResponse<FlashSwapOrder>> GetFlashSwapOrderAsyncWithHttpInfo (int orderId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FlashSwapOrder>("/flash_swap/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFlashSwapOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a flash swap order preview. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>FlashSwapOrderPreview</returns>
        public FlashSwapOrderPreview PreviewFlashSwapOrder (FlashSwapPreviewRequest flashSwapPreviewRequest)
        {
             ApiResponse<FlashSwapOrderPreview> localVarResponse = PreviewFlashSwapOrderWithHttpInfo(flashSwapPreviewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a flash swap order preview. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>ApiResponse of FlashSwapOrderPreview</returns>
        public ApiResponse<FlashSwapOrderPreview> PreviewFlashSwapOrderWithHttpInfo (FlashSwapPreviewRequest flashSwapPreviewRequest)
        {
            // verify the required parameter 'flashSwapPreviewRequest' is set
            if (flashSwapPreviewRequest == null)
                throw new ApiException(400, "Missing required parameter 'flashSwapPreviewRequest' when calling FlashSwapApi->PreviewFlashSwapOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = flashSwapPreviewRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<FlashSwapOrderPreview>("/flash_swap/orders/preview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewFlashSwapOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a flash swap order preview. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>Task of FlashSwapOrderPreview</returns>
        public async Task<FlashSwapOrderPreview> PreviewFlashSwapOrderAsync (FlashSwapPreviewRequest flashSwapPreviewRequest)
        {
             Io.Gate.GateApi.Client.ApiResponse<FlashSwapOrderPreview> localVarResponse = await PreviewFlashSwapOrderAsyncWithHttpInfo(flashSwapPreviewRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a flash swap order preview. 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flashSwapPreviewRequest"></param>
        /// <returns>Task of ApiResponse (FlashSwapOrderPreview)</returns>
        public async Task<ApiResponse<FlashSwapOrderPreview>> PreviewFlashSwapOrderAsyncWithHttpInfo (FlashSwapPreviewRequest flashSwapPreviewRequest)
        {
            // verify the required parameter 'flashSwapPreviewRequest' is set
            if (flashSwapPreviewRequest == null)
                throw new ApiException(400, "Missing required parameter 'flashSwapPreviewRequest' when calling FlashSwapApi->PreviewFlashSwapOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = flashSwapPreviewRequest;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FlashSwapOrderPreview>("/flash_swap/orders/preview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewFlashSwapOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
