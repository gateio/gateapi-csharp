/*
 * Gate API v4
 *
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. 
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get account detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountDetail</returns>
        AccountDetail GetAccountDetail ();

        /// <summary>
        /// Get account detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountDetail</returns>
        ApiResponse<AccountDetail> GetAccountDetailWithHttpInfo ();
        /// <summary>
        /// Get user transaction rate limit information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AccountRateLimit&gt;</returns>
        List<AccountRateLimit> GetAccountRateLimit ();

        /// <summary>
        /// Get user transaction rate limit information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AccountRateLimit&gt;</returns>
        ApiResponse<List<AccountRateLimit>> GetAccountRateLimitWithHttpInfo ();
        /// <summary>
        /// List STP Groups
        /// </summary>
        /// <remarks>
        /// Retrieve the list of STP groups created by the main account user only
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>List&lt;StpGroup&gt;</returns>
        List<StpGroup> ListSTPGroups (string name = default(string));

        /// <summary>
        /// List STP Groups
        /// </summary>
        /// <remarks>
        /// Retrieve the list of STP groups created by the main account user only
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>ApiResponse of List&lt;StpGroup&gt;</returns>
        ApiResponse<List<StpGroup>> ListSTPGroupsWithHttpInfo (string name = default(string));
        /// <summary>
        /// Create STP Group
        /// </summary>
        /// <remarks>
        /// Only the main account is allowed to create a new STP user group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>StpGroup</returns>
        StpGroup CreateSTPGroup (StpGroup stpGroup);

        /// <summary>
        /// Create STP Group
        /// </summary>
        /// <remarks>
        /// Only the main account is allowed to create a new STP user group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>ApiResponse of StpGroup</returns>
        ApiResponse<StpGroup> CreateSTPGroupWithHttpInfo (StpGroup stpGroup);
        /// <summary>
        /// List users of the STP group
        /// </summary>
        /// <remarks>
        /// Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>List&lt;StpGroupUser&gt;</returns>
        List<StpGroupUser> ListSTPGroupsUsers (long stpId);

        /// <summary>
        /// List users of the STP group
        /// </summary>
        /// <remarks>
        /// Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>ApiResponse of List&lt;StpGroupUser&gt;</returns>
        ApiResponse<List<StpGroupUser>> ListSTPGroupsUsersWithHttpInfo (long stpId);
        /// <summary>
        /// Add users to the STP group
        /// </summary>
        /// <remarks>
        /// - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>List&lt;StpGroupUser&gt;</returns>
        List<StpGroupUser> AddSTPGroupUsers (long stpId, List<long> requestBody);

        /// <summary>
        /// Add users to the STP group
        /// </summary>
        /// <remarks>
        /// - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>ApiResponse of List&lt;StpGroupUser&gt;</returns>
        ApiResponse<List<StpGroupUser>> AddSTPGroupUsersWithHttpInfo (long stpId, List<long> requestBody);
        /// <summary>
        /// Delete the user in the STP group
        /// </summary>
        /// <remarks>
        /// - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>List&lt;StpGroupUser&gt;</returns>
        List<StpGroupUser> DeleteSTPGroupUsers (long stpId, long userId);

        /// <summary>
        /// Delete the user in the STP group
        /// </summary>
        /// <remarks>
        /// - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>ApiResponse of List&lt;StpGroupUser&gt;</returns>
        ApiResponse<List<StpGroupUser>> DeleteSTPGroupUsersWithHttpInfo (long stpId, long userId);
        /// <summary>
        /// Query GT deduction configuration.
        /// </summary>
        /// <remarks>
        /// Query the current GT deduction configuration for the account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DebitFee</returns>
        DebitFee GetDebitFee ();

        /// <summary>
        /// Query GT deduction configuration.
        /// </summary>
        /// <remarks>
        /// Query the current GT deduction configuration for the account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DebitFee</returns>
        ApiResponse<DebitFee> GetDebitFeeWithHttpInfo ();
        /// <summary>
        /// Set GT deduction.
        /// </summary>
        /// <remarks>
        /// Enable or disable GT deduction for the current account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns></returns>
        void SetDebitFee (DebitFee debitFee);

        /// <summary>
        /// Set GT deduction.
        /// </summary>
        /// <remarks>
        /// Enable or disable GT deduction for the current account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetDebitFeeWithHttpInfo (DebitFee debitFee);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get account detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountDetail</returns>
        Task<AccountDetail> GetAccountDetailAsync ();

        /// <summary>
        /// Get account detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountDetail)</returns>
        Task<ApiResponse<AccountDetail>> GetAccountDetailAsyncWithHttpInfo ();
        /// <summary>
        /// Get user transaction rate limit information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AccountRateLimit&gt;</returns>
        Task<List<AccountRateLimit>> GetAccountRateLimitAsync ();

        /// <summary>
        /// Get user transaction rate limit information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AccountRateLimit&gt;)</returns>
        Task<ApiResponse<List<AccountRateLimit>>> GetAccountRateLimitAsyncWithHttpInfo ();
        /// <summary>
        /// List STP Groups
        /// </summary>
        /// <remarks>
        /// Retrieve the list of STP groups created by the main account user only
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>Task of List&lt;StpGroup&gt;</returns>
        Task<List<StpGroup>> ListSTPGroupsAsync (string name = default(string));

        /// <summary>
        /// List STP Groups
        /// </summary>
        /// <remarks>
        /// Retrieve the list of STP groups created by the main account user only
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroup&gt;)</returns>
        Task<ApiResponse<List<StpGroup>>> ListSTPGroupsAsyncWithHttpInfo (string name = default(string));
        /// <summary>
        /// Create STP Group
        /// </summary>
        /// <remarks>
        /// Only the main account is allowed to create a new STP user group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>Task of StpGroup</returns>
        Task<StpGroup> CreateSTPGroupAsync (StpGroup stpGroup);

        /// <summary>
        /// Create STP Group
        /// </summary>
        /// <remarks>
        /// Only the main account is allowed to create a new STP user group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>Task of ApiResponse (StpGroup)</returns>
        Task<ApiResponse<StpGroup>> CreateSTPGroupAsyncWithHttpInfo (StpGroup stpGroup);
        /// <summary>
        /// List users of the STP group
        /// </summary>
        /// <remarks>
        /// Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>Task of List&lt;StpGroupUser&gt;</returns>
        Task<List<StpGroupUser>> ListSTPGroupsUsersAsync (long stpId);

        /// <summary>
        /// List users of the STP group
        /// </summary>
        /// <remarks>
        /// Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroupUser&gt;)</returns>
        Task<ApiResponse<List<StpGroupUser>>> ListSTPGroupsUsersAsyncWithHttpInfo (long stpId);
        /// <summary>
        /// Add users to the STP group
        /// </summary>
        /// <remarks>
        /// - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>Task of List&lt;StpGroupUser&gt;</returns>
        Task<List<StpGroupUser>> AddSTPGroupUsersAsync (long stpId, List<long> requestBody);

        /// <summary>
        /// Add users to the STP group
        /// </summary>
        /// <remarks>
        /// - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroupUser&gt;)</returns>
        Task<ApiResponse<List<StpGroupUser>>> AddSTPGroupUsersAsyncWithHttpInfo (long stpId, List<long> requestBody);
        /// <summary>
        /// Delete the user in the STP group
        /// </summary>
        /// <remarks>
        /// - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>Task of List&lt;StpGroupUser&gt;</returns>
        Task<List<StpGroupUser>> DeleteSTPGroupUsersAsync (long stpId, long userId);

        /// <summary>
        /// Delete the user in the STP group
        /// </summary>
        /// <remarks>
        /// - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroupUser&gt;)</returns>
        Task<ApiResponse<List<StpGroupUser>>> DeleteSTPGroupUsersAsyncWithHttpInfo (long stpId, long userId);
        /// <summary>
        /// Query GT deduction configuration.
        /// </summary>
        /// <remarks>
        /// Query the current GT deduction configuration for the account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DebitFee</returns>
        Task<DebitFee> GetDebitFeeAsync ();

        /// <summary>
        /// Query GT deduction configuration.
        /// </summary>
        /// <remarks>
        /// Query the current GT deduction configuration for the account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DebitFee)</returns>
        Task<ApiResponse<DebitFee>> GetDebitFeeAsyncWithHttpInfo ();
        /// <summary>
        /// Set GT deduction.
        /// </summary>
        /// <remarks>
        /// Enable or disable GT deduction for the current account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns>Task of void</returns>
        Task SetDebitFeeAsync (DebitFee debitFee);

        /// <summary>
        /// Set GT deduction.
        /// </summary>
        /// <remarks>
        /// Enable or disable GT deduction for the current account.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SetDebitFeeAsyncWithHttpInfo (DebitFee debitFee);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get account detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountDetail</returns>
        public AccountDetail GetAccountDetail ()
        {
             ApiResponse<AccountDetail> localVarResponse = GetAccountDetailWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountDetail</returns>
        public ApiResponse<AccountDetail> GetAccountDetailWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountDetail>("/account/detail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountDetail</returns>
        public async Task<AccountDetail> GetAccountDetailAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<AccountDetail> localVarResponse = await GetAccountDetailAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account detail 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountDetail)</returns>
        public async Task<ApiResponse<AccountDetail>> GetAccountDetailAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountDetail>("/account/detail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user transaction rate limit information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AccountRateLimit&gt;</returns>
        public List<AccountRateLimit> GetAccountRateLimit ()
        {
             ApiResponse<List<AccountRateLimit>> localVarResponse = GetAccountRateLimitWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user transaction rate limit information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AccountRateLimit&gt;</returns>
        public ApiResponse<List<AccountRateLimit>> GetAccountRateLimitWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AccountRateLimit>>("/account/rate_limit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountRateLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user transaction rate limit information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AccountRateLimit&gt;</returns>
        public async Task<List<AccountRateLimit>> GetAccountRateLimitAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<AccountRateLimit>> localVarResponse = await GetAccountRateLimitAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user transaction rate limit information 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AccountRateLimit&gt;)</returns>
        public async Task<ApiResponse<List<AccountRateLimit>>> GetAccountRateLimitAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AccountRateLimit>>("/account/rate_limit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountRateLimit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List STP Groups Retrieve the list of STP groups created by the main account user only
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>List&lt;StpGroup&gt;</returns>
        public List<StpGroup> ListSTPGroups (string name = default(string))
        {
             ApiResponse<List<StpGroup>> localVarResponse = ListSTPGroupsWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List STP Groups Retrieve the list of STP groups created by the main account user only
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>ApiResponse of List&lt;StpGroup&gt;</returns>
        public ApiResponse<List<StpGroup>> ListSTPGroupsWithHttpInfo (string name = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StpGroup>>("/account/stp_groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSTPGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List STP Groups Retrieve the list of STP groups created by the main account user only
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>Task of List&lt;StpGroup&gt;</returns>
        public async Task<List<StpGroup>> ListSTPGroupsAsync (string name = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<StpGroup>> localVarResponse = await ListSTPGroupsAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List STP Groups Retrieve the list of STP groups created by the main account user only
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Perform a fuzzy search based on the name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroup&gt;)</returns>
        public async Task<ApiResponse<List<StpGroup>>> ListSTPGroupsAsyncWithHttpInfo (string name = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StpGroup>>("/account/stp_groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSTPGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create STP Group Only the main account is allowed to create a new STP user group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>StpGroup</returns>
        public StpGroup CreateSTPGroup (StpGroup stpGroup)
        {
             ApiResponse<StpGroup> localVarResponse = CreateSTPGroupWithHttpInfo(stpGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create STP Group Only the main account is allowed to create a new STP user group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>ApiResponse of StpGroup</returns>
        public ApiResponse<StpGroup> CreateSTPGroupWithHttpInfo (StpGroup stpGroup)
        {
            // verify the required parameter 'stpGroup' is set
            if (stpGroup == null)
                throw new ApiException(400, "Missing required parameter 'stpGroup' when calling AccountApi->CreateSTPGroup");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = stpGroup;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<StpGroup>("/account/stp_groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSTPGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create STP Group Only the main account is allowed to create a new STP user group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>Task of StpGroup</returns>
        public async Task<StpGroup> CreateSTPGroupAsync (StpGroup stpGroup)
        {
             Io.Gate.GateApi.Client.ApiResponse<StpGroup> localVarResponse = await CreateSTPGroupAsyncWithHttpInfo(stpGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create STP Group Only the main account is allowed to create a new STP user group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpGroup"></param>
        /// <returns>Task of ApiResponse (StpGroup)</returns>
        public async Task<ApiResponse<StpGroup>> CreateSTPGroupAsyncWithHttpInfo (StpGroup stpGroup)
        {
            // verify the required parameter 'stpGroup' is set
            if (stpGroup == null)
                throw new ApiException(400, "Missing required parameter 'stpGroup' when calling AccountApi->CreateSTPGroup");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = stpGroup;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StpGroup>("/account/stp_groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSTPGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users of the STP group Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>List&lt;StpGroupUser&gt;</returns>
        public List<StpGroupUser> ListSTPGroupsUsers (long stpId)
        {
             ApiResponse<List<StpGroupUser>> localVarResponse = ListSTPGroupsUsersWithHttpInfo(stpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users of the STP group Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>ApiResponse of List&lt;StpGroupUser&gt;</returns>
        public ApiResponse<List<StpGroupUser>> ListSTPGroupsUsersWithHttpInfo (long stpId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stp_id", ClientUtils.ParameterToString(stpId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StpGroupUser>>("/account/stp_groups/{stp_id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSTPGroupsUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users of the STP group Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>Task of List&lt;StpGroupUser&gt;</returns>
        public async Task<List<StpGroupUser>> ListSTPGroupsUsersAsync (long stpId)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<StpGroupUser>> localVarResponse = await ListSTPGroupsUsersAsyncWithHttpInfo(stpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users of the STP group Only the main account that created this STP group is allowed to list the user ID of the STP group
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroupUser&gt;)</returns>
        public async Task<ApiResponse<List<StpGroupUser>>> ListSTPGroupsUsersAsyncWithHttpInfo (long stpId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("stp_id", ClientUtils.ParameterToString(stpId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StpGroupUser>>("/account/stp_groups/{stp_id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSTPGroupsUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add users to the STP group - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>List&lt;StpGroupUser&gt;</returns>
        public List<StpGroupUser> AddSTPGroupUsers (long stpId, List<long> requestBody)
        {
             ApiResponse<List<StpGroupUser>> localVarResponse = AddSTPGroupUsersWithHttpInfo(stpId, requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to the STP group - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>ApiResponse of List&lt;StpGroupUser&gt;</returns>
        public ApiResponse<List<StpGroupUser>> AddSTPGroupUsersWithHttpInfo (long stpId, List<long> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling AccountApi->AddSTPGroupUsers");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stp_id", ClientUtils.ParameterToString(stpId)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<StpGroupUser>>("/account/stp_groups/{stp_id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSTPGroupUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add users to the STP group - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>Task of List&lt;StpGroupUser&gt;</returns>
        public async Task<List<StpGroupUser>> AddSTPGroupUsersAsync (long stpId, List<long> requestBody)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<StpGroupUser>> localVarResponse = await AddSTPGroupUsersAsyncWithHttpInfo(stpId, requestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add users to the STP group - Only the master account that created the STP user group is allowed to add users to the STP user group.- Only accounts under the main account are allowed to be added. Cross-account is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="requestBody">User ID</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroupUser&gt;)</returns>
        public async Task<ApiResponse<List<StpGroupUser>>> AddSTPGroupUsersAsyncWithHttpInfo (long stpId, List<long> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling AccountApi->AddSTPGroupUsers");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("stp_id", ClientUtils.ParameterToString(stpId)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<StpGroupUser>>("/account/stp_groups/{stp_id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSTPGroupUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the user in the STP group - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>List&lt;StpGroupUser&gt;</returns>
        public List<StpGroupUser> DeleteSTPGroupUsers (long stpId, long userId)
        {
             ApiResponse<List<StpGroupUser>> localVarResponse = DeleteSTPGroupUsersWithHttpInfo(stpId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the user in the STP group - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>ApiResponse of List&lt;StpGroupUser&gt;</returns>
        public ApiResponse<List<StpGroupUser>> DeleteSTPGroupUsersWithHttpInfo (long stpId, long userId)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stp_id", ClientUtils.ParameterToString(stpId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<StpGroupUser>>("/account/stp_groups/{stp_id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSTPGroupUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the user in the STP group - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>Task of List&lt;StpGroupUser&gt;</returns>
        public async Task<List<StpGroupUser>> DeleteSTPGroupUsersAsync (long stpId, long userId)
        {
             Io.Gate.GateApi.Client.ApiResponse<List<StpGroupUser>> localVarResponse = await DeleteSTPGroupUsersAsyncWithHttpInfo(stpId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the user in the STP group - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stpId">STP Group ID</param>
        /// <param name="userId">STP user ID, multiple can be separated by commas</param>
        /// <returns>Task of ApiResponse (List&lt;StpGroupUser&gt;)</returns>
        public async Task<ApiResponse<List<StpGroupUser>>> DeleteSTPGroupUsersAsyncWithHttpInfo (long stpId, long userId)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("stp_id", ClientUtils.ParameterToString(stpId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "user_id", userId));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<StpGroupUser>>("/account/stp_groups/{stp_id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSTPGroupUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query GT deduction configuration. Query the current GT deduction configuration for the account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DebitFee</returns>
        public DebitFee GetDebitFee ()
        {
             ApiResponse<DebitFee> localVarResponse = GetDebitFeeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query GT deduction configuration. Query the current GT deduction configuration for the account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DebitFee</returns>
        public ApiResponse<DebitFee> GetDebitFeeWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<DebitFee>("/account/debit_fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query GT deduction configuration. Query the current GT deduction configuration for the account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DebitFee</returns>
        public async Task<DebitFee> GetDebitFeeAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<DebitFee> localVarResponse = await GetDebitFeeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query GT deduction configuration. Query the current GT deduction configuration for the account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DebitFee)</returns>
        public async Task<ApiResponse<DebitFee>> GetDebitFeeAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);


            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DebitFee>("/account/debit_fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set GT deduction. Enable or disable GT deduction for the current account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns></returns>
        public void SetDebitFee (DebitFee debitFee)
        {
             SetDebitFeeWithHttpInfo(debitFee);
        }

        /// <summary>
        /// Set GT deduction. Enable or disable GT deduction for the current account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetDebitFeeWithHttpInfo (DebitFee debitFee)
        {
            // verify the required parameter 'debitFee' is set
            if (debitFee == null)
                throw new ApiException(400, "Missing required parameter 'debitFee' when calling AccountApi->SetDebitFee");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = debitFee;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/account/debit_fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDebitFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set GT deduction. Enable or disable GT deduction for the current account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns>Task of void</returns>
        public async Task SetDebitFeeAsync (DebitFee debitFee)
        {
             await SetDebitFeeAsyncWithHttpInfo(debitFee);

        }

        /// <summary>
        /// Set GT deduction. Enable or disable GT deduction for the current account.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitFee"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SetDebitFeeAsyncWithHttpInfo (DebitFee debitFee)
        {
            // verify the required parameter 'debitFee' is set
            if (debitFee == null)
                throw new ApiException(400, "Missing required parameter 'debitFee' when calling AccountApi->SetDebitFee");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = debitFee;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/account/debit_fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDebitFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
