/*
 * Gate API
 *
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all currencies&#39; details
        /// </summary>
        /// <remarks>
        /// When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        List<Currency> ListCurrencies ();

        /// <summary>
        /// List all currencies&#39; details
        /// </summary>
        /// <remarks>
        /// When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        ApiResponse<List<Currency>> ListCurrenciesWithHttpInfo ();
        /// <summary>
        /// Get details of a specific currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Currency</returns>
        Currency GetCurrency (string currency);

        /// <summary>
        /// Get details of a specific currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of Currency</returns>
        ApiResponse<Currency> GetCurrencyWithHttpInfo (string currency);
        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CurrencyPair&gt;</returns>
        List<CurrencyPair> ListCurrencyPairs ();

        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CurrencyPair&gt;</returns>
        ApiResponse<List<CurrencyPair>> ListCurrencyPairsWithHttpInfo ();
        /// <summary>
        /// Get details of a specifc currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>CurrencyPair</returns>
        CurrencyPair GetCurrencyPair (string currencyPair);

        /// <summary>
        /// Get details of a specifc currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of CurrencyPair</returns>
        ApiResponse<CurrencyPair> GetCurrencyPairWithHttpInfo (string currencyPair);
        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>List&lt;Ticker&gt;</returns>
        List<Ticker> ListTickers (string currencyPair = default(string), string timezone = default(string));

        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticker&gt;</returns>
        ApiResponse<List<Ticker>> ListTickersWithHttpInfo (string currencyPair = default(string), string timezone = default(string));
        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>OrderBook</returns>
        OrderBook ListOrderBook (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>ApiResponse of OrderBook</returns>
        ApiResponse<OrderBook> ListOrderBookWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        List<Trade> ListTrades (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?));

        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        ApiResponse<List<Trade>> ListTradesWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?));
        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>List&lt;List&lt;string&gt;&gt;</returns>
        List<List<string>> ListCandlesticks (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>ApiResponse of List&lt;List&lt;string&gt;&gt;</returns>
        ApiResponse<List<List<string>>> ListCandlesticksWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>SpotFee</returns>
        SpotFee GetFee (string currencyPair = default(string));

        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>ApiResponse of SpotFee</returns>
        ApiResponse<SpotFee> GetFeeWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// Query a batch of user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>Dictionary&lt;string, SpotFee&gt;</returns>
        Dictionary<string, SpotFee> GetBatchSpotFee (string currencyPairs);

        /// <summary>
        /// Query a batch of user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>ApiResponse of Dictionary&lt;string, SpotFee&gt;</returns>
        ApiResponse<Dictionary<string, SpotFee>> GetBatchSpotFeeWithHttpInfo (string currencyPairs);
        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;SpotAccount&gt;</returns>
        List<SpotAccount> ListSpotAccounts (string currency = default(string));

        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotAccount&gt;</returns>
        ApiResponse<List<SpotAccount>> ListSpotAccountsWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>List&lt;SpotAccountBook&gt;</returns>
        List<SpotAccountBook> ListSpotAccountBook (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string));

        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotAccountBook&gt;</returns>
        ApiResponse<List<SpotAccountBook>> ListSpotAccountBookWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string));
        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;BatchOrder&gt;</returns>
        List<BatchOrder> CreateBatchOrders (List<Order> order, string xGateExptime = default(string));

        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;BatchOrder&gt;</returns>
        ApiResponse<List<BatchOrder>> CreateBatchOrdersWithHttpInfo (List<Order> order, string xGateExptime = default(string));
        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>List&lt;OpenOrders&gt;</returns>
        List<OpenOrders> ListAllOpenOrders (int? page = default(int?), int? limit = default(int?), string account = default(string));

        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>ApiResponse of List&lt;OpenOrders&gt;</returns>
        ApiResponse<List<OpenOrders>> ListAllOpenOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?), string account = default(string));
        /// <summary>
        /// close position when cross-currency is disabled
        /// </summary>
        /// <remarks>
        /// Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>Order</returns>
        Order CreateCrossLiquidateOrder (LiquidateOrder liquidateOrder);

        /// <summary>
        /// close position when cross-currency is disabled
        /// </summary>
        /// <remarks>
        /// Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateCrossLiquidateOrderWithHttpInfo (LiquidateOrder liquidateOrder);
        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> ListOrders (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string));

        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> ListOrdersWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string));
        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Order</returns>
        Order CreateOrder (Order order, string xGateExptime = default(string));

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateOrderWithHttpInfo (Order order, string xGateExptime = default(string));
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;OrderCancel&gt;</returns>
        List<OrderCancel> CancelOrders (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderCancel&gt;</returns>
        ApiResponse<List<OrderCancel>> CancelOrdersWithHttpInfo (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string));
        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;CancelOrderResult&gt;</returns>
        List<CancelOrderResult> CancelBatchOrders (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string));

        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;CancelOrderResult&gt;</returns>
        ApiResponse<List<CancelOrderResult>> CancelBatchOrdersWithHttpInfo (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string));
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Order</returns>
        Order GetOrder (string orderId, string currencyPair, string account = default(string));

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderWithHttpInfo (string orderId, string currencyPair, string account = default(string));
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Order</returns>
        Order CancelOrder (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string));

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CancelOrderWithHttpInfo (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string));
        /// <summary>
        /// Amend an order
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Order</returns>
        Order AmendOrder (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string));

        /// <summary>
        /// Amend an order
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> AmendOrderWithHttpInfo (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string));
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        List<Trade> ListMyTrades (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        ApiResponse<List<Trade>> ListMyTradesWithHttpInfo (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get server current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemTime</returns>
        SystemTime GetSystemTime ();

        /// <summary>
        /// Get server current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemTime</returns>
        ApiResponse<SystemTime> GetSystemTimeWithHttpInfo ();
        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>TriggerTime</returns>
        TriggerTime CountdownCancelAllSpot (CountdownCancelAllSpotTask countdownCancelAllSpotTask);

        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>ApiResponse of TriggerTime</returns>
        ApiResponse<TriggerTime> CountdownCancelAllSpotWithHttpInfo (CountdownCancelAllSpotTask countdownCancelAllSpotTask);
        /// <summary>
        /// Batch modification of orders
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;BatchOrder&gt;</returns>
        List<BatchOrder> AmendBatchOrders (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string));

        /// <summary>
        /// Batch modification of orders
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;BatchOrder&gt;</returns>
        ApiResponse<List<BatchOrder>> AmendBatchOrdersWithHttpInfo (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string));
        /// <summary>
        /// Query spot insurance fund historical data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>List&lt;SpotInsuranceHistory&gt;</returns>
        List<SpotInsuranceHistory> GetSpotInsuranceHistory (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Query spot insurance fund historical data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SpotInsuranceHistory&gt;</returns>
        ApiResponse<List<SpotInsuranceHistory>> GetSpotInsuranceHistoryWithHttpInfo (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Retrieve running auto order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;SpotPriceTriggeredOrder&gt;</returns>
        List<SpotPriceTriggeredOrder> ListSpotPriceTriggeredOrders (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve running auto order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        ApiResponse<List<SpotPriceTriggeredOrder>> ListSpotPriceTriggeredOrdersWithHttpInfo (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>TriggerOrderResponse</returns>
        TriggerOrderResponse CreateSpotPriceTriggeredOrder (SpotPriceTriggeredOrder spotPriceTriggeredOrder);

        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>ApiResponse of TriggerOrderResponse</returns>
        ApiResponse<TriggerOrderResponse> CreateSpotPriceTriggeredOrderWithHttpInfo (SpotPriceTriggeredOrder spotPriceTriggeredOrder);
        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>List&lt;SpotPriceTriggeredOrder&gt;</returns>
        List<SpotPriceTriggeredOrder> CancelSpotPriceTriggeredOrderList (string market = default(string), string account = default(string));

        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        ApiResponse<List<SpotPriceTriggeredOrder>> CancelSpotPriceTriggeredOrderListWithHttpInfo (string market = default(string), string account = default(string));
        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>SpotPriceTriggeredOrder</returns>
        SpotPriceTriggeredOrder GetSpotPriceTriggeredOrder (string orderId);

        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of SpotPriceTriggeredOrder</returns>
        ApiResponse<SpotPriceTriggeredOrder> GetSpotPriceTriggeredOrderWithHttpInfo (string orderId);
        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>SpotPriceTriggeredOrder</returns>
        SpotPriceTriggeredOrder CancelSpotPriceTriggeredOrder (string orderId);

        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of SpotPriceTriggeredOrder</returns>
        ApiResponse<SpotPriceTriggeredOrder> CancelSpotPriceTriggeredOrderWithHttpInfo (string orderId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all currencies&#39; details
        /// </summary>
        /// <remarks>
        /// When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        Task<List<Currency>> ListCurrenciesAsync ();

        /// <summary>
        /// List all currencies&#39; details
        /// </summary>
        /// <remarks>
        /// When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        Task<ApiResponse<List<Currency>>> ListCurrenciesAsyncWithHttpInfo ();
        /// <summary>
        /// Get details of a specific currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of Currency</returns>
        Task<Currency> GetCurrencyAsync (string currency);

        /// <summary>
        /// Get details of a specific currency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        Task<ApiResponse<Currency>> GetCurrencyAsyncWithHttpInfo (string currency);
        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CurrencyPair&gt;</returns>
        Task<List<CurrencyPair>> ListCurrencyPairsAsync ();

        /// <summary>
        /// List all currency pairs supported
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CurrencyPair&gt;)</returns>
        Task<ApiResponse<List<CurrencyPair>>> ListCurrencyPairsAsyncWithHttpInfo ();
        /// <summary>
        /// Get details of a specifc currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of CurrencyPair</returns>
        Task<CurrencyPair> GetCurrencyPairAsync (string currencyPair);

        /// <summary>
        /// Get details of a specifc currency pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (CurrencyPair)</returns>
        Task<ApiResponse<CurrencyPair>> GetCurrencyPairAsyncWithHttpInfo (string currencyPair);
        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>Task of List&lt;Ticker&gt;</returns>
        Task<List<Ticker>> ListTickersAsync (string currencyPair = default(string), string timezone = default(string));

        /// <summary>
        /// Retrieve ticker information
        /// </summary>
        /// <remarks>
        /// Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticker&gt;)</returns>
        Task<ApiResponse<List<Ticker>>> ListTickersAsyncWithHttpInfo (string currencyPair = default(string), string timezone = default(string));
        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of OrderBook</returns>
        Task<OrderBook> ListOrderBookAsync (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));

        /// <summary>
        /// Retrieve order book
        /// </summary>
        /// <remarks>
        /// Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of ApiResponse (OrderBook)</returns>
        Task<ApiResponse<OrderBook>> ListOrderBookAsyncWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?));
        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        Task<List<Trade>> ListTradesAsync (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?));

        /// <summary>
        /// Retrieve market trades
        /// </summary>
        /// <remarks>
        /// Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        Task<ApiResponse<List<Trade>>> ListTradesAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?));
        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>Task of List&lt;List&lt;string&gt;&gt;</returns>
        Task<List<List<string>>> ListCandlesticksAsync (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));

        /// <summary>
        /// Market candlesticks
        /// </summary>
        /// <remarks>
        /// Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>Task of ApiResponse (List&lt;List&lt;string&gt;&gt;)</returns>
        Task<ApiResponse<List<List<string>>>> ListCandlesticksAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string));
        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of SpotFee</returns>
        Task<SpotFee> GetFeeAsync (string currencyPair = default(string));

        /// <summary>
        /// Query user trading fee rates
        /// </summary>
        /// <remarks>
        /// This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of ApiResponse (SpotFee)</returns>
        Task<ApiResponse<SpotFee>> GetFeeAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// Query a batch of user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>Task of Dictionary&lt;string, SpotFee&gt;</returns>
        Task<Dictionary<string, SpotFee>> GetBatchSpotFeeAsync (string currencyPairs);

        /// <summary>
        /// Query a batch of user trading fee rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, SpotFee&gt;)</returns>
        Task<ApiResponse<Dictionary<string, SpotFee>>> GetBatchSpotFeeAsyncWithHttpInfo (string currencyPairs);
        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;SpotAccount&gt;</returns>
        Task<List<SpotAccount>> ListSpotAccountsAsync (string currency = default(string));

        /// <summary>
        /// List spot accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotAccount&gt;)</returns>
        Task<ApiResponse<List<SpotAccount>>> ListSpotAccountsAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>Task of List&lt;SpotAccountBook&gt;</returns>
        Task<List<SpotAccountBook>> ListSpotAccountBookAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string));

        /// <summary>
        /// Query account book
        /// </summary>
        /// <remarks>
        /// Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotAccountBook&gt;)</returns>
        Task<ApiResponse<List<SpotAccountBook>>> ListSpotAccountBookAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string));
        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;BatchOrder&gt;</returns>
        Task<List<BatchOrder>> CreateBatchOrdersAsync (List<Order> order, string xGateExptime = default(string));

        /// <summary>
        /// Create a batch of orders
        /// </summary>
        /// <remarks>
        /// Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BatchOrder&gt;)</returns>
        Task<ApiResponse<List<BatchOrder>>> CreateBatchOrdersAsyncWithHttpInfo (List<Order> order, string xGateExptime = default(string));
        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of List&lt;OpenOrders&gt;</returns>
        Task<List<OpenOrders>> ListAllOpenOrdersAsync (int? page = default(int?), int? limit = default(int?), string account = default(string));

        /// <summary>
        /// List all open orders
        /// </summary>
        /// <remarks>
        /// Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OpenOrders&gt;)</returns>
        Task<ApiResponse<List<OpenOrders>>> ListAllOpenOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), string account = default(string));
        /// <summary>
        /// close position when cross-currency is disabled
        /// </summary>
        /// <remarks>
        /// Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>Task of Order</returns>
        Task<Order> CreateCrossLiquidateOrderAsync (LiquidateOrder liquidateOrder);

        /// <summary>
        /// close position when cross-currency is disabled
        /// </summary>
        /// <remarks>
        /// Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> CreateCrossLiquidateOrderAsyncWithHttpInfo (LiquidateOrder liquidateOrder);
        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        Task<List<Order>> ListOrdersAsync (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string));

        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        Task<ApiResponse<List<Order>>> ListOrdersAsyncWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string));
        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of Order</returns>
        Task<Order> CreateOrderAsync (Order order, string xGateExptime = default(string));

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> CreateOrderAsyncWithHttpInfo (Order order, string xGateExptime = default(string));
        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;OrderCancel&gt;</returns>
        Task<List<OrderCancel>> CancelOrdersAsync (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string));

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair
        /// </summary>
        /// <remarks>
        /// When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderCancel&gt;)</returns>
        Task<ApiResponse<List<OrderCancel>>> CancelOrdersAsyncWithHttpInfo (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string));
        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;CancelOrderResult&gt;</returns>
        Task<List<CancelOrderResult>> CancelBatchOrdersAsync (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string));

        /// <summary>
        /// Cancel a batch of orders with an ID list
        /// </summary>
        /// <remarks>
        /// Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CancelOrderResult&gt;)</returns>
        Task<ApiResponse<List<CancelOrderResult>>> CancelBatchOrdersAsyncWithHttpInfo (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string));
        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of Order</returns>
        Task<Order> GetOrderAsync (string orderId, string currencyPair, string account = default(string));

        /// <summary>
        /// Get a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string orderId, string currencyPair, string account = default(string));
        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of Order</returns>
        Task<Order> CancelOrderAsync (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string));

        /// <summary>
        /// Cancel a single order
        /// </summary>
        /// <remarks>
        /// By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> CancelOrderAsyncWithHttpInfo (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string));
        /// <summary>
        /// Amend an order
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of Order</returns>
        Task<Order> AmendOrderAsync (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string));

        /// <summary>
        /// Amend an order
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        Task<ApiResponse<Order>> AmendOrderAsyncWithHttpInfo (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string));
        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        Task<List<Trade>> ListMyTradesAsync (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?));

        /// <summary>
        /// List personal trading history
        /// </summary>
        /// <remarks>
        /// By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        Task<ApiResponse<List<Trade>>> ListMyTradesAsyncWithHttpInfo (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?));
        /// <summary>
        /// Get server current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemTime</returns>
        Task<SystemTime> GetSystemTimeAsync ();

        /// <summary>
        /// Get server current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemTime)</returns>
        Task<ApiResponse<SystemTime>> GetSystemTimeAsyncWithHttpInfo ();
        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>Task of TriggerTime</returns>
        Task<TriggerTime> CountdownCancelAllSpotAsync (CountdownCancelAllSpotTask countdownCancelAllSpotTask);

        /// <summary>
        /// Countdown cancel orders
        /// </summary>
        /// <remarks>
        /// Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>Task of ApiResponse (TriggerTime)</returns>
        Task<ApiResponse<TriggerTime>> CountdownCancelAllSpotAsyncWithHttpInfo (CountdownCancelAllSpotTask countdownCancelAllSpotTask);
        /// <summary>
        /// Batch modification of orders
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;BatchOrder&gt;</returns>
        Task<List<BatchOrder>> AmendBatchOrdersAsync (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string));

        /// <summary>
        /// Batch modification of orders
        /// </summary>
        /// <remarks>
        /// Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BatchOrder&gt;)</returns>
        Task<ApiResponse<List<BatchOrder>>> AmendBatchOrdersAsyncWithHttpInfo (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string));
        /// <summary>
        /// Query spot insurance fund historical data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>Task of List&lt;SpotInsuranceHistory&gt;</returns>
        Task<List<SpotInsuranceHistory>> GetSpotInsuranceHistoryAsync (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// Query spot insurance fund historical data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotInsuranceHistory&gt;)</returns>
        Task<ApiResponse<List<SpotInsuranceHistory>>> GetSpotInsuranceHistoryAsyncWithHttpInfo (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Retrieve running auto order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        Task<List<SpotPriceTriggeredOrder>> ListSpotPriceTriggeredOrdersAsync (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve running auto order list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotPriceTriggeredOrder&gt;)</returns>
        Task<ApiResponse<List<SpotPriceTriggeredOrder>>> ListSpotPriceTriggeredOrdersAsyncWithHttpInfo (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>Task of TriggerOrderResponse</returns>
        Task<TriggerOrderResponse> CreateSpotPriceTriggeredOrderAsync (SpotPriceTriggeredOrder spotPriceTriggeredOrder);

        /// <summary>
        /// Create a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>Task of ApiResponse (TriggerOrderResponse)</returns>
        Task<ApiResponse<TriggerOrderResponse>> CreateSpotPriceTriggeredOrderAsyncWithHttpInfo (SpotPriceTriggeredOrder spotPriceTriggeredOrder);
        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>Task of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        Task<List<SpotPriceTriggeredOrder>> CancelSpotPriceTriggeredOrderListAsync (string market = default(string), string account = default(string));

        /// <summary>
        /// Cancel All Price-triggered Orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotPriceTriggeredOrder&gt;)</returns>
        Task<ApiResponse<List<SpotPriceTriggeredOrder>>> CancelSpotPriceTriggeredOrderListAsyncWithHttpInfo (string market = default(string), string account = default(string));
        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of SpotPriceTriggeredOrder</returns>
        Task<SpotPriceTriggeredOrder> GetSpotPriceTriggeredOrderAsync (string orderId);

        /// <summary>
        /// Get a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (SpotPriceTriggeredOrder)</returns>
        Task<ApiResponse<SpotPriceTriggeredOrder>> GetSpotPriceTriggeredOrderAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of SpotPriceTriggeredOrder</returns>
        Task<SpotPriceTriggeredOrder> CancelSpotPriceTriggeredOrderAsync (string orderId);

        /// <summary>
        /// cancel a price-triggered order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (SpotPriceTriggeredOrder)</returns>
        Task<ApiResponse<SpotPriceTriggeredOrder>> CancelSpotPriceTriggeredOrderAsyncWithHttpInfo (string orderId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApi : ISpotApiSync, ISpotApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpotApi : ISpotApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpotApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpotApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all currencies&#39; details When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        public List<Currency> ListCurrencies ()
        {
             ApiResponse<List<Currency>> localVarResponse = ListCurrenciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all currencies&#39; details When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        public ApiResponse<List<Currency>> ListCurrenciesWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Currency>>("/spot/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all currencies&#39; details When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        public async Task<List<Currency>> ListCurrenciesAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Currency>> localVarResponse = await ListCurrenciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all currencies&#39; details When a currency corresponds to multiple chains, you can query the information of multiple chains through the &#x60;chains&#x60; field, such as the charging and recharge status, identification, etc. of the chain.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        public async Task<ApiResponse<List<Currency>>> ListCurrenciesAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Currency>>("/spot/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a specific currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Currency</returns>
        public Currency GetCurrency (string currency)
        {
             ApiResponse<Currency> localVarResponse = GetCurrencyWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a specific currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of Currency</returns>
        public ApiResponse<Currency> GetCurrencyWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SpotApi->GetCurrency");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currency", ClientUtils.ParameterToString(currency)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Currency>("/spot/currencies/{currency}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a specific currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of Currency</returns>
        public async Task<Currency> GetCurrencyAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<Currency> localVarResponse = await GetCurrencyAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of a specific currency 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        public async Task<ApiResponse<Currency>> GetCurrencyAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SpotApi->GetCurrency");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("currency", ClientUtils.ParameterToString(currency)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Currency>("/spot/currencies/{currency}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CurrencyPair&gt;</returns>
        public List<CurrencyPair> ListCurrencyPairs ()
        {
             ApiResponse<List<CurrencyPair>> localVarResponse = ListCurrencyPairsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CurrencyPair&gt;</returns>
        public ApiResponse<List<CurrencyPair>> ListCurrencyPairsWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CurrencyPair>>("/spot/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyPairs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CurrencyPair&gt;</returns>
        public async Task<List<CurrencyPair>> ListCurrencyPairsAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CurrencyPair>> localVarResponse = await ListCurrencyPairsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all currency pairs supported 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CurrencyPair&gt;)</returns>
        public async Task<ApiResponse<List<CurrencyPair>>> ListCurrencyPairsAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CurrencyPair>>("/spot/currency_pairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrencyPairs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a specifc currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>CurrencyPair</returns>
        public CurrencyPair GetCurrencyPair (string currencyPair)
        {
             ApiResponse<CurrencyPair> localVarResponse = GetCurrencyPairWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a specifc currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>ApiResponse of CurrencyPair</returns>
        public ApiResponse<CurrencyPair> GetCurrencyPairWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetCurrencyPair");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currency_pair", ClientUtils.ParameterToString(currencyPair)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencyPair>("/spot/currency_pairs/{currency_pair}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a specifc currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of CurrencyPair</returns>
        public async Task<CurrencyPair> GetCurrencyPairAsync (string currencyPair)
        {
             Io.Gate.GateApi.Client.ApiResponse<CurrencyPair> localVarResponse = await GetCurrencyPairAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of a specifc currency pair 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <returns>Task of ApiResponse (CurrencyPair)</returns>
        public async Task<ApiResponse<CurrencyPair>> GetCurrencyPairAsyncWithHttpInfo (string currencyPair)
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetCurrencyPair");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("currency_pair", ClientUtils.ParameterToString(currencyPair)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencyPair>("/spot/currency_pairs/{currency_pair}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrencyPair", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>List&lt;Ticker&gt;</returns>
        public List<Ticker> ListTickers (string currencyPair = default(string), string timezone = default(string))
        {
             ApiResponse<List<Ticker>> localVarResponse = ListTickersWithHttpInfo(currencyPair, timezone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticker&gt;</returns>
        public ApiResponse<List<Ticker>> ListTickersWithHttpInfo (string currencyPair = default(string), string timezone = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Ticker>>("/spot/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>Task of List&lt;Ticker&gt;</returns>
        public async Task<List<Ticker>> ListTickersAsync (string currencyPair = default(string), string timezone = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Ticker>> localVarResponse = await ListTickersAsyncWithHttpInfo(currencyPair, timezone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve ticker information Return only related data if &#x60;currency_pair&#x60; is specified; otherwise return all of them
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="timezone">Timezone (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticker&gt;)</returns>
        public async Task<ApiResponse<List<Ticker>>> ListTickersAsyncWithHttpInfo (string currencyPair = default(string), string timezone = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Ticker>>("/spot/tickers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTickers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve order book Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>OrderBook</returns>
        public OrderBook ListOrderBook (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             ApiResponse<OrderBook> localVarResponse = ListOrderBookWithHttpInfo(currencyPair, interval, limit, withId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve order book Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>ApiResponse of OrderBook</returns>
        public ApiResponse<OrderBook> ListOrderBookWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrderBook");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderBook>("/spot/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve order book Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of OrderBook</returns>
        public async Task<OrderBook> ListOrderBookAsync (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
             Io.Gate.GateApi.Client.ApiResponse<OrderBook> localVarResponse = await ListOrderBookAsyncWithHttpInfo(currencyPair, interval, limit, withId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve order book Market depth buy orders are sorted by price from high to low, sell orders are reversed are reversed
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="interval">Order depth. 0 means no aggregation is applied. default to 0 (optional, default to &quot;0&quot;)</param>
        /// <param name="limit">Maximum number of order depth data in asks or bids (optional, default to 10)</param>
        /// <param name="withId">Return order book ID (optional, default to false)</param>
        /// <returns>Task of ApiResponse (OrderBook)</returns>
        public async Task<ApiResponse<OrderBook>> ListOrderBookAsyncWithHttpInfo (string currencyPair, string interval = default(string), int? limit = default(int?), bool? withId = default(bool?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrderBook");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (withId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "with_id", withId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderBook>("/spot/order_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve market trades Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        public List<Trade> ListTrades (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?))
        {
             ApiResponse<List<Trade>> localVarResponse = ListTradesWithHttpInfo(currencyPair, limit, lastId, reverse, from, to, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve market trades Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        public ApiResponse<List<Trade>> ListTradesWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListTrades");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Trade>>("/spot/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve market trades Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        public async Task<List<Trade>> ListTradesAsync (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Trade>> localVarResponse = await ListTradesAsyncWithHttpInfo(currencyPair, limit, lastId, reverse, from, to, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve market trades Supports &#x60;from&#x60; and &#x60;to&#x60; by time range query or page-turn query based on &#x60;last_id&#x60;. By default, query by time range is the last 30 days.  The query method based on &#x60;last_id&#x60; page turn is no longer recommended. If &#x60;last_id&#x60; is specified, the time range query parameters will be ignored.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="lastId">Specify the currency name to query in batches, and support up to 100 pass parameters at a time. (optional)</param>
        /// <param name="reverse">Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When &#x60;last_id&#x60; is specified. Set &#x60;reverse&#x60; to &#x60;true&#x60; to trace back trading history; &#x60;false&#x60; to retrieve latest tradings.  No effect if &#x60;last_id&#x60; is not specified. (optional, default to false)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        public async Task<ApiResponse<List<Trade>>> ListTradesAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), string lastId = default(string), bool? reverse = default(bool?), long? from = default(long?), long? to = default(long?), int? page = default(int?))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListTrades");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (lastId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "last_id", lastId));
            }
            if (reverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reverse", reverse));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Trade>>("/spot/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>List&lt;List&lt;string&gt;&gt;</returns>
        public List<List<string>> ListCandlesticks (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             ApiResponse<List<List<string>>> localVarResponse = ListCandlesticksWithHttpInfo(currencyPair, limit, from, to, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>ApiResponse of List&lt;List&lt;string&gt;&gt;</returns>
        public ApiResponse<List<List<string>>> ListCandlesticksWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListCandlesticks");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<List<string>>>("/spot/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>Task of List&lt;List&lt;string&gt;&gt;</returns>
        public async Task<List<List<string>>> ListCandlesticksAsync (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<List<string>>> localVarResponse = await ListCandlesticksAsyncWithHttpInfo(currencyPair, limit, from, to, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market candlesticks Maximum of 1000 points can be returned in a query. Be sure not to exceed the limit when specifying from, to and interval
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="limit">Maximum recent data points to return. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)</param>
        /// <param name="from">Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)</param>
        /// <param name="to">Specify the end time of the K-line chart, defaults to current time if not specified, note that the time format is Unix timestamp with second  (optional)</param>
        /// <param name="interval">Interval time between data points. Note that &#x60;30d&#x60; means 1 natual month, not 30 days (optional, default to 30m)</param>
        /// <returns>Task of ApiResponse (List&lt;List&lt;string&gt;&gt;)</returns>
        public async Task<ApiResponse<List<List<string>>>> ListCandlesticksAsyncWithHttpInfo (string currencyPair, int? limit = default(int?), long? from = default(long?), long? to = default(long?), string interval = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListCandlesticks");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<List<string>>>("/spot/candlesticks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCandlesticks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query user trading fee rates This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>SpotFee</returns>
        public SpotFee GetFee (string currencyPair = default(string))
        {
             ApiResponse<SpotFee> localVarResponse = GetFeeWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query user trading fee rates This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>ApiResponse of SpotFee</returns>
        public ApiResponse<SpotFee> GetFeeWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpotFee>("/spot/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query user trading fee rates This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of SpotFee</returns>
        public async Task<SpotFee> GetFeeAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<SpotFee> localVarResponse = await GetFeeAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query user trading fee rates This API is deprecated in favour of new fee retrieving API &#x60;/wallet/fee&#x60;.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of ApiResponse (SpotFee)</returns>
        public async Task<ApiResponse<SpotFee>> GetFeeAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SpotFee>("/spot/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query a batch of user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>Dictionary&lt;string, SpotFee&gt;</returns>
        public Dictionary<string, SpotFee> GetBatchSpotFee (string currencyPairs)
        {
             ApiResponse<Dictionary<string, SpotFee>> localVarResponse = GetBatchSpotFeeWithHttpInfo(currencyPairs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query a batch of user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>ApiResponse of Dictionary&lt;string, SpotFee&gt;</returns>
        public ApiResponse<Dictionary<string, SpotFee>> GetBatchSpotFeeWithHttpInfo (string currencyPairs)
        {
            // verify the required parameter 'currencyPairs' is set
            if (currencyPairs == null)
                throw new ApiException(400, "Missing required parameter 'currencyPairs' when calling SpotApi->GetBatchSpotFee");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pairs", currencyPairs));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, SpotFee>>("/spot/batch_fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchSpotFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query a batch of user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>Task of Dictionary&lt;string, SpotFee&gt;</returns>
        public async Task<Dictionary<string, SpotFee>> GetBatchSpotFeeAsync (string currencyPairs)
        {
             Io.Gate.GateApi.Client.ApiResponse<Dictionary<string, SpotFee>> localVarResponse = await GetBatchSpotFeeAsyncWithHttpInfo(currencyPairs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query a batch of user trading fee rates 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPairs">A request can only query up to 50 currency pairs</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, SpotFee&gt;)</returns>
        public async Task<ApiResponse<Dictionary<string, SpotFee>>> GetBatchSpotFeeAsyncWithHttpInfo (string currencyPairs)
        {
            // verify the required parameter 'currencyPairs' is set
            if (currencyPairs == null)
                throw new ApiException(400, "Missing required parameter 'currencyPairs' when calling SpotApi->GetBatchSpotFee");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pairs", currencyPairs));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, SpotFee>>("/spot/batch_fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchSpotFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;SpotAccount&gt;</returns>
        public List<SpotAccount> ListSpotAccounts (string currency = default(string))
        {
             ApiResponse<List<SpotAccount>> localVarResponse = ListSpotAccountsWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotAccount&gt;</returns>
        public ApiResponse<List<SpotAccount>> ListSpotAccountsWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SpotAccount>>("/spot/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;SpotAccount&gt;</returns>
        public async Task<List<SpotAccount>> ListSpotAccountsAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SpotAccount>> localVarResponse = await ListSpotAccountsAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List spot accounts 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotAccount&gt;)</returns>
        public async Task<ApiResponse<List<SpotAccount>>> ListSpotAccountsAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SpotAccount>>("/spot/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query account book Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>List&lt;SpotAccountBook&gt;</returns>
        public List<SpotAccountBook> ListSpotAccountBook (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string))
        {
             ApiResponse<List<SpotAccountBook>> localVarResponse = ListSpotAccountBookWithHttpInfo(currency, from, to, page, limit, type, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query account book Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotAccountBook&gt;</returns>
        public ApiResponse<List<SpotAccountBook>> ListSpotAccountBookWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "code", code));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SpotAccountBook>>("/spot/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query account book Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>Task of List&lt;SpotAccountBook&gt;</returns>
        public async Task<List<SpotAccountBook>> ListSpotAccountBookAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SpotAccountBook>> localVarResponse = await ListSpotAccountBookAsyncWithHttpInfo(currency, from, to, page, limit, type, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query account book Record query time range is not allowed to exceed 30 days.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="type">Only retrieve changes of the specified type. All types will be returned if not specified. (optional)</param>
        /// <param name="code">Specify account change code query, if not specified, all change types are included, and the priority is higher than &#x60;type&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotAccountBook&gt;)</returns>
        public async Task<ApiResponse<List<SpotAccountBook>>> ListSpotAccountBookAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? page = default(int?), int? limit = default(int?), string type = default(string), string code = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "code", code));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SpotAccountBook>>("/spot/account_book", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotAccountBook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;BatchOrder&gt;</returns>
        public List<BatchOrder> CreateBatchOrders (List<Order> order, string xGateExptime = default(string))
        {
             ApiResponse<List<BatchOrder>> localVarResponse = CreateBatchOrdersWithHttpInfo(order, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;BatchOrder&gt;</returns>
        public ApiResponse<List<BatchOrder>> CreateBatchOrdersWithHttpInfo (List<Order> order, string xGateExptime = default(string))
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateBatchOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BatchOrder>>("/spot/batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;BatchOrder&gt;</returns>
        public async Task<List<BatchOrder>> CreateBatchOrdersAsync (List<Order> order, string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<BatchOrder>> localVarResponse = await CreateBatchOrdersAsyncWithHttpInfo(order, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a batch of orders Batch orders requirements:  1. custom order field &#x60;text&#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. &#x60;account&#x60; must be identical for all orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BatchOrder&gt;)</returns>
        public async Task<ApiResponse<List<BatchOrder>>> CreateBatchOrdersAsyncWithHttpInfo (List<Order> order, string xGateExptime = default(string))
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateBatchOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BatchOrder>>("/spot/batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all open orders Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>List&lt;OpenOrders&gt;</returns>
        public List<OpenOrders> ListAllOpenOrders (int? page = default(int?), int? limit = default(int?), string account = default(string))
        {
             ApiResponse<List<OpenOrders>> localVarResponse = ListAllOpenOrdersWithHttpInfo(page, limit, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all open orders Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>ApiResponse of List&lt;OpenOrders&gt;</returns>
        public ApiResponse<List<OpenOrders>> ListAllOpenOrdersWithHttpInfo (int? page = default(int?), int? limit = default(int?), string account = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OpenOrders>>("/spot/open_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllOpenOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all open orders Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of List&lt;OpenOrders&gt;</returns>
        public async Task<List<OpenOrders>> ListAllOpenOrdersAsync (int? page = default(int?), int? limit = default(int?), string account = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OpenOrders>> localVarResponse = await ListAllOpenOrdersAsyncWithHttpInfo(page, limit, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all open orders Query the current order list of all trading pairs. Please note that the paging parameter controls the number of pending orders in each trading pair. There is no paging control for the number of trading pairs. All trading pairs with pending orders will be returned.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records returned in one page in each currency pair (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OpenOrders&gt;)</returns>
        public async Task<ApiResponse<List<OpenOrders>>> ListAllOpenOrdersAsyncWithHttpInfo (int? page = default(int?), int? limit = default(int?), string account = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OpenOrders>>("/spot/open_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllOpenOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// close position when cross-currency is disabled Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>Order</returns>
        public Order CreateCrossLiquidateOrder (LiquidateOrder liquidateOrder)
        {
             ApiResponse<Order> localVarResponse = CreateCrossLiquidateOrderWithHttpInfo(liquidateOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// close position when cross-currency is disabled Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> CreateCrossLiquidateOrderWithHttpInfo (LiquidateOrder liquidateOrder)
        {
            // verify the required parameter 'liquidateOrder' is set
            if (liquidateOrder == null)
                throw new ApiException(400, "Missing required parameter 'liquidateOrder' when calling SpotApi->CreateCrossLiquidateOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = liquidateOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/spot/cross_liquidate_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCrossLiquidateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// close position when cross-currency is disabled Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>Task of Order</returns>
        public async Task<Order> CreateCrossLiquidateOrderAsync (LiquidateOrder liquidateOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await CreateCrossLiquidateOrderAsyncWithHttpInfo(liquidateOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// close position when cross-currency is disabled Currently, only cross-margin accounts are supported to close position when cross currencies are disabled.  Maximum buy quantity &#x3D; (unpaid principal and interest - currency balance - the amount of the currency in the order book) / 0.998
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidateOrder"></param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> CreateCrossLiquidateOrderAsyncWithHttpInfo (LiquidateOrder liquidateOrder)
        {
            // verify the required parameter 'liquidateOrder' is set
            if (liquidateOrder == null)
                throw new ApiException(400, "Missing required parameter 'liquidateOrder' when calling SpotApi->CreateCrossLiquidateOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = liquidateOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/spot/cross_liquidate_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCrossLiquidateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List orders Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> ListOrders (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string))
        {
             ApiResponse<List<Order>> localVarResponse = ListOrdersWithHttpInfo(currencyPair, status, page, limit, account, from, to, side);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List orders Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse<List<Order>> ListOrdersWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SpotApi->ListOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Order>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List orders Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async Task<List<Order>> ListOrdersAsync (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Order>> localVarResponse = await ListOrdersAsyncWithHttpInfo(currencyPair, status, page, limit, account, from, to, side);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List orders Note that the query results are spot order lists for spot, unified account and warehouse-by-site leverage accounts by default.  &#x60;status&#x60; is set to &#x60;open&#x60;, that is, when querying the pending order list, only pagination control of &#x60;page&#x60; and &#x60;limit&#x60; is supported. &#x60;limit&#x60; Maximum setting is only allowed to 100 . The &#x60;side&#x60; and &#x60;from&#x60;, &#x60;to&#x60; parameters for time range query are not supported.  &#x60;status&#x60; is set to &#x60;finished&#x60;, that is, when querying historical delegations, in addition to pagination queries, &#x60;from&#x60; and &#x60;to&#x60; are also supported by time range queries. In addition, it supports setting the &#x60;side&#x60; parameter to filter one-side history.  The parameters of the time range filtering are processed according to the order end time.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.</param>
        /// <param name="status">List orders based on status  &#x60;open&#x60; - order is waiting to be filled &#x60;finished&#x60; - order has been filled or cancelled </param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Maximum number of records to be returned. If &#x60;status&#x60; is &#x60;open&#x60;, maximum of &#x60;limit&#x60; is 100 (optional, default to 100)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async Task<ApiResponse<List<Order>>> ListOrdersAsyncWithHttpInfo (string currencyPair, string status, int? page = default(int?), int? limit = default(int?), string account = default(string), long? from = default(long?), long? to = default(long?), string side = default(string))
        {
            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->ListOrders");

            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SpotApi->ListOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Order>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Order</returns>
        public Order CreateOrder (Order order, string xGateExptime = default(string))
        {
             ApiResponse<Order> localVarResponse = CreateOrderWithHttpInfo(order, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> CreateOrderWithHttpInfo (Order order, string xGateExptime = default(string))
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of Order</returns>
        public async Task<Order> CreateOrderAsync (Order order, string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await CreateOrderAsyncWithHttpInfo(order, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an order Support spot, margin, leverage, and full-position leverage orders. Use different accounts through the &#x60;account&#x60; field, default is &#x60;spot&#x60;, that is, use the spot account to place an order if the user is &#x60;unified&#x60; account, default is to place an order with a unified account  When using leveraged account trading, that is, when &#x60;account&#x60; is set to &#x60;margin&#x60;, you can set &#x60;auto_borrow&#x60; to &#x60;true&#x60;, In the case of insufficient account balance, the system will automatically execute the &#x60;POST /margin/uni/loans&#x60; to borrow the insufficient part. Whether the assets obtained after the leveraged order is automatically used to return the borrowing orders of the leveraged account in a position-by-store leverage account depends on the automatic repayment settings of the user&#39;s position-by-store leverage account**, The account automatic repayment settings can be queried and set through &#x60;/margin/auto_repay&#x60;.  Use unified account transactions, that is, when &#x60;account&#x60; is set to &#x60;unified&#x60;, &#x60;auto_borrow&#x60; \&quot; can also be enableTo realize the insufficient part of automatic borrowing, but unlike the leverage account, whether the entrustment of a unified account is automatically repayable depends on the   when placing an order&#x60;auto_repay&#x60; setting, this setting is only effective for the current entrustment, that is, only the assets obtained after the entrustment transaction will be used to repay the borrowing orders of the full-position leverage account. Unified account ordering currently supports &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; at the same time.  Auto repayment will be triggered at the end of the order, i.e. &#x60;status&#x60; is &#x60;cancelled&#x60; or &#x60;closed&#x60; .  **Delegation Status**  The entrustment status in the pending order is &#x60;open&#x60;, which remains at &#x60;open&#x60; until all the quantity is traded. If it is eaten, the order ends and the status becomes &#x60;closed&#x60;. If the order is cancelled before all transactions are completed, regardless of whether there are partial transactions, the status will become &#x60;cancelled&#x60;  **Iceberg Entrustment**  &#x60;iceberg&#x60; is used to set the number of iceberg delegations displayed, and does not support complete hiding. Note that when hidden part of the transaction is charged according to the taker&#39;s handling rate.  **Restrict user transactions**  Set &#x60;stp_act&#x60; to decide to use strategies that limit user transactions
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> CreateOrderAsyncWithHttpInfo (Order order, string xGateExptime = default(string))
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling SpotApi->CreateOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = order;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;OrderCancel&gt;</returns>
        public List<OrderCancel> CancelOrders (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
             ApiResponse<List<OrderCancel>> localVarResponse = CancelOrdersWithHttpInfo(currencyPair, side, account, actionMode, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderCancel&gt;</returns>
        public ApiResponse<List<OrderCancel>> CancelOrdersWithHttpInfo (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (actionMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "action_mode", actionMode));
            }
            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<OrderCancel>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;OrderCancel&gt;</returns>
        public async Task<List<OrderCancel>> CancelOrdersAsync (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<OrderCancel>> localVarResponse = await CancelOrdersAsyncWithHttpInfo(currencyPair, side, account, actionMode, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all &#x60;open&#x60; orders in specified currency pair When the &#x60;account&#x60; parameter is not specified, all pending orders including spot, unified account, and position-by-position leverage will be cancelled. When &#x60;currency_pair&#x60; is not specified, all transaction pairs are revoked You can specify a certain account separately to cancel all orders under the specified account
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="side">All bids or asks. Both included if not specified (optional)</param>
        /// <param name="account">Specify account type  Classic account: All are included if not specified Unified account: Specify unified (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderCancel&gt;)</returns>
        public async Task<ApiResponse<List<OrderCancel>>> CancelOrdersAsyncWithHttpInfo (string currencyPair = default(string), string side = default(string), string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (side != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "side", side));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (actionMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "action_mode", actionMode));
            }
            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<OrderCancel>>("/spot/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;CancelOrderResult&gt;</returns>
        public List<CancelOrderResult> CancelBatchOrders (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string))
        {
             ApiResponse<List<CancelOrderResult>> localVarResponse = CancelBatchOrdersWithHttpInfo(cancelBatchOrder, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;CancelOrderResult&gt;</returns>
        public ApiResponse<List<CancelOrderResult>> CancelBatchOrdersWithHttpInfo (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string))
        {
            // verify the required parameter 'cancelBatchOrder' is set
            if (cancelBatchOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelBatchOrder' when calling SpotApi->CancelBatchOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = cancelBatchOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CancelOrderResult>>("/spot/cancel_batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;CancelOrderResult&gt;</returns>
        public async Task<List<CancelOrderResult>> CancelBatchOrdersAsync (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<CancelOrderResult>> localVarResponse = await CancelBatchOrdersAsyncWithHttpInfo(cancelBatchOrder, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a batch of orders with an ID list Multiple currency pairs can be specified, but maximum 20 orders are allowed per request
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelBatchOrder"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CancelOrderResult&gt;)</returns>
        public async Task<ApiResponse<List<CancelOrderResult>>> CancelBatchOrdersAsyncWithHttpInfo (List<CancelBatchOrder> cancelBatchOrder, string xGateExptime = default(string))
        {
            // verify the required parameter 'cancelBatchOrder' is set
            if (cancelBatchOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelBatchOrder' when calling SpotApi->CancelBatchOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = cancelBatchOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CancelOrderResult>>("/spot/cancel_batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Order</returns>
        public Order GetOrder (string orderId, string currencyPair, string account = default(string))
        {
             ApiResponse<Order> localVarResponse = GetOrderWithHttpInfo(orderId, currencyPair, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single order By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> GetOrderWithHttpInfo (string orderId, string currencyPair, string account = default(string))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->GetOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single order By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of Order</returns>
        public async Task<Order> GetOrderAsync (string orderId, string currencyPair, string account = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await GetOrderAsyncWithHttpInfo(orderId, currencyPair, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single order By default, orders for spot, unified account and warehouse-by-site leverage account are checked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string orderId, string currencyPair, string account = default(string))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->GetOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->GetOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Order</returns>
        public Order CancelOrder (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
             ApiResponse<Order> localVarResponse = CancelOrderWithHttpInfo(orderId, currencyPair, account, actionMode, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a single order By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> CancelOrderWithHttpInfo (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->CancelOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->CancelOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (actionMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "action_mode", actionMode));
            }
            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a single order By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of Order</returns>
        public async Task<Order> CancelOrderAsync (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await CancelOrderAsyncWithHttpInfo(orderId, currencyPair, account, actionMode, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a single order By default, orders for spot, unified accounts and leveraged accounts are revoked.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="currencyPair">Currency pair</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="actionMode">Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> CancelOrderAsyncWithHttpInfo (string orderId, string currencyPair, string account = default(string), string actionMode = default(string), string xGateExptime = default(string))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->CancelOrder");

            // verify the required parameter 'currencyPair' is set
            if (currencyPair == null)
                throw new ApiException(400, "Missing required parameter 'currencyPair' when calling SpotApi->CancelOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (actionMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "action_mode", actionMode));
            }
            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Amend an order Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Order</returns>
        public Order AmendOrder (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string))
        {
             ApiResponse<Order> localVarResponse = AmendOrderWithHttpInfo(orderId, orderPatch, currencyPair, account, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Amend an order Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> AmendOrderWithHttpInfo (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->AmendOrder");

            // verify the required parameter 'orderPatch' is set
            if (orderPatch == null)
                throw new ApiException(400, "Missing required parameter 'orderPatch' when calling SpotApi->AmendOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = orderPatch;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AmendOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Amend an order Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of Order</returns>
        public async Task<Order> AmendOrderAsync (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<Order> localVarResponse = await AmendOrderAsyncWithHttpInfo(orderId, orderPatch, currencyPair, account, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Amend an order Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.Modify orders in spot, unified account and isolated margin account by default.  Currently both request body and query support currency_pair and account parameters, but request body has higher priority.  currency_pair must be filled in one of the request body or query parameters.  About rate limit: Order modification and order creation share the same rate limit rules.  About matching priority: Only reducing the quantity does not affect the matching priority. Modifying the price or increasing the quantity will adjust the priority to the end of the new price level.  Note: Modifying the quantity to be less than the filled quantity will trigger a cancellation operation.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID returned when the order was successfully created or the custom ID specified by the user&#39;s creation (i.e. the &#x60;text&#x60; field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)</param>
        /// <param name="orderPatch"></param>
        /// <param name="currencyPair">Currency pair (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async Task<ApiResponse<Order>> AmendOrderAsyncWithHttpInfo (string orderId, OrderPatch orderPatch, string currencyPair = default(string), string account = default(string), string xGateExptime = default(string))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->AmendOrder");

            // verify the required parameter 'orderPatch' is set
            if (orderPatch == null)
                throw new ApiException(400, "Missing required parameter 'orderPatch' when calling SpotApi->AmendOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter
            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = orderPatch;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Order>("/spot/orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AmendOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>List&lt;Trade&gt;</returns>
        public List<Trade> ListMyTrades (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?))
        {
             ApiResponse<List<Trade>> localVarResponse = ListMyTradesWithHttpInfo(currencyPair, limit, page, orderId, account, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List personal trading history By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>ApiResponse of List&lt;Trade&gt;</returns>
        public ApiResponse<List<Trade>> ListMyTradesWithHttpInfo (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Trade>>("/spot/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List personal trading history By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of List&lt;Trade&gt;</returns>
        public async Task<List<Trade>> ListMyTradesAsync (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<Trade>> localVarResponse = await ListMyTradesAsyncWithHttpInfo(currencyPair, limit, page, orderId, account, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List personal trading history By default query of transaction records for spot, unified account and warehouse-by-site leverage accounts.  The history within a specified time range can be queried by specifying &#x60;from&#x60; or (and) &#x60;to&#x60;.  - If no time parameters are specified, only data for the last 7 days can be obtained. - If only any parameter of &#x60;from&#x60; or &#x60;to&#x60; is specified, only 7-day data from the start (or end) of the specified time is returned. - The range of &#x60;from&#x60; and &#x60;to&#x60; is not allowed to exceed 30 days.  The parameters of the time range filter are processed according to the order end time.  The maximum number of pages when searching data using limit&amp;page paging function is 100,000, that is, limit * (page - 1) &lt;&#x3D; 100,000.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Retrieve results with specified currency pair (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional, default to 100)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="orderId">Filter trades with specified order ID. &#x60;currency_pair&#x60; is also required if this field is present (optional)</param>
        /// <param name="account">Specify query account. (optional)</param>
        /// <param name="from">Start timestamp of the query (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Trade&gt;)</returns>
        public async Task<ApiResponse<List<Trade>>> ListMyTradesAsyncWithHttpInfo (string currencyPair = default(string), int? limit = default(int?), int? page = default(int?), string orderId = default(string), string account = default(string), long? from = default(long?), long? to = default(long?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Trade>>("/spot/my_trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get server current time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemTime</returns>
        public SystemTime GetSystemTime ()
        {
             ApiResponse<SystemTime> localVarResponse = GetSystemTimeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get server current time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemTime</returns>
        public ApiResponse<SystemTime> GetSystemTimeWithHttpInfo ()
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemTime>("/spot/time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get server current time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemTime</returns>
        public async Task<SystemTime> GetSystemTimeAsync ()
        {
             Io.Gate.GateApi.Client.ApiResponse<SystemTime> localVarResponse = await GetSystemTimeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get server current time 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemTime)</returns>
        public async Task<ApiResponse<SystemTime>> GetSystemTimeAsyncWithHttpInfo ()
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemTime>("/spot/time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Countdown cancel orders Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>TriggerTime</returns>
        public TriggerTime CountdownCancelAllSpot (CountdownCancelAllSpotTask countdownCancelAllSpotTask)
        {
             ApiResponse<TriggerTime> localVarResponse = CountdownCancelAllSpotWithHttpInfo(countdownCancelAllSpotTask);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Countdown cancel orders Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>ApiResponse of TriggerTime</returns>
        public ApiResponse<TriggerTime> CountdownCancelAllSpotWithHttpInfo (CountdownCancelAllSpotTask countdownCancelAllSpotTask)
        {
            // verify the required parameter 'countdownCancelAllSpotTask' is set
            if (countdownCancelAllSpotTask == null)
                throw new ApiException(400, "Missing required parameter 'countdownCancelAllSpotTask' when calling SpotApi->CountdownCancelAllSpot");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countdownCancelAllSpotTask;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TriggerTime>("/spot/countdown_cancel_all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountdownCancelAllSpot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Countdown cancel orders Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>Task of TriggerTime</returns>
        public async Task<TriggerTime> CountdownCancelAllSpotAsync (CountdownCancelAllSpotTask countdownCancelAllSpotTask)
        {
             Io.Gate.GateApi.Client.ApiResponse<TriggerTime> localVarResponse = await CountdownCancelAllSpotAsyncWithHttpInfo(countdownCancelAllSpotTask);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Countdown cancel orders Spot order heartbeat detection. If there is no \&quot;cancel existing countdown\&quot; or \&quot;set new countdown\&quot; when the user-set &#x60;timeout&#x60; time is reached, the related &#x60;spot pending orders&#x60; will be automatically cancelled. This interface can be called repeatedly to set a new countdown or cancel the countdown. Usage example: Repeat this interface at 30s intervals, setting the countdown &#x60;timeout&#x60; to &#x60;30 (seconds)&#x60; each time. If this interface is not called again within 30 seconds, all pending orders on the &#x60;market&#x60; you specified will be automatically cancelled. If no &#x60;market&#x60; is specified, all market pending orders will be cancelled. If the &#x60;timeout&#x60; is set to 0 within 30 seconds, the countdown timer will be terminated and the automatic order cancellation function will be cancelled.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countdownCancelAllSpotTask"></param>
        /// <returns>Task of ApiResponse (TriggerTime)</returns>
        public async Task<ApiResponse<TriggerTime>> CountdownCancelAllSpotAsyncWithHttpInfo (CountdownCancelAllSpotTask countdownCancelAllSpotTask)
        {
            // verify the required parameter 'countdownCancelAllSpotTask' is set
            if (countdownCancelAllSpotTask == null)
                throw new ApiException(400, "Missing required parameter 'countdownCancelAllSpotTask' when calling SpotApi->CountdownCancelAllSpot");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = countdownCancelAllSpotTask;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TriggerTime>("/spot/countdown_cancel_all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountdownCancelAllSpot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch modification of orders Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>List&lt;BatchOrder&gt;</returns>
        public List<BatchOrder> AmendBatchOrders (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string))
        {
             ApiResponse<List<BatchOrder>> localVarResponse = AmendBatchOrdersWithHttpInfo(batchAmendItem, xGateExptime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch modification of orders Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>ApiResponse of List&lt;BatchOrder&gt;</returns>
        public ApiResponse<List<BatchOrder>> AmendBatchOrdersWithHttpInfo (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string))
        {
            // verify the required parameter 'batchAmendItem' is set
            if (batchAmendItem == null)
                throw new ApiException(400, "Missing required parameter 'batchAmendItem' when calling SpotApi->AmendBatchOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = batchAmendItem;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BatchOrder>>("/spot/amend_batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AmendBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch modification of orders Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of List&lt;BatchOrder&gt;</returns>
        public async Task<List<BatchOrder>> AmendBatchOrdersAsync (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<BatchOrder>> localVarResponse = await AmendBatchOrdersAsyncWithHttpInfo(batchAmendItem, xGateExptime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch modification of orders Modify orders in spot, unified account and isolated margin account by default. Modify uncompleted orders, up to 5 orders can be modified at a time. Request parameters should be passed in array format. If there are order modification failures during the batch modification process, the modification of the next order will continue to be executed, and the execution will return with the corresponding order failure information. The call order of batch modification orders is consistent with the order list order. The return content order of batch modification orders is consistent with the order list order.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchAmendItem"></param>
        /// <param name="xGateExptime">Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BatchOrder&gt;)</returns>
        public async Task<ApiResponse<List<BatchOrder>>> AmendBatchOrdersAsyncWithHttpInfo (List<BatchAmendItem> batchAmendItem, string xGateExptime = default(string))
        {
            // verify the required parameter 'batchAmendItem' is set
            if (batchAmendItem == null)
                throw new ApiException(400, "Missing required parameter 'batchAmendItem' when calling SpotApi->AmendBatchOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (xGateExptime != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-gate-exptime", ClientUtils.ParameterToString(xGateExptime)); // header parameter
            }
            localVarRequestOptions.Data = batchAmendItem;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BatchOrder>>("/spot/amend_batch_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AmendBatchOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query spot insurance fund historical data 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>List&lt;SpotInsuranceHistory&gt;</returns>
        public List<SpotInsuranceHistory> GetSpotInsuranceHistory (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<SpotInsuranceHistory>> localVarResponse = GetSpotInsuranceHistoryWithHttpInfo(business, currency, from, to, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query spot insurance fund historical data 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>ApiResponse of List&lt;SpotInsuranceHistory&gt;</returns>
        public ApiResponse<List<SpotInsuranceHistory>> GetSpotInsuranceHistoryWithHttpInfo (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'business' is set
            if (business == null)
                throw new ApiException(400, "Missing required parameter 'business' when calling SpotApi->GetSpotInsuranceHistory");

            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SpotApi->GetSpotInsuranceHistory");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "business", business));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SpotInsuranceHistory>>("/spot/insurance_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotInsuranceHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query spot insurance fund historical data 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>Task of List&lt;SpotInsuranceHistory&gt;</returns>
        public async Task<List<SpotInsuranceHistory>> GetSpotInsuranceHistoryAsync (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SpotInsuranceHistory>> localVarResponse = await GetSpotInsuranceHistoryAsyncWithHttpInfo(business, currency, from, to, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query spot insurance fund historical data 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">Leverage business, margin - position by position; unified - unified account</param>
        /// <param name="currency">Currency</param>
        /// <param name="from">Start timestamp, seconds</param>
        /// <param name="to">End timestamp, in seconds</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The maximum number of items returned in the list, the default value is 30 (optional, default to 30)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotInsuranceHistory&gt;)</returns>
        public async Task<ApiResponse<List<SpotInsuranceHistory>>> GetSpotInsuranceHistoryAsyncWithHttpInfo (string business, string currency, long from, long to, int? page = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'business' is set
            if (business == null)
                throw new ApiException(400, "Missing required parameter 'business' when calling SpotApi->GetSpotInsuranceHistory");

            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SpotApi->GetSpotInsuranceHistory");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "business", business));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SpotInsuranceHistory>>("/spot/insurance_history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotInsuranceHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve running auto order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;SpotPriceTriggeredOrder&gt;</returns>
        public List<SpotPriceTriggeredOrder> ListSpotPriceTriggeredOrders (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<SpotPriceTriggeredOrder>> localVarResponse = ListSpotPriceTriggeredOrdersWithHttpInfo(status, market, account, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve running auto order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        public ApiResponse<List<SpotPriceTriggeredOrder>> ListSpotPriceTriggeredOrdersWithHttpInfo (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SpotApi->ListSpotPriceTriggeredOrders");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SpotPriceTriggeredOrder>>("/spot/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotPriceTriggeredOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve running auto order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        public async Task<List<SpotPriceTriggeredOrder>> ListSpotPriceTriggeredOrdersAsync (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SpotPriceTriggeredOrder>> localVarResponse = await ListSpotPriceTriggeredOrdersAsyncWithHttpInfo(status, market, account, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve running auto order list 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only list the orders with this status</param>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotPriceTriggeredOrder&gt;)</returns>
        public async Task<ApiResponse<List<SpotPriceTriggeredOrder>>> ListSpotPriceTriggeredOrdersAsyncWithHttpInfo (string status, string market = default(string), string account = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SpotApi->ListSpotPriceTriggeredOrders");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SpotPriceTriggeredOrder>>("/spot/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpotPriceTriggeredOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>TriggerOrderResponse</returns>
        public TriggerOrderResponse CreateSpotPriceTriggeredOrder (SpotPriceTriggeredOrder spotPriceTriggeredOrder)
        {
             ApiResponse<TriggerOrderResponse> localVarResponse = CreateSpotPriceTriggeredOrderWithHttpInfo(spotPriceTriggeredOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>ApiResponse of TriggerOrderResponse</returns>
        public ApiResponse<TriggerOrderResponse> CreateSpotPriceTriggeredOrderWithHttpInfo (SpotPriceTriggeredOrder spotPriceTriggeredOrder)
        {
            // verify the required parameter 'spotPriceTriggeredOrder' is set
            if (spotPriceTriggeredOrder == null)
                throw new ApiException(400, "Missing required parameter 'spotPriceTriggeredOrder' when calling SpotApi->CreateSpotPriceTriggeredOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = spotPriceTriggeredOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<TriggerOrderResponse>("/spot/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpotPriceTriggeredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>Task of TriggerOrderResponse</returns>
        public async Task<TriggerOrderResponse> CreateSpotPriceTriggeredOrderAsync (SpotPriceTriggeredOrder spotPriceTriggeredOrder)
        {
             Io.Gate.GateApi.Client.ApiResponse<TriggerOrderResponse> localVarResponse = await CreateSpotPriceTriggeredOrderAsyncWithHttpInfo(spotPriceTriggeredOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotPriceTriggeredOrder"></param>
        /// <returns>Task of ApiResponse (TriggerOrderResponse)</returns>
        public async Task<ApiResponse<TriggerOrderResponse>> CreateSpotPriceTriggeredOrderAsyncWithHttpInfo (SpotPriceTriggeredOrder spotPriceTriggeredOrder)
        {
            // verify the required parameter 'spotPriceTriggeredOrder' is set
            if (spotPriceTriggeredOrder == null)
                throw new ApiException(400, "Missing required parameter 'spotPriceTriggeredOrder' when calling SpotApi->CreateSpotPriceTriggeredOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = spotPriceTriggeredOrder;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TriggerOrderResponse>("/spot/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpotPriceTriggeredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>List&lt;SpotPriceTriggeredOrder&gt;</returns>
        public List<SpotPriceTriggeredOrder> CancelSpotPriceTriggeredOrderList (string market = default(string), string account = default(string))
        {
             ApiResponse<List<SpotPriceTriggeredOrder>> localVarResponse = CancelSpotPriceTriggeredOrderListWithHttpInfo(market, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        public ApiResponse<List<SpotPriceTriggeredOrder>> CancelSpotPriceTriggeredOrderListWithHttpInfo (string market = default(string), string account = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<SpotPriceTriggeredOrder>>("/spot/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSpotPriceTriggeredOrderList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>Task of List&lt;SpotPriceTriggeredOrder&gt;</returns>
        public async Task<List<SpotPriceTriggeredOrder>> CancelSpotPriceTriggeredOrderListAsync (string market = default(string), string account = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SpotPriceTriggeredOrder>> localVarResponse = await CancelSpotPriceTriggeredOrderListAsyncWithHttpInfo(market, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel All Price-triggered Orders 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Currency pair (optional)</param>
        /// <param name="account">Trading account type.  Portfolio margin account must set to &#x60;unified&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SpotPriceTriggeredOrder&gt;)</returns>
        public async Task<ApiResponse<List<SpotPriceTriggeredOrder>>> CancelSpotPriceTriggeredOrderListAsyncWithHttpInfo (string market = default(string), string account = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<SpotPriceTriggeredOrder>>("/spot/price_orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSpotPriceTriggeredOrderList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>SpotPriceTriggeredOrder</returns>
        public SpotPriceTriggeredOrder GetSpotPriceTriggeredOrder (string orderId)
        {
             ApiResponse<SpotPriceTriggeredOrder> localVarResponse = GetSpotPriceTriggeredOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of SpotPriceTriggeredOrder</returns>
        public ApiResponse<SpotPriceTriggeredOrder> GetSpotPriceTriggeredOrderWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->GetSpotPriceTriggeredOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpotPriceTriggeredOrder>("/spot/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotPriceTriggeredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of SpotPriceTriggeredOrder</returns>
        public async Task<SpotPriceTriggeredOrder> GetSpotPriceTriggeredOrderAsync (string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<SpotPriceTriggeredOrder> localVarResponse = await GetSpotPriceTriggeredOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (SpotPriceTriggeredOrder)</returns>
        public async Task<ApiResponse<SpotPriceTriggeredOrder>> GetSpotPriceTriggeredOrderAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->GetSpotPriceTriggeredOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SpotPriceTriggeredOrder>("/spot/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotPriceTriggeredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>SpotPriceTriggeredOrder</returns>
        public SpotPriceTriggeredOrder CancelSpotPriceTriggeredOrder (string orderId)
        {
             ApiResponse<SpotPriceTriggeredOrder> localVarResponse = CancelSpotPriceTriggeredOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>ApiResponse of SpotPriceTriggeredOrder</returns>
        public ApiResponse<SpotPriceTriggeredOrder> CancelSpotPriceTriggeredOrderWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->CancelSpotPriceTriggeredOrder");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SpotPriceTriggeredOrder>("/spot/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSpotPriceTriggeredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of SpotPriceTriggeredOrder</returns>
        public async Task<SpotPriceTriggeredOrder> CancelSpotPriceTriggeredOrderAsync (string orderId)
        {
             Io.Gate.GateApi.Client.ApiResponse<SpotPriceTriggeredOrder> localVarResponse = await CancelSpotPriceTriggeredOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancel a price-triggered order 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieve the data of the order with the specified ID</param>
        /// <returns>Task of ApiResponse (SpotPriceTriggeredOrder)</returns>
        public async Task<ApiResponse<SpotPriceTriggeredOrder>> CancelSpotPriceTriggeredOrderAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SpotApi->CancelSpotPriceTriggeredOrder");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("order_id", ClientUtils.ParameterToString(orderId)); // path parameter

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SpotPriceTriggeredOrder>("/spot/price_orders/{order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSpotPriceTriggeredOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
